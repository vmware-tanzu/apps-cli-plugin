//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	metav1 "dies.dev/apis/meta/v1"
	json "encoding/json"
	fmtx "fmt"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

var BindingBlank = (&BindingDie{}).DieFeed(corev1.Binding{})

type BindingDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Binding
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *BindingDie) DieImmutable(immutable bool) *BindingDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *BindingDie) DieFeed(r corev1.Binding) *BindingDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &BindingDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *BindingDie) DieFeedPtr(r *corev1.Binding) *BindingDie {
	if r == nil {
		r = &corev1.Binding{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *BindingDie) DieFeedRawExtension(raw runtime.RawExtension) *BindingDie {
	b, _ := json.Marshal(raw)
	r := corev1.Binding{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *BindingDie) DieRelease() corev1.Binding {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *BindingDie) DieReleasePtr() *corev1.Binding {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *BindingDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *BindingDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *BindingDie) DieStamp(fn func(r *corev1.Binding)) *BindingDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *BindingDie) DeepCopy() *BindingDie {
	r := *d.r.DeepCopy()
	return &BindingDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*BindingDie)(nil)

func (d *BindingDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *BindingDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *BindingDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *BindingDie) UnmarshalJSON(b []byte) error {
	if d == BindingBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.Binding{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *BindingDie) APIVersion(v string) *BindingDie {
	return d.DieStamp(func(r *corev1.Binding) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *BindingDie) Kind(v string) *BindingDie {
	return d.DieStamp(func(r *corev1.Binding) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *BindingDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *BindingDie {
	return d.DieStamp(func(r *corev1.Binding) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// The target object that you want to bind to the standard object.
func (d *BindingDie) Target(v corev1.ObjectReference) *BindingDie {
	return d.DieStamp(func(r *corev1.Binding) {
		r.Target = v
	})
}

var ObjectReferenceBlank = (&ObjectReferenceDie{}).DieFeed(corev1.ObjectReference{})

type ObjectReferenceDie struct {
	mutable bool
	r       corev1.ObjectReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ObjectReferenceDie) DieImmutable(immutable bool) *ObjectReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ObjectReferenceDie) DieFeed(r corev1.ObjectReference) *ObjectReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ObjectReferenceDie) DieFeedPtr(r *corev1.ObjectReference) *ObjectReferenceDie {
	if r == nil {
		r = &corev1.ObjectReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ObjectReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *ObjectReferenceDie {
	b, _ := json.Marshal(raw)
	r := corev1.ObjectReference{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ObjectReferenceDie) DieRelease() corev1.ObjectReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ObjectReferenceDie) DieReleasePtr() *corev1.ObjectReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ObjectReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ObjectReferenceDie) DieStamp(fn func(r *corev1.ObjectReference)) *ObjectReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ObjectReferenceDie) DeepCopy() *ObjectReferenceDie {
	r := *d.r.DeepCopy()
	return &ObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ObjectReferenceDie) Kind(v string) *ObjectReferenceDie {
	return d.DieStamp(func(r *corev1.ObjectReference) {
		r.Kind = v
	})
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (d *ObjectReferenceDie) Namespace(v string) *ObjectReferenceDie {
	return d.DieStamp(func(r *corev1.ObjectReference) {
		r.Namespace = v
	})
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (d *ObjectReferenceDie) Name(v string) *ObjectReferenceDie {
	return d.DieStamp(func(r *corev1.ObjectReference) {
		r.Name = v
	})
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (d *ObjectReferenceDie) UID(v types.UID) *ObjectReferenceDie {
	return d.DieStamp(func(r *corev1.ObjectReference) {
		r.UID = v
	})
}

// API version of the referent.
func (d *ObjectReferenceDie) APIVersion(v string) *ObjectReferenceDie {
	return d.DieStamp(func(r *corev1.ObjectReference) {
		r.APIVersion = v
	})
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (d *ObjectReferenceDie) ResourceVersion(v string) *ObjectReferenceDie {
	return d.DieStamp(func(r *corev1.ObjectReference) {
		r.ResourceVersion = v
	})
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (d *ObjectReferenceDie) FieldPath(v string) *ObjectReferenceDie {
	return d.DieStamp(func(r *corev1.ObjectReference) {
		r.FieldPath = v
	})
}

var LocalObjectReferenceBlank = (&LocalObjectReferenceDie{}).DieFeed(corev1.LocalObjectReference{})

type LocalObjectReferenceDie struct {
	mutable bool
	r       corev1.LocalObjectReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LocalObjectReferenceDie) DieImmutable(immutable bool) *LocalObjectReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LocalObjectReferenceDie) DieFeed(r corev1.LocalObjectReference) *LocalObjectReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LocalObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LocalObjectReferenceDie) DieFeedPtr(r *corev1.LocalObjectReference) *LocalObjectReferenceDie {
	if r == nil {
		r = &corev1.LocalObjectReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *LocalObjectReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *LocalObjectReferenceDie {
	b, _ := json.Marshal(raw)
	r := corev1.LocalObjectReference{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *LocalObjectReferenceDie) DieRelease() corev1.LocalObjectReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LocalObjectReferenceDie) DieReleasePtr() *corev1.LocalObjectReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *LocalObjectReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LocalObjectReferenceDie) DieStamp(fn func(r *corev1.LocalObjectReference)) *LocalObjectReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LocalObjectReferenceDie) DeepCopy() *LocalObjectReferenceDie {
	r := *d.r.DeepCopy()
	return &LocalObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (d *LocalObjectReferenceDie) Name(v string) *LocalObjectReferenceDie {
	return d.DieStamp(func(r *corev1.LocalObjectReference) {
		r.Name = v
	})
}

var TypedLocalObjectReferenceBlank = (&TypedLocalObjectReferenceDie{}).DieFeed(corev1.TypedLocalObjectReference{})

type TypedLocalObjectReferenceDie struct {
	mutable bool
	r       corev1.TypedLocalObjectReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *TypedLocalObjectReferenceDie) DieImmutable(immutable bool) *TypedLocalObjectReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *TypedLocalObjectReferenceDie) DieFeed(r corev1.TypedLocalObjectReference) *TypedLocalObjectReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &TypedLocalObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *TypedLocalObjectReferenceDie) DieFeedPtr(r *corev1.TypedLocalObjectReference) *TypedLocalObjectReferenceDie {
	if r == nil {
		r = &corev1.TypedLocalObjectReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *TypedLocalObjectReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *TypedLocalObjectReferenceDie {
	b, _ := json.Marshal(raw)
	r := corev1.TypedLocalObjectReference{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *TypedLocalObjectReferenceDie) DieRelease() corev1.TypedLocalObjectReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *TypedLocalObjectReferenceDie) DieReleasePtr() *corev1.TypedLocalObjectReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *TypedLocalObjectReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *TypedLocalObjectReferenceDie) DieStamp(fn func(r *corev1.TypedLocalObjectReference)) *TypedLocalObjectReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *TypedLocalObjectReferenceDie) DeepCopy() *TypedLocalObjectReferenceDie {
	r := *d.r.DeepCopy()
	return &TypedLocalObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (d *TypedLocalObjectReferenceDie) APIGroup(v *string) *TypedLocalObjectReferenceDie {
	return d.DieStamp(func(r *corev1.TypedLocalObjectReference) {
		r.APIGroup = v
	})
}

// Kind is the type of resource being referenced
func (d *TypedLocalObjectReferenceDie) Kind(v string) *TypedLocalObjectReferenceDie {
	return d.DieStamp(func(r *corev1.TypedLocalObjectReference) {
		r.Kind = v
	})
}

// Name is the name of resource being referenced
func (d *TypedLocalObjectReferenceDie) Name(v string) *TypedLocalObjectReferenceDie {
	return d.DieStamp(func(r *corev1.TypedLocalObjectReference) {
		r.Name = v
	})
}

var SecretReferenceBlank = (&SecretReferenceDie{}).DieFeed(corev1.SecretReference{})

type SecretReferenceDie struct {
	mutable bool
	r       corev1.SecretReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SecretReferenceDie) DieImmutable(immutable bool) *SecretReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SecretReferenceDie) DieFeed(r corev1.SecretReference) *SecretReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SecretReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SecretReferenceDie) DieFeedPtr(r *corev1.SecretReference) *SecretReferenceDie {
	if r == nil {
		r = &corev1.SecretReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *SecretReferenceDie {
	b, _ := json.Marshal(raw)
	r := corev1.SecretReference{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SecretReferenceDie) DieRelease() corev1.SecretReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SecretReferenceDie) DieReleasePtr() *corev1.SecretReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SecretReferenceDie) DieStamp(fn func(r *corev1.SecretReference)) *SecretReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SecretReferenceDie) DeepCopy() *SecretReferenceDie {
	r := *d.r.DeepCopy()
	return &SecretReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name is unique within a namespace to reference a secret resource.
func (d *SecretReferenceDie) Name(v string) *SecretReferenceDie {
	return d.DieStamp(func(r *corev1.SecretReference) {
		r.Name = v
	})
}

// namespace defines the space within which the secret name must be unique.
func (d *SecretReferenceDie) Namespace(v string) *SecretReferenceDie {
	return d.DieStamp(func(r *corev1.SecretReference) {
		r.Namespace = v
	})
}

var TopologySelectorTermBlank = (&TopologySelectorTermDie{}).DieFeed(corev1.TopologySelectorTerm{})

type TopologySelectorTermDie struct {
	mutable bool
	r       corev1.TopologySelectorTerm
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *TopologySelectorTermDie) DieImmutable(immutable bool) *TopologySelectorTermDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *TopologySelectorTermDie) DieFeed(r corev1.TopologySelectorTerm) *TopologySelectorTermDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &TopologySelectorTermDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *TopologySelectorTermDie) DieFeedPtr(r *corev1.TopologySelectorTerm) *TopologySelectorTermDie {
	if r == nil {
		r = &corev1.TopologySelectorTerm{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *TopologySelectorTermDie) DieFeedRawExtension(raw runtime.RawExtension) *TopologySelectorTermDie {
	b, _ := json.Marshal(raw)
	r := corev1.TopologySelectorTerm{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *TopologySelectorTermDie) DieRelease() corev1.TopologySelectorTerm {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *TopologySelectorTermDie) DieReleasePtr() *corev1.TopologySelectorTerm {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *TopologySelectorTermDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *TopologySelectorTermDie) DieStamp(fn func(r *corev1.TopologySelectorTerm)) *TopologySelectorTermDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *TopologySelectorTermDie) DeepCopy() *TopologySelectorTermDie {
	r := *d.r.DeepCopy()
	return &TopologySelectorTermDie{
		mutable: d.mutable,
		r:       r,
	}
}

// A list of topology selector requirements by labels.
func (d *TopologySelectorTermDie) MatchLabelExpressions(v ...corev1.TopologySelectorLabelRequirement) *TopologySelectorTermDie {
	return d.DieStamp(func(r *corev1.TopologySelectorTerm) {
		r.MatchLabelExpressions = v
	})
}

var TopologySelectorLabelRequirementBlank = (&TopologySelectorLabelRequirementDie{}).DieFeed(corev1.TopologySelectorLabelRequirement{})

type TopologySelectorLabelRequirementDie struct {
	mutable bool
	r       corev1.TopologySelectorLabelRequirement
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *TopologySelectorLabelRequirementDie) DieImmutable(immutable bool) *TopologySelectorLabelRequirementDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *TopologySelectorLabelRequirementDie) DieFeed(r corev1.TopologySelectorLabelRequirement) *TopologySelectorLabelRequirementDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &TopologySelectorLabelRequirementDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *TopologySelectorLabelRequirementDie) DieFeedPtr(r *corev1.TopologySelectorLabelRequirement) *TopologySelectorLabelRequirementDie {
	if r == nil {
		r = &corev1.TopologySelectorLabelRequirement{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *TopologySelectorLabelRequirementDie) DieFeedRawExtension(raw runtime.RawExtension) *TopologySelectorLabelRequirementDie {
	b, _ := json.Marshal(raw)
	r := corev1.TopologySelectorLabelRequirement{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *TopologySelectorLabelRequirementDie) DieRelease() corev1.TopologySelectorLabelRequirement {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *TopologySelectorLabelRequirementDie) DieReleasePtr() *corev1.TopologySelectorLabelRequirement {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *TopologySelectorLabelRequirementDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *TopologySelectorLabelRequirementDie) DieStamp(fn func(r *corev1.TopologySelectorLabelRequirement)) *TopologySelectorLabelRequirementDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *TopologySelectorLabelRequirementDie) DeepCopy() *TopologySelectorLabelRequirementDie {
	r := *d.r.DeepCopy()
	return &TopologySelectorLabelRequirementDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The label key that the selector applies to.
func (d *TopologySelectorLabelRequirementDie) Key(v string) *TopologySelectorLabelRequirementDie {
	return d.DieStamp(func(r *corev1.TopologySelectorLabelRequirement) {
		r.Key = v
	})
}

// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
func (d *TopologySelectorLabelRequirementDie) Values(v ...string) *TopologySelectorLabelRequirementDie {
	return d.DieStamp(func(r *corev1.TopologySelectorLabelRequirement) {
		r.Values = v
	})
}

var ComponentStatusBlank = (&ComponentStatusDie{}).DieFeed(corev1.ComponentStatus{})

type ComponentStatusDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.ComponentStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ComponentStatusDie) DieImmutable(immutable bool) *ComponentStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ComponentStatusDie) DieFeed(r corev1.ComponentStatus) *ComponentStatusDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ComponentStatusDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ComponentStatusDie) DieFeedPtr(r *corev1.ComponentStatus) *ComponentStatusDie {
	if r == nil {
		r = &corev1.ComponentStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ComponentStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ComponentStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.ComponentStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ComponentStatusDie) DieRelease() corev1.ComponentStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ComponentStatusDie) DieReleasePtr() *corev1.ComponentStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *ComponentStatusDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ComponentStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ComponentStatusDie) DieStamp(fn func(r *corev1.ComponentStatus)) *ComponentStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ComponentStatusDie) DeepCopy() *ComponentStatusDie {
	r := *d.r.DeepCopy()
	return &ComponentStatusDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*ComponentStatusDie)(nil)

func (d *ComponentStatusDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ComponentStatusDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ComponentStatusDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ComponentStatusDie) UnmarshalJSON(b []byte) error {
	if d == ComponentStatusBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.ComponentStatus{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ComponentStatusDie) APIVersion(v string) *ComponentStatusDie {
	return d.DieStamp(func(r *corev1.ComponentStatus) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ComponentStatusDie) Kind(v string) *ComponentStatusDie {
	return d.DieStamp(func(r *corev1.ComponentStatus) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ComponentStatusDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ComponentStatusDie {
	return d.DieStamp(func(r *corev1.ComponentStatus) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// List of component conditions observed
func (d *ComponentStatusDie) Conditions(v ...corev1.ComponentCondition) *ComponentStatusDie {
	return d.DieStamp(func(r *corev1.ComponentStatus) {
		r.Conditions = v
	})
}

var ConfigMapBlank = (&ConfigMapDie{}).DieFeed(corev1.ConfigMap{})

type ConfigMapDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.ConfigMap
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConfigMapDie) DieImmutable(immutable bool) *ConfigMapDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConfigMapDie) DieFeed(r corev1.ConfigMap) *ConfigMapDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ConfigMapDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConfigMapDie) DieFeedPtr(r *corev1.ConfigMap) *ConfigMapDie {
	if r == nil {
		r = &corev1.ConfigMap{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapDie) DieFeedRawExtension(raw runtime.RawExtension) *ConfigMapDie {
	b, _ := json.Marshal(raw)
	r := corev1.ConfigMap{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ConfigMapDie) DieRelease() corev1.ConfigMap {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConfigMapDie) DieReleasePtr() *corev1.ConfigMap {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *ConfigMapDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConfigMapDie) DieStamp(fn func(r *corev1.ConfigMap)) *ConfigMapDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConfigMapDie) DeepCopy() *ConfigMapDie {
	r := *d.r.DeepCopy()
	return &ConfigMapDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*ConfigMapDie)(nil)

func (d *ConfigMapDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ConfigMapDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ConfigMapDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ConfigMapDie) UnmarshalJSON(b []byte) error {
	if d == ConfigMapBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.ConfigMap{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ConfigMapDie) APIVersion(v string) *ConfigMapDie {
	return d.DieStamp(func(r *corev1.ConfigMap) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ConfigMapDie) Kind(v string) *ConfigMapDie {
	return d.DieStamp(func(r *corev1.ConfigMap) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ConfigMapDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ConfigMapDie {
	return d.DieStamp(func(r *corev1.ConfigMap) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
func (d *ConfigMapDie) Immutable(v *bool) *ConfigMapDie {
	return d.DieStamp(func(r *corev1.ConfigMap) {
		r.Immutable = v
	})
}

var ContainerBlank = (&ContainerDie{}).DieFeed(corev1.Container{})

type ContainerDie struct {
	mutable bool
	r       corev1.Container
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerDie) DieImmutable(immutable bool) *ContainerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerDie) DieFeed(r corev1.Container) *ContainerDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerDie) DieFeedPtr(r *corev1.Container) *ContainerDie {
	if r == nil {
		r = &corev1.Container{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerDie {
	b, _ := json.Marshal(raw)
	r := corev1.Container{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerDie) DieRelease() corev1.Container {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerDie) DieReleasePtr() *corev1.Container {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerDie) DieStamp(fn func(r *corev1.Container)) *ContainerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerDie) DeepCopy() *ContainerDie {
	r := *d.r.DeepCopy()
	return &ContainerDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
func (d *ContainerDie) Name(v string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Name = v
	})
}

// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
func (d *ContainerDie) Image(v string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Image = v
	})
}

// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (d *ContainerDie) Command(v ...string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Command = v
	})
}

// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (d *ContainerDie) Args(v ...string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Args = v
	})
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
func (d *ContainerDie) WorkingDir(v string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.WorkingDir = v
	})
}

// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
func (d *ContainerDie) Ports(v ...corev1.ContainerPort) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Ports = v
	})
}

// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
func (d *ContainerDie) EnvFrom(v ...corev1.EnvFromSource) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.EnvFrom = v
	})
}

// List of environment variables to set in the container. Cannot be updated.
func (d *ContainerDie) Env(v ...corev1.EnvVar) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Env = v
	})
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (d *ContainerDie) Resources(v corev1.ResourceRequirements) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Resources = v
	})
}

// Pod volumes to mount into the container's filesystem. Cannot be updated.
func (d *ContainerDie) VolumeMounts(v ...corev1.VolumeMount) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.VolumeMounts = v
	})
}

// volumeDevices is the list of block devices to be used by the container.
func (d *ContainerDie) VolumeDevices(v ...corev1.VolumeDevice) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.VolumeDevices = v
	})
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (d *ContainerDie) LivenessProbe(v *corev1.Probe) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.LivenessProbe = v
	})
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (d *ContainerDie) ReadinessProbe(v *corev1.Probe) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.ReadinessProbe = v
	})
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (d *ContainerDie) StartupProbe(v *corev1.Probe) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.StartupProbe = v
	})
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
func (d *ContainerDie) Lifecycle(v *corev1.Lifecycle) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Lifecycle = v
	})
}

// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
func (d *ContainerDie) TerminationMessagePath(v string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.TerminationMessagePath = v
	})
}

// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (d *ContainerDie) TerminationMessagePolicy(v corev1.TerminationMessagePolicy) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.TerminationMessagePolicy = v
	})
}

// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
func (d *ContainerDie) ImagePullPolicy(v corev1.PullPolicy) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.ImagePullPolicy = v
	})
}

// SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (d *ContainerDie) SecurityContext(v *corev1.SecurityContext) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.SecurityContext = v
	})
}

// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
func (d *ContainerDie) Stdin(v bool) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Stdin = v
	})
}

// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
func (d *ContainerDie) StdinOnce(v bool) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.StdinOnce = v
	})
}

// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
func (d *ContainerDie) TTY(v bool) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.TTY = v
	})
}

var ContainerPortBlank = (&ContainerPortDie{}).DieFeed(corev1.ContainerPort{})

type ContainerPortDie struct {
	mutable bool
	r       corev1.ContainerPort
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerPortDie) DieImmutable(immutable bool) *ContainerPortDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerPortDie) DieFeed(r corev1.ContainerPort) *ContainerPortDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerPortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerPortDie) DieFeedPtr(r *corev1.ContainerPort) *ContainerPortDie {
	if r == nil {
		r = &corev1.ContainerPort{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerPortDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerPortDie {
	b, _ := json.Marshal(raw)
	r := corev1.ContainerPort{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerPortDie) DieRelease() corev1.ContainerPort {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerPortDie) DieReleasePtr() *corev1.ContainerPort {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerPortDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerPortDie) DieStamp(fn func(r *corev1.ContainerPort)) *ContainerPortDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerPortDie) DeepCopy() *ContainerPortDie {
	r := *d.r.DeepCopy()
	return &ContainerPortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
func (d *ContainerPortDie) Name(v string) *ContainerPortDie {
	return d.DieStamp(func(r *corev1.ContainerPort) {
		r.Name = v
	})
}

// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
func (d *ContainerPortDie) HostPort(v int32) *ContainerPortDie {
	return d.DieStamp(func(r *corev1.ContainerPort) {
		r.HostPort = v
	})
}

// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
func (d *ContainerPortDie) ContainerPort(v int32) *ContainerPortDie {
	return d.DieStamp(func(r *corev1.ContainerPort) {
		r.ContainerPort = v
	})
}

// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
func (d *ContainerPortDie) Protocol(v corev1.Protocol) *ContainerPortDie {
	return d.DieStamp(func(r *corev1.ContainerPort) {
		r.Protocol = v
	})
}

// What host IP to bind the external port to.
func (d *ContainerPortDie) HostIP(v string) *ContainerPortDie {
	return d.DieStamp(func(r *corev1.ContainerPort) {
		r.HostIP = v
	})
}

var EnvFromSourceBlank = (&EnvFromSourceDie{}).DieFeed(corev1.EnvFromSource{})

type EnvFromSourceDie struct {
	mutable bool
	r       corev1.EnvFromSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EnvFromSourceDie) DieImmutable(immutable bool) *EnvFromSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EnvFromSourceDie) DieFeed(r corev1.EnvFromSource) *EnvFromSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EnvFromSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EnvFromSourceDie) DieFeedPtr(r *corev1.EnvFromSource) *EnvFromSourceDie {
	if r == nil {
		r = &corev1.EnvFromSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EnvFromSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *EnvFromSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.EnvFromSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EnvFromSourceDie) DieRelease() corev1.EnvFromSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EnvFromSourceDie) DieReleasePtr() *corev1.EnvFromSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EnvFromSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EnvFromSourceDie) DieStamp(fn func(r *corev1.EnvFromSource)) *EnvFromSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EnvFromSourceDie) DeepCopy() *EnvFromSourceDie {
	r := *d.r.DeepCopy()
	return &EnvFromSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
func (d *EnvFromSourceDie) Prefix(v string) *EnvFromSourceDie {
	return d.DieStamp(func(r *corev1.EnvFromSource) {
		r.Prefix = v
	})
}

// The ConfigMap to select from
func (d *EnvFromSourceDie) ConfigMapRef(v *corev1.ConfigMapEnvSource) *EnvFromSourceDie {
	return d.DieStamp(func(r *corev1.EnvFromSource) {
		r.ConfigMapRef = v
	})
}

// The Secret to select from
func (d *EnvFromSourceDie) SecretRef(v *corev1.SecretEnvSource) *EnvFromSourceDie {
	return d.DieStamp(func(r *corev1.EnvFromSource) {
		r.SecretRef = v
	})
}

var ConfigMapEnvSourceBlank = (&ConfigMapEnvSourceDie{}).DieFeed(corev1.ConfigMapEnvSource{})

type ConfigMapEnvSourceDie struct {
	mutable bool
	r       corev1.ConfigMapEnvSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConfigMapEnvSourceDie) DieImmutable(immutable bool) *ConfigMapEnvSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConfigMapEnvSourceDie) DieFeed(r corev1.ConfigMapEnvSource) *ConfigMapEnvSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ConfigMapEnvSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConfigMapEnvSourceDie) DieFeedPtr(r *corev1.ConfigMapEnvSource) *ConfigMapEnvSourceDie {
	if r == nil {
		r = &corev1.ConfigMapEnvSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapEnvSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ConfigMapEnvSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.ConfigMapEnvSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ConfigMapEnvSourceDie) DieRelease() corev1.ConfigMapEnvSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConfigMapEnvSourceDie) DieReleasePtr() *corev1.ConfigMapEnvSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapEnvSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConfigMapEnvSourceDie) DieStamp(fn func(r *corev1.ConfigMapEnvSource)) *ConfigMapEnvSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConfigMapEnvSourceDie) DeepCopy() *ConfigMapEnvSourceDie {
	r := *d.r.DeepCopy()
	return &ConfigMapEnvSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The ConfigMap to select from.
func (d *ConfigMapEnvSourceDie) LocalObjectReference(v corev1.LocalObjectReference) *ConfigMapEnvSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapEnvSource) {
		r.LocalObjectReference = v
	})
}

// Specify whether the ConfigMap must be defined
func (d *ConfigMapEnvSourceDie) Optional(v *bool) *ConfigMapEnvSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapEnvSource) {
		r.Optional = v
	})
}

var SecretEnvSourceBlank = (&SecretEnvSourceDie{}).DieFeed(corev1.SecretEnvSource{})

type SecretEnvSourceDie struct {
	mutable bool
	r       corev1.SecretEnvSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SecretEnvSourceDie) DieImmutable(immutable bool) *SecretEnvSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SecretEnvSourceDie) DieFeed(r corev1.SecretEnvSource) *SecretEnvSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SecretEnvSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SecretEnvSourceDie) DieFeedPtr(r *corev1.SecretEnvSource) *SecretEnvSourceDie {
	if r == nil {
		r = &corev1.SecretEnvSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretEnvSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *SecretEnvSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.SecretEnvSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SecretEnvSourceDie) DieRelease() corev1.SecretEnvSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SecretEnvSourceDie) DieReleasePtr() *corev1.SecretEnvSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretEnvSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SecretEnvSourceDie) DieStamp(fn func(r *corev1.SecretEnvSource)) *SecretEnvSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SecretEnvSourceDie) DeepCopy() *SecretEnvSourceDie {
	r := *d.r.DeepCopy()
	return &SecretEnvSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The Secret to select from.
func (d *SecretEnvSourceDie) LocalObjectReference(v corev1.LocalObjectReference) *SecretEnvSourceDie {
	return d.DieStamp(func(r *corev1.SecretEnvSource) {
		r.LocalObjectReference = v
	})
}

// Specify whether the Secret must be defined
func (d *SecretEnvSourceDie) Optional(v *bool) *SecretEnvSourceDie {
	return d.DieStamp(func(r *corev1.SecretEnvSource) {
		r.Optional = v
	})
}

var EnvVarBlank = (&EnvVarDie{}).DieFeed(corev1.EnvVar{})

type EnvVarDie struct {
	mutable bool
	r       corev1.EnvVar
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EnvVarDie) DieImmutable(immutable bool) *EnvVarDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EnvVarDie) DieFeed(r corev1.EnvVar) *EnvVarDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EnvVarDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EnvVarDie) DieFeedPtr(r *corev1.EnvVar) *EnvVarDie {
	if r == nil {
		r = &corev1.EnvVar{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EnvVarDie) DieFeedRawExtension(raw runtime.RawExtension) *EnvVarDie {
	b, _ := json.Marshal(raw)
	r := corev1.EnvVar{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EnvVarDie) DieRelease() corev1.EnvVar {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EnvVarDie) DieReleasePtr() *corev1.EnvVar {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EnvVarDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EnvVarDie) DieStamp(fn func(r *corev1.EnvVar)) *EnvVarDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EnvVarDie) DeepCopy() *EnvVarDie {
	r := *d.r.DeepCopy()
	return &EnvVarDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (d *EnvVarDie) Name(v string) *EnvVarDie {
	return d.DieStamp(func(r *corev1.EnvVar) {
		r.Name = v
	})
}

// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (d *EnvVarDie) Value(v string) *EnvVarDie {
	return d.DieStamp(func(r *corev1.EnvVar) {
		r.Value = v
	})
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (d *EnvVarDie) ValueFrom(v *corev1.EnvVarSource) *EnvVarDie {
	return d.DieStamp(func(r *corev1.EnvVar) {
		r.ValueFrom = v
	})
}

var EnvVarSourceBlank = (&EnvVarSourceDie{}).DieFeed(corev1.EnvVarSource{})

type EnvVarSourceDie struct {
	mutable bool
	r       corev1.EnvVarSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EnvVarSourceDie) DieImmutable(immutable bool) *EnvVarSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EnvVarSourceDie) DieFeed(r corev1.EnvVarSource) *EnvVarSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EnvVarSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EnvVarSourceDie) DieFeedPtr(r *corev1.EnvVarSource) *EnvVarSourceDie {
	if r == nil {
		r = &corev1.EnvVarSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EnvVarSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *EnvVarSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.EnvVarSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EnvVarSourceDie) DieRelease() corev1.EnvVarSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EnvVarSourceDie) DieReleasePtr() *corev1.EnvVarSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EnvVarSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EnvVarSourceDie) DieStamp(fn func(r *corev1.EnvVarSource)) *EnvVarSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EnvVarSourceDie) DeepCopy() *EnvVarSourceDie {
	r := *d.r.DeepCopy()
	return &EnvVarSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (d *EnvVarSourceDie) FieldRef(v *corev1.ObjectFieldSelector) *EnvVarSourceDie {
	return d.DieStamp(func(r *corev1.EnvVarSource) {
		r.FieldRef = v
	})
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (d *EnvVarSourceDie) ResourceFieldRef(v *corev1.ResourceFieldSelector) *EnvVarSourceDie {
	return d.DieStamp(func(r *corev1.EnvVarSource) {
		r.ResourceFieldRef = v
	})
}

// Selects a key of a ConfigMap.
func (d *EnvVarSourceDie) ConfigMapKeyRef(v *corev1.ConfigMapKeySelector) *EnvVarSourceDie {
	return d.DieStamp(func(r *corev1.EnvVarSource) {
		r.ConfigMapKeyRef = v
	})
}

// Selects a key of a secret in the pod's namespace
func (d *EnvVarSourceDie) SecretKeyRef(v *corev1.SecretKeySelector) *EnvVarSourceDie {
	return d.DieStamp(func(r *corev1.EnvVarSource) {
		r.SecretKeyRef = v
	})
}

var ObjectFieldSelectorBlank = (&ObjectFieldSelectorDie{}).DieFeed(corev1.ObjectFieldSelector{})

type ObjectFieldSelectorDie struct {
	mutable bool
	r       corev1.ObjectFieldSelector
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ObjectFieldSelectorDie) DieImmutable(immutable bool) *ObjectFieldSelectorDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ObjectFieldSelectorDie) DieFeed(r corev1.ObjectFieldSelector) *ObjectFieldSelectorDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ObjectFieldSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ObjectFieldSelectorDie) DieFeedPtr(r *corev1.ObjectFieldSelector) *ObjectFieldSelectorDie {
	if r == nil {
		r = &corev1.ObjectFieldSelector{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ObjectFieldSelectorDie) DieFeedRawExtension(raw runtime.RawExtension) *ObjectFieldSelectorDie {
	b, _ := json.Marshal(raw)
	r := corev1.ObjectFieldSelector{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ObjectFieldSelectorDie) DieRelease() corev1.ObjectFieldSelector {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ObjectFieldSelectorDie) DieReleasePtr() *corev1.ObjectFieldSelector {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ObjectFieldSelectorDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ObjectFieldSelectorDie) DieStamp(fn func(r *corev1.ObjectFieldSelector)) *ObjectFieldSelectorDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ObjectFieldSelectorDie) DeepCopy() *ObjectFieldSelectorDie {
	r := *d.r.DeepCopy()
	return &ObjectFieldSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (d *ObjectFieldSelectorDie) APIVersion(v string) *ObjectFieldSelectorDie {
	return d.DieStamp(func(r *corev1.ObjectFieldSelector) {
		r.APIVersion = v
	})
}

// Path of the field to select in the specified API version.
func (d *ObjectFieldSelectorDie) FieldPath(v string) *ObjectFieldSelectorDie {
	return d.DieStamp(func(r *corev1.ObjectFieldSelector) {
		r.FieldPath = v
	})
}

var ResourceFieldSelectorBlank = (&ResourceFieldSelectorDie{}).DieFeed(corev1.ResourceFieldSelector{})

type ResourceFieldSelectorDie struct {
	mutable bool
	r       corev1.ResourceFieldSelector
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourceFieldSelectorDie) DieImmutable(immutable bool) *ResourceFieldSelectorDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourceFieldSelectorDie) DieFeed(r corev1.ResourceFieldSelector) *ResourceFieldSelectorDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceFieldSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourceFieldSelectorDie) DieFeedPtr(r *corev1.ResourceFieldSelector) *ResourceFieldSelectorDie {
	if r == nil {
		r = &corev1.ResourceFieldSelector{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceFieldSelectorDie) DieFeedRawExtension(raw runtime.RawExtension) *ResourceFieldSelectorDie {
	b, _ := json.Marshal(raw)
	r := corev1.ResourceFieldSelector{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ResourceFieldSelectorDie) DieRelease() corev1.ResourceFieldSelector {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourceFieldSelectorDie) DieReleasePtr() *corev1.ResourceFieldSelector {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceFieldSelectorDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourceFieldSelectorDie) DieStamp(fn func(r *corev1.ResourceFieldSelector)) *ResourceFieldSelectorDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourceFieldSelectorDie) DeepCopy() *ResourceFieldSelectorDie {
	r := *d.r.DeepCopy()
	return &ResourceFieldSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Container name: required for volumes, optional for env vars
func (d *ResourceFieldSelectorDie) ContainerName(v string) *ResourceFieldSelectorDie {
	return d.DieStamp(func(r *corev1.ResourceFieldSelector) {
		r.ContainerName = v
	})
}

// Required: resource to select
func (d *ResourceFieldSelectorDie) Resource(v string) *ResourceFieldSelectorDie {
	return d.DieStamp(func(r *corev1.ResourceFieldSelector) {
		r.Resource = v
	})
}

// Specifies the output format of the exposed resources, defaults to "1"
func (d *ResourceFieldSelectorDie) Divisor(v resource.Quantity) *ResourceFieldSelectorDie {
	return d.DieStamp(func(r *corev1.ResourceFieldSelector) {
		r.Divisor = v
	})
}

var ConfigMapKeySelectorBlank = (&ConfigMapKeySelectorDie{}).DieFeed(corev1.ConfigMapKeySelector{})

type ConfigMapKeySelectorDie struct {
	mutable bool
	r       corev1.ConfigMapKeySelector
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConfigMapKeySelectorDie) DieImmutable(immutable bool) *ConfigMapKeySelectorDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConfigMapKeySelectorDie) DieFeed(r corev1.ConfigMapKeySelector) *ConfigMapKeySelectorDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ConfigMapKeySelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConfigMapKeySelectorDie) DieFeedPtr(r *corev1.ConfigMapKeySelector) *ConfigMapKeySelectorDie {
	if r == nil {
		r = &corev1.ConfigMapKeySelector{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapKeySelectorDie) DieFeedRawExtension(raw runtime.RawExtension) *ConfigMapKeySelectorDie {
	b, _ := json.Marshal(raw)
	r := corev1.ConfigMapKeySelector{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ConfigMapKeySelectorDie) DieRelease() corev1.ConfigMapKeySelector {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConfigMapKeySelectorDie) DieReleasePtr() *corev1.ConfigMapKeySelector {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapKeySelectorDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConfigMapKeySelectorDie) DieStamp(fn func(r *corev1.ConfigMapKeySelector)) *ConfigMapKeySelectorDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConfigMapKeySelectorDie) DeepCopy() *ConfigMapKeySelectorDie {
	r := *d.r.DeepCopy()
	return &ConfigMapKeySelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The ConfigMap to select from.
func (d *ConfigMapKeySelectorDie) LocalObjectReference(v corev1.LocalObjectReference) *ConfigMapKeySelectorDie {
	return d.DieStamp(func(r *corev1.ConfigMapKeySelector) {
		r.LocalObjectReference = v
	})
}

// The key to select.
func (d *ConfigMapKeySelectorDie) Key(v string) *ConfigMapKeySelectorDie {
	return d.DieStamp(func(r *corev1.ConfigMapKeySelector) {
		r.Key = v
	})
}

// Specify whether the ConfigMap or its key must be defined
func (d *ConfigMapKeySelectorDie) Optional(v *bool) *ConfigMapKeySelectorDie {
	return d.DieStamp(func(r *corev1.ConfigMapKeySelector) {
		r.Optional = v
	})
}

var SecretKeySelectorBlank = (&SecretKeySelectorDie{}).DieFeed(corev1.SecretKeySelector{})

type SecretKeySelectorDie struct {
	mutable bool
	r       corev1.SecretKeySelector
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SecretKeySelectorDie) DieImmutable(immutable bool) *SecretKeySelectorDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SecretKeySelectorDie) DieFeed(r corev1.SecretKeySelector) *SecretKeySelectorDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SecretKeySelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SecretKeySelectorDie) DieFeedPtr(r *corev1.SecretKeySelector) *SecretKeySelectorDie {
	if r == nil {
		r = &corev1.SecretKeySelector{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretKeySelectorDie) DieFeedRawExtension(raw runtime.RawExtension) *SecretKeySelectorDie {
	b, _ := json.Marshal(raw)
	r := corev1.SecretKeySelector{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SecretKeySelectorDie) DieRelease() corev1.SecretKeySelector {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SecretKeySelectorDie) DieReleasePtr() *corev1.SecretKeySelector {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretKeySelectorDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SecretKeySelectorDie) DieStamp(fn func(r *corev1.SecretKeySelector)) *SecretKeySelectorDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SecretKeySelectorDie) DeepCopy() *SecretKeySelectorDie {
	r := *d.r.DeepCopy()
	return &SecretKeySelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The name of the secret in the pod's namespace to select from.
func (d *SecretKeySelectorDie) LocalObjectReference(v corev1.LocalObjectReference) *SecretKeySelectorDie {
	return d.DieStamp(func(r *corev1.SecretKeySelector) {
		r.LocalObjectReference = v
	})
}

// The key of the secret to select from.  Must be a valid secret key.
func (d *SecretKeySelectorDie) Key(v string) *SecretKeySelectorDie {
	return d.DieStamp(func(r *corev1.SecretKeySelector) {
		r.Key = v
	})
}

// Specify whether the Secret or its key must be defined
func (d *SecretKeySelectorDie) Optional(v *bool) *SecretKeySelectorDie {
	return d.DieStamp(func(r *corev1.SecretKeySelector) {
		r.Optional = v
	})
}

var ResourceRequirementsBlank = (&ResourceRequirementsDie{}).DieFeed(corev1.ResourceRequirements{})

type ResourceRequirementsDie struct {
	mutable bool
	r       corev1.ResourceRequirements
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourceRequirementsDie) DieImmutable(immutable bool) *ResourceRequirementsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourceRequirementsDie) DieFeed(r corev1.ResourceRequirements) *ResourceRequirementsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceRequirementsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourceRequirementsDie) DieFeedPtr(r *corev1.ResourceRequirements) *ResourceRequirementsDie {
	if r == nil {
		r = &corev1.ResourceRequirements{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceRequirementsDie) DieFeedRawExtension(raw runtime.RawExtension) *ResourceRequirementsDie {
	b, _ := json.Marshal(raw)
	r := corev1.ResourceRequirements{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ResourceRequirementsDie) DieRelease() corev1.ResourceRequirements {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourceRequirementsDie) DieReleasePtr() *corev1.ResourceRequirements {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceRequirementsDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourceRequirementsDie) DieStamp(fn func(r *corev1.ResourceRequirements)) *ResourceRequirementsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourceRequirementsDie) DeepCopy() *ResourceRequirementsDie {
	r := *d.r.DeepCopy()
	return &ResourceRequirementsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (d *ResourceRequirementsDie) Limits(v corev1.ResourceList) *ResourceRequirementsDie {
	return d.DieStamp(func(r *corev1.ResourceRequirements) {
		r.Limits = v
	})
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (d *ResourceRequirementsDie) Requests(v corev1.ResourceList) *ResourceRequirementsDie {
	return d.DieStamp(func(r *corev1.ResourceRequirements) {
		r.Requests = v
	})
}

var VolumeMountBlank = (&VolumeMountDie{}).DieFeed(corev1.VolumeMount{})

type VolumeMountDie struct {
	mutable bool
	r       corev1.VolumeMount
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeMountDie) DieImmutable(immutable bool) *VolumeMountDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeMountDie) DieFeed(r corev1.VolumeMount) *VolumeMountDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeMountDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeMountDie) DieFeedPtr(r *corev1.VolumeMount) *VolumeMountDie {
	if r == nil {
		r = &corev1.VolumeMount{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeMountDie) DieFeedRawExtension(raw runtime.RawExtension) *VolumeMountDie {
	b, _ := json.Marshal(raw)
	r := corev1.VolumeMount{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeMountDie) DieRelease() corev1.VolumeMount {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeMountDie) DieReleasePtr() *corev1.VolumeMount {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeMountDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeMountDie) DieStamp(fn func(r *corev1.VolumeMount)) *VolumeMountDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeMountDie) DeepCopy() *VolumeMountDie {
	r := *d.r.DeepCopy()
	return &VolumeMountDie{
		mutable: d.mutable,
		r:       r,
	}
}

// This must match the Name of a Volume.
func (d *VolumeMountDie) Name(v string) *VolumeMountDie {
	return d.DieStamp(func(r *corev1.VolumeMount) {
		r.Name = v
	})
}

// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
func (d *VolumeMountDie) ReadOnly(v bool) *VolumeMountDie {
	return d.DieStamp(func(r *corev1.VolumeMount) {
		r.ReadOnly = v
	})
}

// Path within the container at which the volume should be mounted.  Must not contain ':'.
func (d *VolumeMountDie) MountPath(v string) *VolumeMountDie {
	return d.DieStamp(func(r *corev1.VolumeMount) {
		r.MountPath = v
	})
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (d *VolumeMountDie) SubPath(v string) *VolumeMountDie {
	return d.DieStamp(func(r *corev1.VolumeMount) {
		r.SubPath = v
	})
}

// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
func (d *VolumeMountDie) MountPropagation(v *corev1.MountPropagationMode) *VolumeMountDie {
	return d.DieStamp(func(r *corev1.VolumeMount) {
		r.MountPropagation = v
	})
}

// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
func (d *VolumeMountDie) SubPathExpr(v string) *VolumeMountDie {
	return d.DieStamp(func(r *corev1.VolumeMount) {
		r.SubPathExpr = v
	})
}

var VolumeDeviceBlank = (&VolumeDeviceDie{}).DieFeed(corev1.VolumeDevice{})

type VolumeDeviceDie struct {
	mutable bool
	r       corev1.VolumeDevice
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeDeviceDie) DieImmutable(immutable bool) *VolumeDeviceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeDeviceDie) DieFeed(r corev1.VolumeDevice) *VolumeDeviceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeDeviceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeDeviceDie) DieFeedPtr(r *corev1.VolumeDevice) *VolumeDeviceDie {
	if r == nil {
		r = &corev1.VolumeDevice{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeDeviceDie) DieFeedRawExtension(raw runtime.RawExtension) *VolumeDeviceDie {
	b, _ := json.Marshal(raw)
	r := corev1.VolumeDevice{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeDeviceDie) DieRelease() corev1.VolumeDevice {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeDeviceDie) DieReleasePtr() *corev1.VolumeDevice {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeDeviceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeDeviceDie) DieStamp(fn func(r *corev1.VolumeDevice)) *VolumeDeviceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeDeviceDie) DeepCopy() *VolumeDeviceDie {
	r := *d.r.DeepCopy()
	return &VolumeDeviceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name must match the name of a persistentVolumeClaim in the pod
func (d *VolumeDeviceDie) Name(v string) *VolumeDeviceDie {
	return d.DieStamp(func(r *corev1.VolumeDevice) {
		r.Name = v
	})
}

// devicePath is the path inside of the container that the device will be mapped to.
func (d *VolumeDeviceDie) DevicePath(v string) *VolumeDeviceDie {
	return d.DieStamp(func(r *corev1.VolumeDevice) {
		r.DevicePath = v
	})
}

var ProbeBlank = (&ProbeDie{}).DieFeed(corev1.Probe{})

type ProbeDie struct {
	mutable bool
	r       corev1.Probe
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ProbeDie) DieImmutable(immutable bool) *ProbeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ProbeDie) DieFeed(r corev1.Probe) *ProbeDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ProbeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ProbeDie) DieFeedPtr(r *corev1.Probe) *ProbeDie {
	if r == nil {
		r = &corev1.Probe{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ProbeDie) DieFeedRawExtension(raw runtime.RawExtension) *ProbeDie {
	b, _ := json.Marshal(raw)
	r := corev1.Probe{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ProbeDie) DieRelease() corev1.Probe {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ProbeDie) DieReleasePtr() *corev1.Probe {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ProbeDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ProbeDie) DieStamp(fn func(r *corev1.Probe)) *ProbeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ProbeDie) DeepCopy() *ProbeDie {
	r := *d.r.DeepCopy()
	return &ProbeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The action taken to determine the health of a container
func (d *ProbeDie) ProbeHandler(v corev1.ProbeHandler) *ProbeDie {
	return d.DieStamp(func(r *corev1.Probe) {
		r.ProbeHandler = v
	})
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (d *ProbeDie) InitialDelaySeconds(v int32) *ProbeDie {
	return d.DieStamp(func(r *corev1.Probe) {
		r.InitialDelaySeconds = v
	})
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (d *ProbeDie) TimeoutSeconds(v int32) *ProbeDie {
	return d.DieStamp(func(r *corev1.Probe) {
		r.TimeoutSeconds = v
	})
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (d *ProbeDie) PeriodSeconds(v int32) *ProbeDie {
	return d.DieStamp(func(r *corev1.Probe) {
		r.PeriodSeconds = v
	})
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (d *ProbeDie) SuccessThreshold(v int32) *ProbeDie {
	return d.DieStamp(func(r *corev1.Probe) {
		r.SuccessThreshold = v
	})
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (d *ProbeDie) FailureThreshold(v int32) *ProbeDie {
	return d.DieStamp(func(r *corev1.Probe) {
		r.FailureThreshold = v
	})
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (d *ProbeDie) TerminationGracePeriodSeconds(v *int64) *ProbeDie {
	return d.DieStamp(func(r *corev1.Probe) {
		r.TerminationGracePeriodSeconds = v
	})
}

var LifecycleBlank = (&LifecycleDie{}).DieFeed(corev1.Lifecycle{})

type LifecycleDie struct {
	mutable bool
	r       corev1.Lifecycle
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LifecycleDie) DieImmutable(immutable bool) *LifecycleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LifecycleDie) DieFeed(r corev1.Lifecycle) *LifecycleDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LifecycleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LifecycleDie) DieFeedPtr(r *corev1.Lifecycle) *LifecycleDie {
	if r == nil {
		r = &corev1.Lifecycle{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *LifecycleDie) DieFeedRawExtension(raw runtime.RawExtension) *LifecycleDie {
	b, _ := json.Marshal(raw)
	r := corev1.Lifecycle{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *LifecycleDie) DieRelease() corev1.Lifecycle {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LifecycleDie) DieReleasePtr() *corev1.Lifecycle {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *LifecycleDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LifecycleDie) DieStamp(fn func(r *corev1.Lifecycle)) *LifecycleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LifecycleDie) DeepCopy() *LifecycleDie {
	r := *d.r.DeepCopy()
	return &LifecycleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (d *LifecycleDie) PostStart(v *corev1.LifecycleHandler) *LifecycleDie {
	return d.DieStamp(func(r *corev1.Lifecycle) {
		r.PostStart = v
	})
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (d *LifecycleDie) PreStop(v *corev1.LifecycleHandler) *LifecycleDie {
	return d.DieStamp(func(r *corev1.Lifecycle) {
		r.PreStop = v
	})
}

var LifecycleHandlerBlank = (&LifecycleHandlerDie{}).DieFeed(corev1.LifecycleHandler{})

type LifecycleHandlerDie struct {
	mutable bool
	r       corev1.LifecycleHandler
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LifecycleHandlerDie) DieImmutable(immutable bool) *LifecycleHandlerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LifecycleHandlerDie) DieFeed(r corev1.LifecycleHandler) *LifecycleHandlerDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LifecycleHandlerDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LifecycleHandlerDie) DieFeedPtr(r *corev1.LifecycleHandler) *LifecycleHandlerDie {
	if r == nil {
		r = &corev1.LifecycleHandler{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *LifecycleHandlerDie) DieFeedRawExtension(raw runtime.RawExtension) *LifecycleHandlerDie {
	b, _ := json.Marshal(raw)
	r := corev1.LifecycleHandler{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *LifecycleHandlerDie) DieRelease() corev1.LifecycleHandler {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LifecycleHandlerDie) DieReleasePtr() *corev1.LifecycleHandler {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *LifecycleHandlerDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LifecycleHandlerDie) DieStamp(fn func(r *corev1.LifecycleHandler)) *LifecycleHandlerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LifecycleHandlerDie) DeepCopy() *LifecycleHandlerDie {
	r := *d.r.DeepCopy()
	return &LifecycleHandlerDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Exec specifies the action to take.
func (d *LifecycleHandlerDie) Exec(v *corev1.ExecAction) *LifecycleHandlerDie {
	return d.DieStamp(func(r *corev1.LifecycleHandler) {
		r.Exec = v
	})
}

// HTTPGet specifies the http request to perform.
func (d *LifecycleHandlerDie) HTTPGet(v *corev1.HTTPGetAction) *LifecycleHandlerDie {
	return d.DieStamp(func(r *corev1.LifecycleHandler) {
		r.HTTPGet = v
	})
}

// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
func (d *LifecycleHandlerDie) TCPSocket(v *corev1.TCPSocketAction) *LifecycleHandlerDie {
	return d.DieStamp(func(r *corev1.LifecycleHandler) {
		r.TCPSocket = v
	})
}

var ProbeHandlerBlank = (&ProbeHandlerDie{}).DieFeed(corev1.ProbeHandler{})

type ProbeHandlerDie struct {
	mutable bool
	r       corev1.ProbeHandler
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ProbeHandlerDie) DieImmutable(immutable bool) *ProbeHandlerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ProbeHandlerDie) DieFeed(r corev1.ProbeHandler) *ProbeHandlerDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ProbeHandlerDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ProbeHandlerDie) DieFeedPtr(r *corev1.ProbeHandler) *ProbeHandlerDie {
	if r == nil {
		r = &corev1.ProbeHandler{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ProbeHandlerDie) DieFeedRawExtension(raw runtime.RawExtension) *ProbeHandlerDie {
	b, _ := json.Marshal(raw)
	r := corev1.ProbeHandler{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ProbeHandlerDie) DieRelease() corev1.ProbeHandler {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ProbeHandlerDie) DieReleasePtr() *corev1.ProbeHandler {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ProbeHandlerDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ProbeHandlerDie) DieStamp(fn func(r *corev1.ProbeHandler)) *ProbeHandlerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ProbeHandlerDie) DeepCopy() *ProbeHandlerDie {
	r := *d.r.DeepCopy()
	return &ProbeHandlerDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Exec specifies the action to take.
func (d *ProbeHandlerDie) Exec(v *corev1.ExecAction) *ProbeHandlerDie {
	return d.DieStamp(func(r *corev1.ProbeHandler) {
		r.Exec = v
	})
}

// HTTPGet specifies the http request to perform.
func (d *ProbeHandlerDie) HTTPGet(v *corev1.HTTPGetAction) *ProbeHandlerDie {
	return d.DieStamp(func(r *corev1.ProbeHandler) {
		r.HTTPGet = v
	})
}

// TCPSocket specifies an action involving a TCP port.
func (d *ProbeHandlerDie) TCPSocket(v *corev1.TCPSocketAction) *ProbeHandlerDie {
	return d.DieStamp(func(r *corev1.ProbeHandler) {
		r.TCPSocket = v
	})
}

// GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
func (d *ProbeHandlerDie) GRPC(v *corev1.GRPCAction) *ProbeHandlerDie {
	return d.DieStamp(func(r *corev1.ProbeHandler) {
		r.GRPC = v
	})
}

var ExecActionBlank = (&ExecActionDie{}).DieFeed(corev1.ExecAction{})

type ExecActionDie struct {
	mutable bool
	r       corev1.ExecAction
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ExecActionDie) DieImmutable(immutable bool) *ExecActionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ExecActionDie) DieFeed(r corev1.ExecAction) *ExecActionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ExecActionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ExecActionDie) DieFeedPtr(r *corev1.ExecAction) *ExecActionDie {
	if r == nil {
		r = &corev1.ExecAction{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ExecActionDie) DieFeedRawExtension(raw runtime.RawExtension) *ExecActionDie {
	b, _ := json.Marshal(raw)
	r := corev1.ExecAction{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ExecActionDie) DieRelease() corev1.ExecAction {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ExecActionDie) DieReleasePtr() *corev1.ExecAction {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ExecActionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ExecActionDie) DieStamp(fn func(r *corev1.ExecAction)) *ExecActionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ExecActionDie) DeepCopy() *ExecActionDie {
	r := *d.r.DeepCopy()
	return &ExecActionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (d *ExecActionDie) Command(v ...string) *ExecActionDie {
	return d.DieStamp(func(r *corev1.ExecAction) {
		r.Command = v
	})
}

var HTTPGetActionBlank = (&HTTPGetActionDie{}).DieFeed(corev1.HTTPGetAction{})

type HTTPGetActionDie struct {
	mutable bool
	r       corev1.HTTPGetAction
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HTTPGetActionDie) DieImmutable(immutable bool) *HTTPGetActionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HTTPGetActionDie) DieFeed(r corev1.HTTPGetAction) *HTTPGetActionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HTTPGetActionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HTTPGetActionDie) DieFeedPtr(r *corev1.HTTPGetAction) *HTTPGetActionDie {
	if r == nil {
		r = &corev1.HTTPGetAction{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *HTTPGetActionDie) DieFeedRawExtension(raw runtime.RawExtension) *HTTPGetActionDie {
	b, _ := json.Marshal(raw)
	r := corev1.HTTPGetAction{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *HTTPGetActionDie) DieRelease() corev1.HTTPGetAction {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HTTPGetActionDie) DieReleasePtr() *corev1.HTTPGetAction {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *HTTPGetActionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HTTPGetActionDie) DieStamp(fn func(r *corev1.HTTPGetAction)) *HTTPGetActionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HTTPGetActionDie) DeepCopy() *HTTPGetActionDie {
	r := *d.r.DeepCopy()
	return &HTTPGetActionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Path to access on the HTTP server.
func (d *HTTPGetActionDie) Path(v string) *HTTPGetActionDie {
	return d.DieStamp(func(r *corev1.HTTPGetAction) {
		r.Path = v
	})
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (d *HTTPGetActionDie) Port(v intstr.IntOrString) *HTTPGetActionDie {
	return d.DieStamp(func(r *corev1.HTTPGetAction) {
		r.Port = v
	})
}

func (d *HTTPGetActionDie) PortInt(i int) *HTTPGetActionDie {
	return d.DieStamp(func(r *corev1.HTTPGetAction) {
		v := intstr.FromInt(i)
		r.Port = v
	})
}

func (d *HTTPGetActionDie) PortString(s string) *HTTPGetActionDie {
	return d.DieStamp(func(r *corev1.HTTPGetAction) {
		v := intstr.FromString(s)
		r.Port = v
	})
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (d *HTTPGetActionDie) Host(v string) *HTTPGetActionDie {
	return d.DieStamp(func(r *corev1.HTTPGetAction) {
		r.Host = v
	})
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (d *HTTPGetActionDie) Scheme(v corev1.URIScheme) *HTTPGetActionDie {
	return d.DieStamp(func(r *corev1.HTTPGetAction) {
		r.Scheme = v
	})
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (d *HTTPGetActionDie) HTTPHeaders(v ...corev1.HTTPHeader) *HTTPGetActionDie {
	return d.DieStamp(func(r *corev1.HTTPGetAction) {
		r.HTTPHeaders = v
	})
}

var HTTPHeaderBlank = (&HTTPHeaderDie{}).DieFeed(corev1.HTTPHeader{})

type HTTPHeaderDie struct {
	mutable bool
	r       corev1.HTTPHeader
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HTTPHeaderDie) DieImmutable(immutable bool) *HTTPHeaderDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HTTPHeaderDie) DieFeed(r corev1.HTTPHeader) *HTTPHeaderDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HTTPHeaderDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HTTPHeaderDie) DieFeedPtr(r *corev1.HTTPHeader) *HTTPHeaderDie {
	if r == nil {
		r = &corev1.HTTPHeader{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *HTTPHeaderDie) DieFeedRawExtension(raw runtime.RawExtension) *HTTPHeaderDie {
	b, _ := json.Marshal(raw)
	r := corev1.HTTPHeader{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *HTTPHeaderDie) DieRelease() corev1.HTTPHeader {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HTTPHeaderDie) DieReleasePtr() *corev1.HTTPHeader {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *HTTPHeaderDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HTTPHeaderDie) DieStamp(fn func(r *corev1.HTTPHeader)) *HTTPHeaderDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HTTPHeaderDie) DeepCopy() *HTTPHeaderDie {
	r := *d.r.DeepCopy()
	return &HTTPHeaderDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The header field name
func (d *HTTPHeaderDie) Name(v string) *HTTPHeaderDie {
	return d.DieStamp(func(r *corev1.HTTPHeader) {
		r.Name = v
	})
}

// The header field value
func (d *HTTPHeaderDie) Value(v string) *HTTPHeaderDie {
	return d.DieStamp(func(r *corev1.HTTPHeader) {
		r.Value = v
	})
}

var TCPSocketActionBlank = (&TCPSocketActionDie{}).DieFeed(corev1.TCPSocketAction{})

type TCPSocketActionDie struct {
	mutable bool
	r       corev1.TCPSocketAction
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *TCPSocketActionDie) DieImmutable(immutable bool) *TCPSocketActionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *TCPSocketActionDie) DieFeed(r corev1.TCPSocketAction) *TCPSocketActionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &TCPSocketActionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *TCPSocketActionDie) DieFeedPtr(r *corev1.TCPSocketAction) *TCPSocketActionDie {
	if r == nil {
		r = &corev1.TCPSocketAction{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *TCPSocketActionDie) DieFeedRawExtension(raw runtime.RawExtension) *TCPSocketActionDie {
	b, _ := json.Marshal(raw)
	r := corev1.TCPSocketAction{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *TCPSocketActionDie) DieRelease() corev1.TCPSocketAction {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *TCPSocketActionDie) DieReleasePtr() *corev1.TCPSocketAction {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *TCPSocketActionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *TCPSocketActionDie) DieStamp(fn func(r *corev1.TCPSocketAction)) *TCPSocketActionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *TCPSocketActionDie) DeepCopy() *TCPSocketActionDie {
	r := *d.r.DeepCopy()
	return &TCPSocketActionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (d *TCPSocketActionDie) Port(v intstr.IntOrString) *TCPSocketActionDie {
	return d.DieStamp(func(r *corev1.TCPSocketAction) {
		r.Port = v
	})
}

func (d *TCPSocketActionDie) PortInt(i int) *TCPSocketActionDie {
	return d.DieStamp(func(r *corev1.TCPSocketAction) {
		v := intstr.FromInt(i)
		r.Port = v
	})
}

func (d *TCPSocketActionDie) PortString(s string) *TCPSocketActionDie {
	return d.DieStamp(func(r *corev1.TCPSocketAction) {
		v := intstr.FromString(s)
		r.Port = v
	})
}

// Optional: Host name to connect to, defaults to the pod IP.
func (d *TCPSocketActionDie) Host(v string) *TCPSocketActionDie {
	return d.DieStamp(func(r *corev1.TCPSocketAction) {
		r.Host = v
	})
}

var GRPCActionBlank = (&GRPCActionDie{}).DieFeed(corev1.GRPCAction{})

type GRPCActionDie struct {
	mutable bool
	r       corev1.GRPCAction
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GRPCActionDie) DieImmutable(immutable bool) *GRPCActionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GRPCActionDie) DieFeed(r corev1.GRPCAction) *GRPCActionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GRPCActionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GRPCActionDie) DieFeedPtr(r *corev1.GRPCAction) *GRPCActionDie {
	if r == nil {
		r = &corev1.GRPCAction{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *GRPCActionDie) DieFeedRawExtension(raw runtime.RawExtension) *GRPCActionDie {
	b, _ := json.Marshal(raw)
	r := corev1.GRPCAction{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *GRPCActionDie) DieRelease() corev1.GRPCAction {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GRPCActionDie) DieReleasePtr() *corev1.GRPCAction {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *GRPCActionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GRPCActionDie) DieStamp(fn func(r *corev1.GRPCAction)) *GRPCActionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GRPCActionDie) DeepCopy() *GRPCActionDie {
	r := *d.r.DeepCopy()
	return &GRPCActionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (d *GRPCActionDie) Port(v int32) *GRPCActionDie {
	return d.DieStamp(func(r *corev1.GRPCAction) {
		r.Port = v
	})
}

// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (d *GRPCActionDie) Service(v *string) *GRPCActionDie {
	return d.DieStamp(func(r *corev1.GRPCAction) {
		r.Service = v
	})
}

var SecurityContextBlank = (&SecurityContextDie{}).DieFeed(corev1.SecurityContext{})

type SecurityContextDie struct {
	mutable bool
	r       corev1.SecurityContext
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SecurityContextDie) DieImmutable(immutable bool) *SecurityContextDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SecurityContextDie) DieFeed(r corev1.SecurityContext) *SecurityContextDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SecurityContextDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SecurityContextDie) DieFeedPtr(r *corev1.SecurityContext) *SecurityContextDie {
	if r == nil {
		r = &corev1.SecurityContext{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SecurityContextDie) DieFeedRawExtension(raw runtime.RawExtension) *SecurityContextDie {
	b, _ := json.Marshal(raw)
	r := corev1.SecurityContext{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SecurityContextDie) DieRelease() corev1.SecurityContext {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SecurityContextDie) DieReleasePtr() *corev1.SecurityContext {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SecurityContextDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SecurityContextDie) DieStamp(fn func(r *corev1.SecurityContext)) *SecurityContextDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SecurityContextDie) DeepCopy() *SecurityContextDie {
	r := *d.r.DeepCopy()
	return &SecurityContextDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
func (d *SecurityContextDie) Capabilities(v *corev1.Capabilities) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.Capabilities = v
	})
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
func (d *SecurityContextDie) Privileged(v *bool) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.Privileged = v
	})
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (d *SecurityContextDie) SELinuxOptions(v *corev1.SELinuxOptions) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.SELinuxOptions = v
	})
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (d *SecurityContextDie) WindowsOptions(v *corev1.WindowsSecurityContextOptions) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.WindowsOptions = v
	})
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (d *SecurityContextDie) RunAsUser(v *int64) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.RunAsUser = v
	})
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (d *SecurityContextDie) RunAsGroup(v *int64) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.RunAsGroup = v
	})
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (d *SecurityContextDie) RunAsNonRoot(v *bool) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.RunAsNonRoot = v
	})
}

// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
func (d *SecurityContextDie) ReadOnlyRootFilesystem(v *bool) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.ReadOnlyRootFilesystem = v
	})
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
func (d *SecurityContextDie) AllowPrivilegeEscalation(v *bool) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.AllowPrivilegeEscalation = v
	})
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
func (d *SecurityContextDie) ProcMount(v *corev1.ProcMountType) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.ProcMount = v
	})
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
func (d *SecurityContextDie) SeccompProfile(v *corev1.SeccompProfile) *SecurityContextDie {
	return d.DieStamp(func(r *corev1.SecurityContext) {
		r.SeccompProfile = v
	})
}

var CapabilitiesBlank = (&CapabilitiesDie{}).DieFeed(corev1.Capabilities{})

type CapabilitiesDie struct {
	mutable bool
	r       corev1.Capabilities
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CapabilitiesDie) DieImmutable(immutable bool) *CapabilitiesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CapabilitiesDie) DieFeed(r corev1.Capabilities) *CapabilitiesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CapabilitiesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CapabilitiesDie) DieFeedPtr(r *corev1.Capabilities) *CapabilitiesDie {
	if r == nil {
		r = &corev1.Capabilities{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *CapabilitiesDie) DieFeedRawExtension(raw runtime.RawExtension) *CapabilitiesDie {
	b, _ := json.Marshal(raw)
	r := corev1.Capabilities{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *CapabilitiesDie) DieRelease() corev1.Capabilities {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CapabilitiesDie) DieReleasePtr() *corev1.Capabilities {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *CapabilitiesDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CapabilitiesDie) DieStamp(fn func(r *corev1.Capabilities)) *CapabilitiesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CapabilitiesDie) DeepCopy() *CapabilitiesDie {
	r := *d.r.DeepCopy()
	return &CapabilitiesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Added capabilities
func (d *CapabilitiesDie) Add(v ...corev1.Capability) *CapabilitiesDie {
	return d.DieStamp(func(r *corev1.Capabilities) {
		r.Add = v
	})
}

// Removed capabilities
func (d *CapabilitiesDie) Drop(v ...corev1.Capability) *CapabilitiesDie {
	return d.DieStamp(func(r *corev1.Capabilities) {
		r.Drop = v
	})
}

var SELinuxOptionsBlank = (&SELinuxOptionsDie{}).DieFeed(corev1.SELinuxOptions{})

type SELinuxOptionsDie struct {
	mutable bool
	r       corev1.SELinuxOptions
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SELinuxOptionsDie) DieImmutable(immutable bool) *SELinuxOptionsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SELinuxOptionsDie) DieFeed(r corev1.SELinuxOptions) *SELinuxOptionsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SELinuxOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SELinuxOptionsDie) DieFeedPtr(r *corev1.SELinuxOptions) *SELinuxOptionsDie {
	if r == nil {
		r = &corev1.SELinuxOptions{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SELinuxOptionsDie) DieFeedRawExtension(raw runtime.RawExtension) *SELinuxOptionsDie {
	b, _ := json.Marshal(raw)
	r := corev1.SELinuxOptions{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SELinuxOptionsDie) DieRelease() corev1.SELinuxOptions {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SELinuxOptionsDie) DieReleasePtr() *corev1.SELinuxOptions {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SELinuxOptionsDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SELinuxOptionsDie) DieStamp(fn func(r *corev1.SELinuxOptions)) *SELinuxOptionsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SELinuxOptionsDie) DeepCopy() *SELinuxOptionsDie {
	r := *d.r.DeepCopy()
	return &SELinuxOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// User is a SELinux user label that applies to the container.
func (d *SELinuxOptionsDie) User(v string) *SELinuxOptionsDie {
	return d.DieStamp(func(r *corev1.SELinuxOptions) {
		r.User = v
	})
}

// Role is a SELinux role label that applies to the container.
func (d *SELinuxOptionsDie) Role(v string) *SELinuxOptionsDie {
	return d.DieStamp(func(r *corev1.SELinuxOptions) {
		r.Role = v
	})
}

// Type is a SELinux type label that applies to the container.
func (d *SELinuxOptionsDie) Type(v string) *SELinuxOptionsDie {
	return d.DieStamp(func(r *corev1.SELinuxOptions) {
		r.Type = v
	})
}

// Level is SELinux level label that applies to the container.
func (d *SELinuxOptionsDie) Level(v string) *SELinuxOptionsDie {
	return d.DieStamp(func(r *corev1.SELinuxOptions) {
		r.Level = v
	})
}

var WindowsSecurityContextOptionsBlank = (&WindowsSecurityContextOptionsDie{}).DieFeed(corev1.WindowsSecurityContextOptions{})

type WindowsSecurityContextOptionsDie struct {
	mutable bool
	r       corev1.WindowsSecurityContextOptions
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WindowsSecurityContextOptionsDie) DieImmutable(immutable bool) *WindowsSecurityContextOptionsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WindowsSecurityContextOptionsDie) DieFeed(r corev1.WindowsSecurityContextOptions) *WindowsSecurityContextOptionsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &WindowsSecurityContextOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WindowsSecurityContextOptionsDie) DieFeedPtr(r *corev1.WindowsSecurityContextOptions) *WindowsSecurityContextOptionsDie {
	if r == nil {
		r = &corev1.WindowsSecurityContextOptions{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *WindowsSecurityContextOptionsDie) DieFeedRawExtension(raw runtime.RawExtension) *WindowsSecurityContextOptionsDie {
	b, _ := json.Marshal(raw)
	r := corev1.WindowsSecurityContextOptions{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *WindowsSecurityContextOptionsDie) DieRelease() corev1.WindowsSecurityContextOptions {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WindowsSecurityContextOptionsDie) DieReleasePtr() *corev1.WindowsSecurityContextOptions {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *WindowsSecurityContextOptionsDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WindowsSecurityContextOptionsDie) DieStamp(fn func(r *corev1.WindowsSecurityContextOptions)) *WindowsSecurityContextOptionsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WindowsSecurityContextOptionsDie) DeepCopy() *WindowsSecurityContextOptionsDie {
	r := *d.r.DeepCopy()
	return &WindowsSecurityContextOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (d *WindowsSecurityContextOptionsDie) GMSACredentialSpecName(v *string) *WindowsSecurityContextOptionsDie {
	return d.DieStamp(func(r *corev1.WindowsSecurityContextOptions) {
		r.GMSACredentialSpecName = v
	})
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
func (d *WindowsSecurityContextOptionsDie) GMSACredentialSpec(v *string) *WindowsSecurityContextOptionsDie {
	return d.DieStamp(func(r *corev1.WindowsSecurityContextOptions) {
		r.GMSACredentialSpec = v
	})
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (d *WindowsSecurityContextOptionsDie) RunAsUserName(v *string) *WindowsSecurityContextOptionsDie {
	return d.DieStamp(func(r *corev1.WindowsSecurityContextOptions) {
		r.RunAsUserName = v
	})
}

// HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
func (d *WindowsSecurityContextOptionsDie) HostProcess(v *bool) *WindowsSecurityContextOptionsDie {
	return d.DieStamp(func(r *corev1.WindowsSecurityContextOptions) {
		r.HostProcess = v
	})
}

var SeccompProfileBlank = (&SeccompProfileDie{}).DieFeed(corev1.SeccompProfile{})

type SeccompProfileDie struct {
	mutable bool
	r       corev1.SeccompProfile
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SeccompProfileDie) DieImmutable(immutable bool) *SeccompProfileDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SeccompProfileDie) DieFeed(r corev1.SeccompProfile) *SeccompProfileDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SeccompProfileDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SeccompProfileDie) DieFeedPtr(r *corev1.SeccompProfile) *SeccompProfileDie {
	if r == nil {
		r = &corev1.SeccompProfile{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SeccompProfileDie) DieFeedRawExtension(raw runtime.RawExtension) *SeccompProfileDie {
	b, _ := json.Marshal(raw)
	r := corev1.SeccompProfile{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SeccompProfileDie) DieRelease() corev1.SeccompProfile {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SeccompProfileDie) DieReleasePtr() *corev1.SeccompProfile {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SeccompProfileDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SeccompProfileDie) DieStamp(fn func(r *corev1.SeccompProfile)) *SeccompProfileDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SeccompProfileDie) DeepCopy() *SeccompProfileDie {
	r := *d.r.DeepCopy()
	return &SeccompProfileDie{
		mutable: d.mutable,
		r:       r,
	}
}

// type indicates which kind of seccomp profile will be applied. Valid options are:
//
// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
func (d *SeccompProfileDie) Type(v corev1.SeccompProfileType) *SeccompProfileDie {
	return d.DieStamp(func(r *corev1.SeccompProfile) {
		r.Type = v
	})
}

// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
func (d *SeccompProfileDie) LocalhostProfile(v *string) *SeccompProfileDie {
	return d.DieStamp(func(r *corev1.SeccompProfile) {
		r.LocalhostProfile = v
	})
}

var ContainerStatusBlank = (&ContainerStatusDie{}).DieFeed(corev1.ContainerStatus{})

type ContainerStatusDie struct {
	mutable bool
	r       corev1.ContainerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerStatusDie) DieImmutable(immutable bool) *ContainerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerStatusDie) DieFeed(r corev1.ContainerStatus) *ContainerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerStatusDie) DieFeedPtr(r *corev1.ContainerStatus) *ContainerStatusDie {
	if r == nil {
		r = &corev1.ContainerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.ContainerStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerStatusDie) DieRelease() corev1.ContainerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerStatusDie) DieReleasePtr() *corev1.ContainerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerStatusDie) DieStamp(fn func(r *corev1.ContainerStatus)) *ContainerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerStatusDie) DeepCopy() *ContainerStatusDie {
	r := *d.r.DeepCopy()
	return &ContainerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
func (d *ContainerStatusDie) Name(v string) *ContainerStatusDie {
	return d.DieStamp(func(r *corev1.ContainerStatus) {
		r.Name = v
	})
}

// Details about the container's current condition.
func (d *ContainerStatusDie) State(v corev1.ContainerState) *ContainerStatusDie {
	return d.DieStamp(func(r *corev1.ContainerStatus) {
		r.State = v
	})
}

// Details about the container's last termination condition.
func (d *ContainerStatusDie) LastTerminationState(v corev1.ContainerState) *ContainerStatusDie {
	return d.DieStamp(func(r *corev1.ContainerStatus) {
		r.LastTerminationState = v
	})
}

// Specifies whether the container has passed its readiness probe.
func (d *ContainerStatusDie) Ready(v bool) *ContainerStatusDie {
	return d.DieStamp(func(r *corev1.ContainerStatus) {
		r.Ready = v
	})
}

// The number of times the container has been restarted.
func (d *ContainerStatusDie) RestartCount(v int32) *ContainerStatusDie {
	return d.DieStamp(func(r *corev1.ContainerStatus) {
		r.RestartCount = v
	})
}

// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
func (d *ContainerStatusDie) Image(v string) *ContainerStatusDie {
	return d.DieStamp(func(r *corev1.ContainerStatus) {
		r.Image = v
	})
}

// ImageID of the container's image.
func (d *ContainerStatusDie) ImageID(v string) *ContainerStatusDie {
	return d.DieStamp(func(r *corev1.ContainerStatus) {
		r.ImageID = v
	})
}

// Container's ID in the format '<type>://<container_id>'.
func (d *ContainerStatusDie) ContainerID(v string) *ContainerStatusDie {
	return d.DieStamp(func(r *corev1.ContainerStatus) {
		r.ContainerID = v
	})
}

// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
func (d *ContainerStatusDie) Started(v *bool) *ContainerStatusDie {
	return d.DieStamp(func(r *corev1.ContainerStatus) {
		r.Started = v
	})
}

var ContainerStateBlank = (&ContainerStateDie{}).DieFeed(corev1.ContainerState{})

type ContainerStateDie struct {
	mutable bool
	r       corev1.ContainerState
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerStateDie) DieImmutable(immutable bool) *ContainerStateDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerStateDie) DieFeed(r corev1.ContainerState) *ContainerStateDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerStateDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerStateDie) DieFeedPtr(r *corev1.ContainerState) *ContainerStateDie {
	if r == nil {
		r = &corev1.ContainerState{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStateDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerStateDie {
	b, _ := json.Marshal(raw)
	r := corev1.ContainerState{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerStateDie) DieRelease() corev1.ContainerState {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerStateDie) DieReleasePtr() *corev1.ContainerState {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStateDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerStateDie) DieStamp(fn func(r *corev1.ContainerState)) *ContainerStateDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerStateDie) DeepCopy() *ContainerStateDie {
	r := *d.r.DeepCopy()
	return &ContainerStateDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Details about a waiting container
func (d *ContainerStateDie) Waiting(v *corev1.ContainerStateWaiting) *ContainerStateDie {
	return d.DieStamp(func(r *corev1.ContainerState) {
		r.Waiting = v
	})
}

// Details about a running container
func (d *ContainerStateDie) Running(v *corev1.ContainerStateRunning) *ContainerStateDie {
	return d.DieStamp(func(r *corev1.ContainerState) {
		r.Running = v
	})
}

// Details about a terminated container
func (d *ContainerStateDie) Terminated(v *corev1.ContainerStateTerminated) *ContainerStateDie {
	return d.DieStamp(func(r *corev1.ContainerState) {
		r.Terminated = v
	})
}

var ContainerStateWaitingBlank = (&ContainerStateWaitingDie{}).DieFeed(corev1.ContainerStateWaiting{})

type ContainerStateWaitingDie struct {
	mutable bool
	r       corev1.ContainerStateWaiting
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerStateWaitingDie) DieImmutable(immutable bool) *ContainerStateWaitingDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerStateWaitingDie) DieFeed(r corev1.ContainerStateWaiting) *ContainerStateWaitingDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerStateWaitingDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerStateWaitingDie) DieFeedPtr(r *corev1.ContainerStateWaiting) *ContainerStateWaitingDie {
	if r == nil {
		r = &corev1.ContainerStateWaiting{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStateWaitingDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerStateWaitingDie {
	b, _ := json.Marshal(raw)
	r := corev1.ContainerStateWaiting{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerStateWaitingDie) DieRelease() corev1.ContainerStateWaiting {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerStateWaitingDie) DieReleasePtr() *corev1.ContainerStateWaiting {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStateWaitingDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerStateWaitingDie) DieStamp(fn func(r *corev1.ContainerStateWaiting)) *ContainerStateWaitingDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerStateWaitingDie) DeepCopy() *ContainerStateWaitingDie {
	r := *d.r.DeepCopy()
	return &ContainerStateWaitingDie{
		mutable: d.mutable,
		r:       r,
	}
}

// (brief) reason the container is not yet running.
func (d *ContainerStateWaitingDie) Reason(v string) *ContainerStateWaitingDie {
	return d.DieStamp(func(r *corev1.ContainerStateWaiting) {
		r.Reason = v
	})
}

// Message regarding why the container is not yet running.
func (d *ContainerStateWaitingDie) Message(v string) *ContainerStateWaitingDie {
	return d.DieStamp(func(r *corev1.ContainerStateWaiting) {
		r.Message = v
	})
}

var ContainerStateRunningBlank = (&ContainerStateRunningDie{}).DieFeed(corev1.ContainerStateRunning{})

type ContainerStateRunningDie struct {
	mutable bool
	r       corev1.ContainerStateRunning
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerStateRunningDie) DieImmutable(immutable bool) *ContainerStateRunningDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerStateRunningDie) DieFeed(r corev1.ContainerStateRunning) *ContainerStateRunningDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerStateRunningDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerStateRunningDie) DieFeedPtr(r *corev1.ContainerStateRunning) *ContainerStateRunningDie {
	if r == nil {
		r = &corev1.ContainerStateRunning{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStateRunningDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerStateRunningDie {
	b, _ := json.Marshal(raw)
	r := corev1.ContainerStateRunning{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerStateRunningDie) DieRelease() corev1.ContainerStateRunning {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerStateRunningDie) DieReleasePtr() *corev1.ContainerStateRunning {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStateRunningDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerStateRunningDie) DieStamp(fn func(r *corev1.ContainerStateRunning)) *ContainerStateRunningDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerStateRunningDie) DeepCopy() *ContainerStateRunningDie {
	r := *d.r.DeepCopy()
	return &ContainerStateRunningDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Time at which the container was last (re-)started
func (d *ContainerStateRunningDie) StartedAt(v apismetav1.Time) *ContainerStateRunningDie {
	return d.DieStamp(func(r *corev1.ContainerStateRunning) {
		r.StartedAt = v
	})
}

var ContainerStateTerminatedBlank = (&ContainerStateTerminatedDie{}).DieFeed(corev1.ContainerStateTerminated{})

type ContainerStateTerminatedDie struct {
	mutable bool
	r       corev1.ContainerStateTerminated
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerStateTerminatedDie) DieImmutable(immutable bool) *ContainerStateTerminatedDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerStateTerminatedDie) DieFeed(r corev1.ContainerStateTerminated) *ContainerStateTerminatedDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerStateTerminatedDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerStateTerminatedDie) DieFeedPtr(r *corev1.ContainerStateTerminated) *ContainerStateTerminatedDie {
	if r == nil {
		r = &corev1.ContainerStateTerminated{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStateTerminatedDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerStateTerminatedDie {
	b, _ := json.Marshal(raw)
	r := corev1.ContainerStateTerminated{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerStateTerminatedDie) DieRelease() corev1.ContainerStateTerminated {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerStateTerminatedDie) DieReleasePtr() *corev1.ContainerStateTerminated {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerStateTerminatedDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerStateTerminatedDie) DieStamp(fn func(r *corev1.ContainerStateTerminated)) *ContainerStateTerminatedDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerStateTerminatedDie) DeepCopy() *ContainerStateTerminatedDie {
	r := *d.r.DeepCopy()
	return &ContainerStateTerminatedDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Exit status from the last termination of the container
func (d *ContainerStateTerminatedDie) ExitCode(v int32) *ContainerStateTerminatedDie {
	return d.DieStamp(func(r *corev1.ContainerStateTerminated) {
		r.ExitCode = v
	})
}

// Signal from the last termination of the container
func (d *ContainerStateTerminatedDie) Signal(v int32) *ContainerStateTerminatedDie {
	return d.DieStamp(func(r *corev1.ContainerStateTerminated) {
		r.Signal = v
	})
}

// (brief) reason from the last termination of the container
func (d *ContainerStateTerminatedDie) Reason(v string) *ContainerStateTerminatedDie {
	return d.DieStamp(func(r *corev1.ContainerStateTerminated) {
		r.Reason = v
	})
}

// Message regarding the last termination of the container
func (d *ContainerStateTerminatedDie) Message(v string) *ContainerStateTerminatedDie {
	return d.DieStamp(func(r *corev1.ContainerStateTerminated) {
		r.Message = v
	})
}

// Time at which previous execution of the container started
func (d *ContainerStateTerminatedDie) StartedAt(v apismetav1.Time) *ContainerStateTerminatedDie {
	return d.DieStamp(func(r *corev1.ContainerStateTerminated) {
		r.StartedAt = v
	})
}

// Time at which the container last terminated
func (d *ContainerStateTerminatedDie) FinishedAt(v apismetav1.Time) *ContainerStateTerminatedDie {
	return d.DieStamp(func(r *corev1.ContainerStateTerminated) {
		r.FinishedAt = v
	})
}

// Container's ID in the format '<type>://<container_id>'
func (d *ContainerStateTerminatedDie) ContainerID(v string) *ContainerStateTerminatedDie {
	return d.DieStamp(func(r *corev1.ContainerStateTerminated) {
		r.ContainerID = v
	})
}

var EndpointsBlank = (&EndpointsDie{}).DieFeed(corev1.Endpoints{})

type EndpointsDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Endpoints
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EndpointsDie) DieImmutable(immutable bool) *EndpointsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EndpointsDie) DieFeed(r corev1.Endpoints) *EndpointsDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &EndpointsDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EndpointsDie) DieFeedPtr(r *corev1.Endpoints) *EndpointsDie {
	if r == nil {
		r = &corev1.Endpoints{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EndpointsDie) DieFeedRawExtension(raw runtime.RawExtension) *EndpointsDie {
	b, _ := json.Marshal(raw)
	r := corev1.Endpoints{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EndpointsDie) DieRelease() corev1.Endpoints {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EndpointsDie) DieReleasePtr() *corev1.Endpoints {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *EndpointsDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EndpointsDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EndpointsDie) DieStamp(fn func(r *corev1.Endpoints)) *EndpointsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EndpointsDie) DeepCopy() *EndpointsDie {
	r := *d.r.DeepCopy()
	return &EndpointsDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*EndpointsDie)(nil)

func (d *EndpointsDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *EndpointsDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *EndpointsDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *EndpointsDie) UnmarshalJSON(b []byte) error {
	if d == EndpointsBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.Endpoints{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *EndpointsDie) APIVersion(v string) *EndpointsDie {
	return d.DieStamp(func(r *corev1.Endpoints) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *EndpointsDie) Kind(v string) *EndpointsDie {
	return d.DieStamp(func(r *corev1.Endpoints) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *EndpointsDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *EndpointsDie {
	return d.DieStamp(func(r *corev1.Endpoints) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
func (d *EndpointsDie) Subsets(v ...corev1.EndpointSubset) *EndpointsDie {
	return d.DieStamp(func(r *corev1.Endpoints) {
		r.Subsets = v
	})
}

var EndpointSubsetBlank = (&EndpointSubsetDie{}).DieFeed(corev1.EndpointSubset{})

type EndpointSubsetDie struct {
	mutable bool
	r       corev1.EndpointSubset
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EndpointSubsetDie) DieImmutable(immutable bool) *EndpointSubsetDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EndpointSubsetDie) DieFeed(r corev1.EndpointSubset) *EndpointSubsetDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EndpointSubsetDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EndpointSubsetDie) DieFeedPtr(r *corev1.EndpointSubset) *EndpointSubsetDie {
	if r == nil {
		r = &corev1.EndpointSubset{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EndpointSubsetDie) DieFeedRawExtension(raw runtime.RawExtension) *EndpointSubsetDie {
	b, _ := json.Marshal(raw)
	r := corev1.EndpointSubset{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EndpointSubsetDie) DieRelease() corev1.EndpointSubset {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EndpointSubsetDie) DieReleasePtr() *corev1.EndpointSubset {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EndpointSubsetDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EndpointSubsetDie) DieStamp(fn func(r *corev1.EndpointSubset)) *EndpointSubsetDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EndpointSubsetDie) DeepCopy() *EndpointSubsetDie {
	r := *d.r.DeepCopy()
	return &EndpointSubsetDie{
		mutable: d.mutable,
		r:       r,
	}
}

// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
func (d *EndpointSubsetDie) Addresses(v ...corev1.EndpointAddress) *EndpointSubsetDie {
	return d.DieStamp(func(r *corev1.EndpointSubset) {
		r.Addresses = v
	})
}

// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
func (d *EndpointSubsetDie) NotReadyAddresses(v ...corev1.EndpointAddress) *EndpointSubsetDie {
	return d.DieStamp(func(r *corev1.EndpointSubset) {
		r.NotReadyAddresses = v
	})
}

// Port numbers available on the related IP addresses.
func (d *EndpointSubsetDie) Ports(v ...corev1.EndpointPort) *EndpointSubsetDie {
	return d.DieStamp(func(r *corev1.EndpointSubset) {
		r.Ports = v
	})
}

var EndpointAddressBlank = (&EndpointAddressDie{}).DieFeed(corev1.EndpointAddress{})

type EndpointAddressDie struct {
	mutable bool
	r       corev1.EndpointAddress
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EndpointAddressDie) DieImmutable(immutable bool) *EndpointAddressDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EndpointAddressDie) DieFeed(r corev1.EndpointAddress) *EndpointAddressDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EndpointAddressDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EndpointAddressDie) DieFeedPtr(r *corev1.EndpointAddress) *EndpointAddressDie {
	if r == nil {
		r = &corev1.EndpointAddress{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EndpointAddressDie) DieFeedRawExtension(raw runtime.RawExtension) *EndpointAddressDie {
	b, _ := json.Marshal(raw)
	r := corev1.EndpointAddress{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EndpointAddressDie) DieRelease() corev1.EndpointAddress {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EndpointAddressDie) DieReleasePtr() *corev1.EndpointAddress {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EndpointAddressDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EndpointAddressDie) DieStamp(fn func(r *corev1.EndpointAddress)) *EndpointAddressDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EndpointAddressDie) DeepCopy() *EndpointAddressDie {
	r := *d.r.DeepCopy()
	return &EndpointAddressDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready. TODO: This should allow hostname or IP, See #4447.
func (d *EndpointAddressDie) IP(v string) *EndpointAddressDie {
	return d.DieStamp(func(r *corev1.EndpointAddress) {
		r.IP = v
	})
}

// The Hostname of this endpoint
func (d *EndpointAddressDie) Hostname(v string) *EndpointAddressDie {
	return d.DieStamp(func(r *corev1.EndpointAddress) {
		r.Hostname = v
	})
}

// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
func (d *EndpointAddressDie) NodeName(v *string) *EndpointAddressDie {
	return d.DieStamp(func(r *corev1.EndpointAddress) {
		r.NodeName = v
	})
}

// Reference to object providing the endpoint.
func (d *EndpointAddressDie) TargetRef(v *corev1.ObjectReference) *EndpointAddressDie {
	return d.DieStamp(func(r *corev1.EndpointAddress) {
		r.TargetRef = v
	})
}

var EndpointPortBlank = (&EndpointPortDie{}).DieFeed(corev1.EndpointPort{})

type EndpointPortDie struct {
	mutable bool
	r       corev1.EndpointPort
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EndpointPortDie) DieImmutable(immutable bool) *EndpointPortDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EndpointPortDie) DieFeed(r corev1.EndpointPort) *EndpointPortDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EndpointPortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EndpointPortDie) DieFeedPtr(r *corev1.EndpointPort) *EndpointPortDie {
	if r == nil {
		r = &corev1.EndpointPort{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EndpointPortDie) DieFeedRawExtension(raw runtime.RawExtension) *EndpointPortDie {
	b, _ := json.Marshal(raw)
	r := corev1.EndpointPort{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EndpointPortDie) DieRelease() corev1.EndpointPort {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EndpointPortDie) DieReleasePtr() *corev1.EndpointPort {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EndpointPortDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EndpointPortDie) DieStamp(fn func(r *corev1.EndpointPort)) *EndpointPortDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EndpointPortDie) DeepCopy() *EndpointPortDie {
	r := *d.r.DeepCopy()
	return &EndpointPortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
func (d *EndpointPortDie) Name(v string) *EndpointPortDie {
	return d.DieStamp(func(r *corev1.EndpointPort) {
		r.Name = v
	})
}

// The port number of the endpoint.
func (d *EndpointPortDie) Port(v int32) *EndpointPortDie {
	return d.DieStamp(func(r *corev1.EndpointPort) {
		r.Port = v
	})
}

// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
func (d *EndpointPortDie) Protocol(v corev1.Protocol) *EndpointPortDie {
	return d.DieStamp(func(r *corev1.EndpointPort) {
		r.Protocol = v
	})
}

// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
func (d *EndpointPortDie) AppProtocol(v *string) *EndpointPortDie {
	return d.DieStamp(func(r *corev1.EndpointPort) {
		r.AppProtocol = v
	})
}

var EventBlank = (&EventDie{}).DieFeed(corev1.Event{})

type EventDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Event
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EventDie) DieImmutable(immutable bool) *EventDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EventDie) DieFeed(r corev1.Event) *EventDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &EventDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EventDie) DieFeedPtr(r *corev1.Event) *EventDie {
	if r == nil {
		r = &corev1.Event{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EventDie) DieFeedRawExtension(raw runtime.RawExtension) *EventDie {
	b, _ := json.Marshal(raw)
	r := corev1.Event{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EventDie) DieRelease() corev1.Event {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EventDie) DieReleasePtr() *corev1.Event {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *EventDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EventDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EventDie) DieStamp(fn func(r *corev1.Event)) *EventDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EventDie) DeepCopy() *EventDie {
	r := *d.r.DeepCopy()
	return &EventDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*EventDie)(nil)

func (d *EventDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *EventDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *EventDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *EventDie) UnmarshalJSON(b []byte) error {
	if d == EventBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.Event{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *EventDie) APIVersion(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *EventDie) Kind(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *EventDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// The object that this event is about.
func (d *EventDie) InvolvedObject(v corev1.ObjectReference) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.InvolvedObject = v
	})
}

// This should be a short, machine understandable string that gives the reason for the transition into the object's current status. TODO: provide exact specification for format.
func (d *EventDie) Reason(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Reason = v
	})
}

// A human-readable description of the status of this operation. TODO: decide on maximum length.
func (d *EventDie) Message(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Message = v
	})
}

// The component reporting this event. Should be a short machine understandable string.
func (d *EventDie) Source(v corev1.EventSource) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Source = v
	})
}

// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
func (d *EventDie) FirstTimestamp(v apismetav1.Time) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.FirstTimestamp = v
	})
}

// The time at which the most recent occurrence of this event was recorded.
func (d *EventDie) LastTimestamp(v apismetav1.Time) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.LastTimestamp = v
	})
}

// The number of times this event has occurred.
func (d *EventDie) Count(v int32) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Count = v
	})
}

// Type of this event (Normal, Warning), new types could be added in the future
func (d *EventDie) Type(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Type = v
	})
}

// Time when this Event was first observed.
func (d *EventDie) EventTime(v apismetav1.MicroTime) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.EventTime = v
	})
}

// Data about the Event series this event represents or nil if it's a singleton Event.
func (d *EventDie) Series(v *corev1.EventSeries) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Series = v
	})
}

// What action was taken/failed regarding to the Regarding object.
func (d *EventDie) Action(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Action = v
	})
}

// Optional secondary object for more complex actions.
func (d *EventDie) Related(v *corev1.ObjectReference) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Related = v
	})
}

// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
func (d *EventDie) ReportingController(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.ReportingController = v
	})
}

// ID of the controller instance, e.g. `kubelet-xyzf`.
func (d *EventDie) ReportingInstance(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.ReportingInstance = v
	})
}

var EventSourceBlank = (&EventSourceDie{}).DieFeed(corev1.EventSource{})

type EventSourceDie struct {
	mutable bool
	r       corev1.EventSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EventSourceDie) DieImmutable(immutable bool) *EventSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EventSourceDie) DieFeed(r corev1.EventSource) *EventSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EventSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EventSourceDie) DieFeedPtr(r *corev1.EventSource) *EventSourceDie {
	if r == nil {
		r = &corev1.EventSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EventSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *EventSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.EventSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EventSourceDie) DieRelease() corev1.EventSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EventSourceDie) DieReleasePtr() *corev1.EventSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EventSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EventSourceDie) DieStamp(fn func(r *corev1.EventSource)) *EventSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EventSourceDie) DeepCopy() *EventSourceDie {
	r := *d.r.DeepCopy()
	return &EventSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Component from which the event is generated.
func (d *EventSourceDie) Component(v string) *EventSourceDie {
	return d.DieStamp(func(r *corev1.EventSource) {
		r.Component = v
	})
}

// Node name on which the event is generated.
func (d *EventSourceDie) Host(v string) *EventSourceDie {
	return d.DieStamp(func(r *corev1.EventSource) {
		r.Host = v
	})
}

var EventSeriesBlank = (&EventSeriesDie{}).DieFeed(corev1.EventSeries{})

type EventSeriesDie struct {
	mutable bool
	r       corev1.EventSeries
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EventSeriesDie) DieImmutable(immutable bool) *EventSeriesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EventSeriesDie) DieFeed(r corev1.EventSeries) *EventSeriesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EventSeriesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EventSeriesDie) DieFeedPtr(r *corev1.EventSeries) *EventSeriesDie {
	if r == nil {
		r = &corev1.EventSeries{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EventSeriesDie) DieFeedRawExtension(raw runtime.RawExtension) *EventSeriesDie {
	b, _ := json.Marshal(raw)
	r := corev1.EventSeries{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EventSeriesDie) DieRelease() corev1.EventSeries {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EventSeriesDie) DieReleasePtr() *corev1.EventSeries {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EventSeriesDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EventSeriesDie) DieStamp(fn func(r *corev1.EventSeries)) *EventSeriesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EventSeriesDie) DeepCopy() *EventSeriesDie {
	r := *d.r.DeepCopy()
	return &EventSeriesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Number of occurrences in this series up to the last heartbeat time
func (d *EventSeriesDie) Count(v int32) *EventSeriesDie {
	return d.DieStamp(func(r *corev1.EventSeries) {
		r.Count = v
	})
}

// Time of the last occurrence observed
func (d *EventSeriesDie) LastObservedTime(v apismetav1.MicroTime) *EventSeriesDie {
	return d.DieStamp(func(r *corev1.EventSeries) {
		r.LastObservedTime = v
	})
}

var LimitRangeBlank = (&LimitRangeDie{}).DieFeed(corev1.LimitRange{})

type LimitRangeDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.LimitRange
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LimitRangeDie) DieImmutable(immutable bool) *LimitRangeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LimitRangeDie) DieFeed(r corev1.LimitRange) *LimitRangeDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &LimitRangeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LimitRangeDie) DieFeedPtr(r *corev1.LimitRange) *LimitRangeDie {
	if r == nil {
		r = &corev1.LimitRange{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *LimitRangeDie) DieFeedRawExtension(raw runtime.RawExtension) *LimitRangeDie {
	b, _ := json.Marshal(raw)
	r := corev1.LimitRange{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *LimitRangeDie) DieRelease() corev1.LimitRange {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LimitRangeDie) DieReleasePtr() *corev1.LimitRange {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *LimitRangeDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *LimitRangeDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LimitRangeDie) DieStamp(fn func(r *corev1.LimitRange)) *LimitRangeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LimitRangeDie) DeepCopy() *LimitRangeDie {
	r := *d.r.DeepCopy()
	return &LimitRangeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*LimitRangeDie)(nil)

func (d *LimitRangeDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *LimitRangeDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *LimitRangeDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *LimitRangeDie) UnmarshalJSON(b []byte) error {
	if d == LimitRangeBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.LimitRange{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *LimitRangeDie) APIVersion(v string) *LimitRangeDie {
	return d.DieStamp(func(r *corev1.LimitRange) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *LimitRangeDie) Kind(v string) *LimitRangeDie {
	return d.DieStamp(func(r *corev1.LimitRange) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *LimitRangeDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *LimitRangeDie {
	return d.DieStamp(func(r *corev1.LimitRange) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *LimitRangeDie) SpecDie(fn func(d *LimitRangeSpecDie)) *LimitRangeDie {
	return d.DieStamp(func(r *corev1.LimitRange) {
		d := LimitRangeSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *LimitRangeDie) Spec(v corev1.LimitRangeSpec) *LimitRangeDie {
	return d.DieStamp(func(r *corev1.LimitRange) {
		r.Spec = v
	})
}

var LimitRangeSpecBlank = (&LimitRangeSpecDie{}).DieFeed(corev1.LimitRangeSpec{})

type LimitRangeSpecDie struct {
	mutable bool
	r       corev1.LimitRangeSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LimitRangeSpecDie) DieImmutable(immutable bool) *LimitRangeSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LimitRangeSpecDie) DieFeed(r corev1.LimitRangeSpec) *LimitRangeSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LimitRangeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LimitRangeSpecDie) DieFeedPtr(r *corev1.LimitRangeSpec) *LimitRangeSpecDie {
	if r == nil {
		r = &corev1.LimitRangeSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *LimitRangeSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *LimitRangeSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.LimitRangeSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *LimitRangeSpecDie) DieRelease() corev1.LimitRangeSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LimitRangeSpecDie) DieReleasePtr() *corev1.LimitRangeSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *LimitRangeSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LimitRangeSpecDie) DieStamp(fn func(r *corev1.LimitRangeSpec)) *LimitRangeSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LimitRangeSpecDie) DeepCopy() *LimitRangeSpecDie {
	r := *d.r.DeepCopy()
	return &LimitRangeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Limits is the list of LimitRangeItem objects that are enforced.
func (d *LimitRangeSpecDie) Limits(v ...corev1.LimitRangeItem) *LimitRangeSpecDie {
	return d.DieStamp(func(r *corev1.LimitRangeSpec) {
		r.Limits = v
	})
}

var LimitRangeItemBlank = (&LimitRangeItemDie{}).DieFeed(corev1.LimitRangeItem{})

type LimitRangeItemDie struct {
	mutable bool
	r       corev1.LimitRangeItem
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LimitRangeItemDie) DieImmutable(immutable bool) *LimitRangeItemDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LimitRangeItemDie) DieFeed(r corev1.LimitRangeItem) *LimitRangeItemDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LimitRangeItemDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LimitRangeItemDie) DieFeedPtr(r *corev1.LimitRangeItem) *LimitRangeItemDie {
	if r == nil {
		r = &corev1.LimitRangeItem{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *LimitRangeItemDie) DieFeedRawExtension(raw runtime.RawExtension) *LimitRangeItemDie {
	b, _ := json.Marshal(raw)
	r := corev1.LimitRangeItem{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *LimitRangeItemDie) DieRelease() corev1.LimitRangeItem {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LimitRangeItemDie) DieReleasePtr() *corev1.LimitRangeItem {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *LimitRangeItemDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LimitRangeItemDie) DieStamp(fn func(r *corev1.LimitRangeItem)) *LimitRangeItemDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LimitRangeItemDie) DeepCopy() *LimitRangeItemDie {
	r := *d.r.DeepCopy()
	return &LimitRangeItemDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Type of resource that this limit applies to.
func (d *LimitRangeItemDie) Type(v corev1.LimitType) *LimitRangeItemDie {
	return d.DieStamp(func(r *corev1.LimitRangeItem) {
		r.Type = v
	})
}

// Max usage constraints on this kind by resource name.
func (d *LimitRangeItemDie) Max(v corev1.ResourceList) *LimitRangeItemDie {
	return d.DieStamp(func(r *corev1.LimitRangeItem) {
		r.Max = v
	})
}

// Min usage constraints on this kind by resource name.
func (d *LimitRangeItemDie) Min(v corev1.ResourceList) *LimitRangeItemDie {
	return d.DieStamp(func(r *corev1.LimitRangeItem) {
		r.Min = v
	})
}

// Default resource requirement limit value by resource name if resource limit is omitted.
func (d *LimitRangeItemDie) Default(v corev1.ResourceList) *LimitRangeItemDie {
	return d.DieStamp(func(r *corev1.LimitRangeItem) {
		r.Default = v
	})
}

// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
func (d *LimitRangeItemDie) DefaultRequest(v corev1.ResourceList) *LimitRangeItemDie {
	return d.DieStamp(func(r *corev1.LimitRangeItem) {
		r.DefaultRequest = v
	})
}

// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
func (d *LimitRangeItemDie) MaxLimitRequestRatio(v corev1.ResourceList) *LimitRangeItemDie {
	return d.DieStamp(func(r *corev1.LimitRangeItem) {
		r.MaxLimitRequestRatio = v
	})
}

var NamespaceBlank = (&NamespaceDie{}).DieFeed(corev1.Namespace{})

type NamespaceDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Namespace
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NamespaceDie) DieImmutable(immutable bool) *NamespaceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NamespaceDie) DieFeed(r corev1.Namespace) *NamespaceDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &NamespaceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NamespaceDie) DieFeedPtr(r *corev1.Namespace) *NamespaceDie {
	if r == nil {
		r = &corev1.Namespace{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NamespaceDie) DieFeedRawExtension(raw runtime.RawExtension) *NamespaceDie {
	b, _ := json.Marshal(raw)
	r := corev1.Namespace{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NamespaceDie) DieRelease() corev1.Namespace {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NamespaceDie) DieReleasePtr() *corev1.Namespace {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *NamespaceDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NamespaceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NamespaceDie) DieStamp(fn func(r *corev1.Namespace)) *NamespaceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NamespaceDie) DeepCopy() *NamespaceDie {
	r := *d.r.DeepCopy()
	return &NamespaceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*NamespaceDie)(nil)

func (d *NamespaceDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *NamespaceDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *NamespaceDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *NamespaceDie) UnmarshalJSON(b []byte) error {
	if d == NamespaceBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.Namespace{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *NamespaceDie) APIVersion(v string) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *NamespaceDie) Kind(v string) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *NamespaceDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *NamespaceDie) SpecDie(fn func(d *NamespaceSpecDie)) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		d := NamespaceSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *NamespaceDie) StatusDie(fn func(d *NamespaceStatusDie)) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		d := NamespaceStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *NamespaceDie) Spec(v corev1.NamespaceSpec) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		r.Spec = v
	})
}

// Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *NamespaceDie) Status(v corev1.NamespaceStatus) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		r.Status = v
	})
}

var NamespaceSpecBlank = (&NamespaceSpecDie{}).DieFeed(corev1.NamespaceSpec{})

type NamespaceSpecDie struct {
	mutable bool
	r       corev1.NamespaceSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NamespaceSpecDie) DieImmutable(immutable bool) *NamespaceSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NamespaceSpecDie) DieFeed(r corev1.NamespaceSpec) *NamespaceSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NamespaceSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NamespaceSpecDie) DieFeedPtr(r *corev1.NamespaceSpec) *NamespaceSpecDie {
	if r == nil {
		r = &corev1.NamespaceSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NamespaceSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *NamespaceSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.NamespaceSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NamespaceSpecDie) DieRelease() corev1.NamespaceSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NamespaceSpecDie) DieReleasePtr() *corev1.NamespaceSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NamespaceSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NamespaceSpecDie) DieStamp(fn func(r *corev1.NamespaceSpec)) *NamespaceSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NamespaceSpecDie) DeepCopy() *NamespaceSpecDie {
	r := *d.r.DeepCopy()
	return &NamespaceSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (d *NamespaceSpecDie) Finalizers(v ...corev1.FinalizerName) *NamespaceSpecDie {
	return d.DieStamp(func(r *corev1.NamespaceSpec) {
		r.Finalizers = v
	})
}

var NamespaceStatusBlank = (&NamespaceStatusDie{}).DieFeed(corev1.NamespaceStatus{})

type NamespaceStatusDie struct {
	mutable bool
	r       corev1.NamespaceStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NamespaceStatusDie) DieImmutable(immutable bool) *NamespaceStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NamespaceStatusDie) DieFeed(r corev1.NamespaceStatus) *NamespaceStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NamespaceStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NamespaceStatusDie) DieFeedPtr(r *corev1.NamespaceStatus) *NamespaceStatusDie {
	if r == nil {
		r = &corev1.NamespaceStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NamespaceStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *NamespaceStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.NamespaceStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NamespaceStatusDie) DieRelease() corev1.NamespaceStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NamespaceStatusDie) DieReleasePtr() *corev1.NamespaceStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NamespaceStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NamespaceStatusDie) DieStamp(fn func(r *corev1.NamespaceStatus)) *NamespaceStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NamespaceStatusDie) DeepCopy() *NamespaceStatusDie {
	r := *d.r.DeepCopy()
	return &NamespaceStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
func (d *NamespaceStatusDie) Phase(v corev1.NamespacePhase) *NamespaceStatusDie {
	return d.DieStamp(func(r *corev1.NamespaceStatus) {
		r.Phase = v
	})
}

// Represents the latest available observations of a namespace's current state.
func (d *NamespaceStatusDie) Conditions(v ...corev1.NamespaceCondition) *NamespaceStatusDie {
	return d.DieStamp(func(r *corev1.NamespaceStatus) {
		r.Conditions = v
	})
}

var NodeBlank = (&NodeDie{}).DieFeed(corev1.Node{})

type NodeDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Node
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeDie) DieImmutable(immutable bool) *NodeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeDie) DieFeed(r corev1.Node) *NodeDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &NodeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeDie) DieFeedPtr(r *corev1.Node) *NodeDie {
	if r == nil {
		r = &corev1.Node{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeDie {
	b, _ := json.Marshal(raw)
	r := corev1.Node{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeDie) DieRelease() corev1.Node {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeDie) DieReleasePtr() *corev1.Node {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *NodeDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeDie) DieStamp(fn func(r *corev1.Node)) *NodeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeDie) DeepCopy() *NodeDie {
	r := *d.r.DeepCopy()
	return &NodeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*NodeDie)(nil)

func (d *NodeDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *NodeDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *NodeDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *NodeDie) UnmarshalJSON(b []byte) error {
	if d == NodeBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.Node{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *NodeDie) APIVersion(v string) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *NodeDie) Kind(v string) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *NodeDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *NodeDie) SpecDie(fn func(d *NodeSpecDie)) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		d := NodeSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *NodeDie) StatusDie(fn func(d *NodeStatusDie)) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		d := NodeStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *NodeDie) Spec(v corev1.NodeSpec) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		r.Spec = v
	})
}

// Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *NodeDie) Status(v corev1.NodeStatus) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		r.Status = v
	})
}

var NodeSpecBlank = (&NodeSpecDie{}).DieFeed(corev1.NodeSpec{})

type NodeSpecDie struct {
	mutable bool
	r       corev1.NodeSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeSpecDie) DieImmutable(immutable bool) *NodeSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeSpecDie) DieFeed(r corev1.NodeSpec) *NodeSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeSpecDie) DieFeedPtr(r *corev1.NodeSpec) *NodeSpecDie {
	if r == nil {
		r = &corev1.NodeSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeSpecDie) DieRelease() corev1.NodeSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeSpecDie) DieReleasePtr() *corev1.NodeSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeSpecDie) DieStamp(fn func(r *corev1.NodeSpec)) *NodeSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeSpecDie) DeepCopy() *NodeSpecDie {
	r := *d.r.DeepCopy()
	return &NodeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// PodCIDR represents the pod IP range assigned to the node.
func (d *NodeSpecDie) PodCIDR(v string) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.PodCIDR = v
	})
}

// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
func (d *NodeSpecDie) PodCIDRs(v ...string) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.PodCIDRs = v
	})
}

// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
func (d *NodeSpecDie) ProviderID(v string) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.ProviderID = v
	})
}

// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
func (d *NodeSpecDie) Unschedulable(v bool) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.Unschedulable = v
	})
}

// If specified, the node's taints.
func (d *NodeSpecDie) Taints(v ...corev1.Taint) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.Taints = v
	})
}

// Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed from Kubelets as of 1.24 and will be fully removed in 1.26.
func (d *NodeSpecDie) ConfigSource(v *corev1.NodeConfigSource) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.ConfigSource = v
	})
}

// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
func (d *NodeSpecDie) DoNotUseExternalID(v string) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.DoNotUseExternalID = v
	})
}

var TaintBlank = (&TaintDie{}).DieFeed(corev1.Taint{})

type TaintDie struct {
	mutable bool
	r       corev1.Taint
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *TaintDie) DieImmutable(immutable bool) *TaintDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *TaintDie) DieFeed(r corev1.Taint) *TaintDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &TaintDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *TaintDie) DieFeedPtr(r *corev1.Taint) *TaintDie {
	if r == nil {
		r = &corev1.Taint{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *TaintDie) DieFeedRawExtension(raw runtime.RawExtension) *TaintDie {
	b, _ := json.Marshal(raw)
	r := corev1.Taint{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *TaintDie) DieRelease() corev1.Taint {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *TaintDie) DieReleasePtr() *corev1.Taint {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *TaintDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *TaintDie) DieStamp(fn func(r *corev1.Taint)) *TaintDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *TaintDie) DeepCopy() *TaintDie {
	r := *d.r.DeepCopy()
	return &TaintDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Required. The taint key to be applied to a node.
func (d *TaintDie) Key(v string) *TaintDie {
	return d.DieStamp(func(r *corev1.Taint) {
		r.Key = v
	})
}

// The taint value corresponding to the taint key.
func (d *TaintDie) Value(v string) *TaintDie {
	return d.DieStamp(func(r *corev1.Taint) {
		r.Value = v
	})
}

// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
func (d *TaintDie) Effect(v corev1.TaintEffect) *TaintDie {
	return d.DieStamp(func(r *corev1.Taint) {
		r.Effect = v
	})
}

// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
func (d *TaintDie) TimeAdded(v *apismetav1.Time) *TaintDie {
	return d.DieStamp(func(r *corev1.Taint) {
		r.TimeAdded = v
	})
}

var NodeConfigSourceBlank = (&NodeConfigSourceDie{}).DieFeed(corev1.NodeConfigSource{})

type NodeConfigSourceDie struct {
	mutable bool
	r       corev1.NodeConfigSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeConfigSourceDie) DieImmutable(immutable bool) *NodeConfigSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeConfigSourceDie) DieFeed(r corev1.NodeConfigSource) *NodeConfigSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeConfigSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeConfigSourceDie) DieFeedPtr(r *corev1.NodeConfigSource) *NodeConfigSourceDie {
	if r == nil {
		r = &corev1.NodeConfigSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeConfigSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeConfigSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeConfigSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeConfigSourceDie) DieRelease() corev1.NodeConfigSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeConfigSourceDie) DieReleasePtr() *corev1.NodeConfigSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeConfigSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeConfigSourceDie) DieStamp(fn func(r *corev1.NodeConfigSource)) *NodeConfigSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeConfigSourceDie) DeepCopy() *NodeConfigSourceDie {
	r := *d.r.DeepCopy()
	return &NodeConfigSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// ConfigMap is a reference to a Node's ConfigMap
func (d *NodeConfigSourceDie) ConfigMap(v *corev1.ConfigMapNodeConfigSource) *NodeConfigSourceDie {
	return d.DieStamp(func(r *corev1.NodeConfigSource) {
		r.ConfigMap = v
	})
}

var ConfigMapNodeConfigSourceBlank = (&ConfigMapNodeConfigSourceDie{}).DieFeed(corev1.ConfigMapNodeConfigSource{})

type ConfigMapNodeConfigSourceDie struct {
	mutable bool
	r       corev1.ConfigMapNodeConfigSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConfigMapNodeConfigSourceDie) DieImmutable(immutable bool) *ConfigMapNodeConfigSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConfigMapNodeConfigSourceDie) DieFeed(r corev1.ConfigMapNodeConfigSource) *ConfigMapNodeConfigSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ConfigMapNodeConfigSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConfigMapNodeConfigSourceDie) DieFeedPtr(r *corev1.ConfigMapNodeConfigSource) *ConfigMapNodeConfigSourceDie {
	if r == nil {
		r = &corev1.ConfigMapNodeConfigSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapNodeConfigSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ConfigMapNodeConfigSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.ConfigMapNodeConfigSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ConfigMapNodeConfigSourceDie) DieRelease() corev1.ConfigMapNodeConfigSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConfigMapNodeConfigSourceDie) DieReleasePtr() *corev1.ConfigMapNodeConfigSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapNodeConfigSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConfigMapNodeConfigSourceDie) DieStamp(fn func(r *corev1.ConfigMapNodeConfigSource)) *ConfigMapNodeConfigSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConfigMapNodeConfigSourceDie) DeepCopy() *ConfigMapNodeConfigSourceDie {
	r := *d.r.DeepCopy()
	return &ConfigMapNodeConfigSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
func (d *ConfigMapNodeConfigSourceDie) Namespace(v string) *ConfigMapNodeConfigSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapNodeConfigSource) {
		r.Namespace = v
	})
}

// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
func (d *ConfigMapNodeConfigSourceDie) Name(v string) *ConfigMapNodeConfigSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapNodeConfigSource) {
		r.Name = v
	})
}

// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (d *ConfigMapNodeConfigSourceDie) UID(v types.UID) *ConfigMapNodeConfigSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapNodeConfigSource) {
		r.UID = v
	})
}

// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
func (d *ConfigMapNodeConfigSourceDie) ResourceVersion(v string) *ConfigMapNodeConfigSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapNodeConfigSource) {
		r.ResourceVersion = v
	})
}

// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
func (d *ConfigMapNodeConfigSourceDie) KubeletConfigKey(v string) *ConfigMapNodeConfigSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapNodeConfigSource) {
		r.KubeletConfigKey = v
	})
}

var NodeStatusBlank = (&NodeStatusDie{}).DieFeed(corev1.NodeStatus{})

type NodeStatusDie struct {
	mutable bool
	r       corev1.NodeStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeStatusDie) DieImmutable(immutable bool) *NodeStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeStatusDie) DieFeed(r corev1.NodeStatus) *NodeStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeStatusDie) DieFeedPtr(r *corev1.NodeStatus) *NodeStatusDie {
	if r == nil {
		r = &corev1.NodeStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeStatusDie) DieRelease() corev1.NodeStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeStatusDie) DieReleasePtr() *corev1.NodeStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeStatusDie) DieStamp(fn func(r *corev1.NodeStatus)) *NodeStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeStatusDie) DeepCopy() *NodeStatusDie {
	r := *d.r.DeepCopy()
	return &NodeStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (d *NodeStatusDie) Capacity(v corev1.ResourceList) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Capacity = v
	})
}

// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
func (d *NodeStatusDie) Allocatable(v corev1.ResourceList) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Allocatable = v
	})
}

// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
func (d *NodeStatusDie) Phase(v corev1.NodePhase) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Phase = v
	})
}

// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
func (d *NodeStatusDie) Conditions(v ...corev1.NodeCondition) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Conditions = v
	})
}

// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
func (d *NodeStatusDie) Addresses(v ...corev1.NodeAddress) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Addresses = v
	})
}

// Endpoints of daemons running on the Node.
func (d *NodeStatusDie) DaemonEndpoints(v corev1.NodeDaemonEndpoints) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.DaemonEndpoints = v
	})
}

// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
func (d *NodeStatusDie) NodeInfo(v corev1.NodeSystemInfo) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.NodeInfo = v
	})
}

// List of container images on this node
func (d *NodeStatusDie) Images(v ...corev1.ContainerImage) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Images = v
	})
}

// List of attachable volumes in use (mounted) by the node.
func (d *NodeStatusDie) VolumesInUse(v ...corev1.UniqueVolumeName) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.VolumesInUse = v
	})
}

// List of volumes that are attached to the node.
func (d *NodeStatusDie) VolumesAttached(v ...corev1.AttachedVolume) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.VolumesAttached = v
	})
}

// Status of the config assigned to the node via the dynamic Kubelet config feature.
func (d *NodeStatusDie) Config(v *corev1.NodeConfigStatus) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Config = v
	})
}

var NodeAddressBlank = (&NodeAddressDie{}).DieFeed(corev1.NodeAddress{})

type NodeAddressDie struct {
	mutable bool
	r       corev1.NodeAddress
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeAddressDie) DieImmutable(immutable bool) *NodeAddressDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeAddressDie) DieFeed(r corev1.NodeAddress) *NodeAddressDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeAddressDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeAddressDie) DieFeedPtr(r *corev1.NodeAddress) *NodeAddressDie {
	if r == nil {
		r = &corev1.NodeAddress{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeAddressDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeAddressDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeAddress{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeAddressDie) DieRelease() corev1.NodeAddress {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeAddressDie) DieReleasePtr() *corev1.NodeAddress {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeAddressDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeAddressDie) DieStamp(fn func(r *corev1.NodeAddress)) *NodeAddressDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeAddressDie) DeepCopy() *NodeAddressDie {
	r := *d.r.DeepCopy()
	return &NodeAddressDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Node address type, one of Hostname, ExternalIP or InternalIP.
func (d *NodeAddressDie) Type(v corev1.NodeAddressType) *NodeAddressDie {
	return d.DieStamp(func(r *corev1.NodeAddress) {
		r.Type = v
	})
}

// The node address.
func (d *NodeAddressDie) Address(v string) *NodeAddressDie {
	return d.DieStamp(func(r *corev1.NodeAddress) {
		r.Address = v
	})
}

var NodeDaemonEndpointsBlank = (&NodeDaemonEndpointsDie{}).DieFeed(corev1.NodeDaemonEndpoints{})

type NodeDaemonEndpointsDie struct {
	mutable bool
	r       corev1.NodeDaemonEndpoints
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeDaemonEndpointsDie) DieImmutable(immutable bool) *NodeDaemonEndpointsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeDaemonEndpointsDie) DieFeed(r corev1.NodeDaemonEndpoints) *NodeDaemonEndpointsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeDaemonEndpointsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeDaemonEndpointsDie) DieFeedPtr(r *corev1.NodeDaemonEndpoints) *NodeDaemonEndpointsDie {
	if r == nil {
		r = &corev1.NodeDaemonEndpoints{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeDaemonEndpointsDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeDaemonEndpointsDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeDaemonEndpoints{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeDaemonEndpointsDie) DieRelease() corev1.NodeDaemonEndpoints {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeDaemonEndpointsDie) DieReleasePtr() *corev1.NodeDaemonEndpoints {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeDaemonEndpointsDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeDaemonEndpointsDie) DieStamp(fn func(r *corev1.NodeDaemonEndpoints)) *NodeDaemonEndpointsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeDaemonEndpointsDie) DeepCopy() *NodeDaemonEndpointsDie {
	r := *d.r.DeepCopy()
	return &NodeDaemonEndpointsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Endpoint on which Kubelet is listening.
func (d *NodeDaemonEndpointsDie) KubeletEndpoint(v corev1.DaemonEndpoint) *NodeDaemonEndpointsDie {
	return d.DieStamp(func(r *corev1.NodeDaemonEndpoints) {
		r.KubeletEndpoint = v
	})
}

var DaemonEndpointBlank = (&DaemonEndpointDie{}).DieFeed(corev1.DaemonEndpoint{})

type DaemonEndpointDie struct {
	mutable bool
	r       corev1.DaemonEndpoint
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *DaemonEndpointDie) DieImmutable(immutable bool) *DaemonEndpointDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *DaemonEndpointDie) DieFeed(r corev1.DaemonEndpoint) *DaemonEndpointDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &DaemonEndpointDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *DaemonEndpointDie) DieFeedPtr(r *corev1.DaemonEndpoint) *DaemonEndpointDie {
	if r == nil {
		r = &corev1.DaemonEndpoint{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *DaemonEndpointDie) DieFeedRawExtension(raw runtime.RawExtension) *DaemonEndpointDie {
	b, _ := json.Marshal(raw)
	r := corev1.DaemonEndpoint{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *DaemonEndpointDie) DieRelease() corev1.DaemonEndpoint {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *DaemonEndpointDie) DieReleasePtr() *corev1.DaemonEndpoint {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *DaemonEndpointDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *DaemonEndpointDie) DieStamp(fn func(r *corev1.DaemonEndpoint)) *DaemonEndpointDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *DaemonEndpointDie) DeepCopy() *DaemonEndpointDie {
	r := *d.r.DeepCopy()
	return &DaemonEndpointDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Port number of the given endpoint.
func (d *DaemonEndpointDie) Port(v int32) *DaemonEndpointDie {
	return d.DieStamp(func(r *corev1.DaemonEndpoint) {
		r.Port = v
	})
}

var NodeSystemInfoBlank = (&NodeSystemInfoDie{}).DieFeed(corev1.NodeSystemInfo{})

type NodeSystemInfoDie struct {
	mutable bool
	r       corev1.NodeSystemInfo
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeSystemInfoDie) DieImmutable(immutable bool) *NodeSystemInfoDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeSystemInfoDie) DieFeed(r corev1.NodeSystemInfo) *NodeSystemInfoDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeSystemInfoDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeSystemInfoDie) DieFeedPtr(r *corev1.NodeSystemInfo) *NodeSystemInfoDie {
	if r == nil {
		r = &corev1.NodeSystemInfo{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSystemInfoDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeSystemInfoDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeSystemInfo{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeSystemInfoDie) DieRelease() corev1.NodeSystemInfo {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeSystemInfoDie) DieReleasePtr() *corev1.NodeSystemInfo {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSystemInfoDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeSystemInfoDie) DieStamp(fn func(r *corev1.NodeSystemInfo)) *NodeSystemInfoDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeSystemInfoDie) DeepCopy() *NodeSystemInfoDie {
	r := *d.r.DeepCopy()
	return &NodeSystemInfoDie{
		mutable: d.mutable,
		r:       r,
	}
}

// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
func (d *NodeSystemInfoDie) MachineID(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.MachineID = v
	})
}

// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
func (d *NodeSystemInfoDie) SystemUUID(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.SystemUUID = v
	})
}

// Boot ID reported by the node.
func (d *NodeSystemInfoDie) BootID(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.BootID = v
	})
}

// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
func (d *NodeSystemInfoDie) KernelVersion(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.KernelVersion = v
	})
}

// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
func (d *NodeSystemInfoDie) OSImage(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.OSImage = v
	})
}

// ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
func (d *NodeSystemInfoDie) ContainerRuntimeVersion(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.ContainerRuntimeVersion = v
	})
}

// Kubelet Version reported by the node.
func (d *NodeSystemInfoDie) KubeletVersion(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.KubeletVersion = v
	})
}

// KubeProxy Version reported by the node.
func (d *NodeSystemInfoDie) KubeProxyVersion(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.KubeProxyVersion = v
	})
}

// The Operating System reported by the node
func (d *NodeSystemInfoDie) OperatingSystem(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.OperatingSystem = v
	})
}

// The Architecture reported by the node
func (d *NodeSystemInfoDie) Architecture(v string) *NodeSystemInfoDie {
	return d.DieStamp(func(r *corev1.NodeSystemInfo) {
		r.Architecture = v
	})
}

var ContainerImageBlank = (&ContainerImageDie{}).DieFeed(corev1.ContainerImage{})

type ContainerImageDie struct {
	mutable bool
	r       corev1.ContainerImage
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerImageDie) DieImmutable(immutable bool) *ContainerImageDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerImageDie) DieFeed(r corev1.ContainerImage) *ContainerImageDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerImageDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerImageDie) DieFeedPtr(r *corev1.ContainerImage) *ContainerImageDie {
	if r == nil {
		r = &corev1.ContainerImage{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerImageDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerImageDie {
	b, _ := json.Marshal(raw)
	r := corev1.ContainerImage{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerImageDie) DieRelease() corev1.ContainerImage {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerImageDie) DieReleasePtr() *corev1.ContainerImage {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ContainerImageDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerImageDie) DieStamp(fn func(r *corev1.ContainerImage)) *ContainerImageDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerImageDie) DeepCopy() *ContainerImageDie {
	r := *d.r.DeepCopy()
	return &ContainerImageDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
func (d *ContainerImageDie) Names(v ...string) *ContainerImageDie {
	return d.DieStamp(func(r *corev1.ContainerImage) {
		r.Names = v
	})
}

// The size of the image in bytes.
func (d *ContainerImageDie) SizeBytes(v int64) *ContainerImageDie {
	return d.DieStamp(func(r *corev1.ContainerImage) {
		r.SizeBytes = v
	})
}

var AttachedVolumeBlank = (&AttachedVolumeDie{}).DieFeed(corev1.AttachedVolume{})

type AttachedVolumeDie struct {
	mutable bool
	r       corev1.AttachedVolume
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *AttachedVolumeDie) DieImmutable(immutable bool) *AttachedVolumeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *AttachedVolumeDie) DieFeed(r corev1.AttachedVolume) *AttachedVolumeDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &AttachedVolumeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *AttachedVolumeDie) DieFeedPtr(r *corev1.AttachedVolume) *AttachedVolumeDie {
	if r == nil {
		r = &corev1.AttachedVolume{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *AttachedVolumeDie) DieFeedRawExtension(raw runtime.RawExtension) *AttachedVolumeDie {
	b, _ := json.Marshal(raw)
	r := corev1.AttachedVolume{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *AttachedVolumeDie) DieRelease() corev1.AttachedVolume {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *AttachedVolumeDie) DieReleasePtr() *corev1.AttachedVolume {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *AttachedVolumeDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *AttachedVolumeDie) DieStamp(fn func(r *corev1.AttachedVolume)) *AttachedVolumeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *AttachedVolumeDie) DeepCopy() *AttachedVolumeDie {
	r := *d.r.DeepCopy()
	return &AttachedVolumeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name of the attached volume
func (d *AttachedVolumeDie) Name(v corev1.UniqueVolumeName) *AttachedVolumeDie {
	return d.DieStamp(func(r *corev1.AttachedVolume) {
		r.Name = v
	})
}

// DevicePath represents the device path where the volume should be available
func (d *AttachedVolumeDie) DevicePath(v string) *AttachedVolumeDie {
	return d.DieStamp(func(r *corev1.AttachedVolume) {
		r.DevicePath = v
	})
}

var NodeConfigStatusBlank = (&NodeConfigStatusDie{}).DieFeed(corev1.NodeConfigStatus{})

type NodeConfigStatusDie struct {
	mutable bool
	r       corev1.NodeConfigStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeConfigStatusDie) DieImmutable(immutable bool) *NodeConfigStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeConfigStatusDie) DieFeed(r corev1.NodeConfigStatus) *NodeConfigStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeConfigStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeConfigStatusDie) DieFeedPtr(r *corev1.NodeConfigStatus) *NodeConfigStatusDie {
	if r == nil {
		r = &corev1.NodeConfigStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeConfigStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeConfigStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeConfigStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeConfigStatusDie) DieRelease() corev1.NodeConfigStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeConfigStatusDie) DieReleasePtr() *corev1.NodeConfigStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeConfigStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeConfigStatusDie) DieStamp(fn func(r *corev1.NodeConfigStatus)) *NodeConfigStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeConfigStatusDie) DeepCopy() *NodeConfigStatusDie {
	r := *d.r.DeepCopy()
	return &NodeConfigStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
func (d *NodeConfigStatusDie) Assigned(v *corev1.NodeConfigSource) *NodeConfigStatusDie {
	return d.DieStamp(func(r *corev1.NodeConfigStatus) {
		r.Assigned = v
	})
}

// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
func (d *NodeConfigStatusDie) Active(v *corev1.NodeConfigSource) *NodeConfigStatusDie {
	return d.DieStamp(func(r *corev1.NodeConfigStatus) {
		r.Active = v
	})
}

// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
func (d *NodeConfigStatusDie) LastKnownGood(v *corev1.NodeConfigSource) *NodeConfigStatusDie {
	return d.DieStamp(func(r *corev1.NodeConfigStatus) {
		r.LastKnownGood = v
	})
}

// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
func (d *NodeConfigStatusDie) Error(v string) *NodeConfigStatusDie {
	return d.DieStamp(func(r *corev1.NodeConfigStatus) {
		r.Error = v
	})
}

var PersistentVolumeBlank = (&PersistentVolumeDie{}).DieFeed(corev1.PersistentVolume{})

type PersistentVolumeDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.PersistentVolume
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PersistentVolumeDie) DieImmutable(immutable bool) *PersistentVolumeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PersistentVolumeDie) DieFeed(r corev1.PersistentVolume) *PersistentVolumeDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &PersistentVolumeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PersistentVolumeDie) DieFeedPtr(r *corev1.PersistentVolume) *PersistentVolumeDie {
	if r == nil {
		r = &corev1.PersistentVolume{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeDie) DieFeedRawExtension(raw runtime.RawExtension) *PersistentVolumeDie {
	b, _ := json.Marshal(raw)
	r := corev1.PersistentVolume{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PersistentVolumeDie) DieRelease() corev1.PersistentVolume {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PersistentVolumeDie) DieReleasePtr() *corev1.PersistentVolume {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *PersistentVolumeDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PersistentVolumeDie) DieStamp(fn func(r *corev1.PersistentVolume)) *PersistentVolumeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PersistentVolumeDie) DeepCopy() *PersistentVolumeDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*PersistentVolumeDie)(nil)

func (d *PersistentVolumeDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *PersistentVolumeDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *PersistentVolumeDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *PersistentVolumeDie) UnmarshalJSON(b []byte) error {
	if d == PersistentVolumeBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.PersistentVolume{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *PersistentVolumeDie) APIVersion(v string) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *PersistentVolumeDie) Kind(v string) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *PersistentVolumeDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *PersistentVolumeDie) SpecDie(fn func(d *PersistentVolumeSpecDie)) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		d := PersistentVolumeSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *PersistentVolumeDie) StatusDie(fn func(d *PersistentVolumeStatusDie)) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		d := PersistentVolumeStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
func (d *PersistentVolumeDie) Spec(v corev1.PersistentVolumeSpec) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		r.Spec = v
	})
}

// status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
func (d *PersistentVolumeDie) Status(v corev1.PersistentVolumeStatus) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		r.Status = v
	})
}

var PersistentVolumeSpecBlank = (&PersistentVolumeSpecDie{}).DieFeed(corev1.PersistentVolumeSpec{})

type PersistentVolumeSpecDie struct {
	mutable bool
	r       corev1.PersistentVolumeSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PersistentVolumeSpecDie) DieImmutable(immutable bool) *PersistentVolumeSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PersistentVolumeSpecDie) DieFeed(r corev1.PersistentVolumeSpec) *PersistentVolumeSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PersistentVolumeSpecDie) DieFeedPtr(r *corev1.PersistentVolumeSpec) *PersistentVolumeSpecDie {
	if r == nil {
		r = &corev1.PersistentVolumeSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *PersistentVolumeSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.PersistentVolumeSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PersistentVolumeSpecDie) DieRelease() corev1.PersistentVolumeSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PersistentVolumeSpecDie) DieReleasePtr() *corev1.PersistentVolumeSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PersistentVolumeSpecDie) DieStamp(fn func(r *corev1.PersistentVolumeSpec)) *PersistentVolumeSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PersistentVolumeSpecDie) DeepCopy() *PersistentVolumeSpecDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
func (d *PersistentVolumeSpecDie) Capacity(v corev1.ResourceList) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.Capacity = v
	})
}

// persistentVolumeSource is the actual volume backing the persistent volume.
func (d *PersistentVolumeSpecDie) PersistentVolumeSource(v corev1.PersistentVolumeSource) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.PersistentVolumeSource = v
	})
}

// accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
func (d *PersistentVolumeSpecDie) AccessModes(v ...corev1.PersistentVolumeAccessMode) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.AccessModes = v
	})
}

// claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
func (d *PersistentVolumeSpecDie) ClaimRef(v *corev1.ObjectReference) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.ClaimRef = v
	})
}

// persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
func (d *PersistentVolumeSpecDie) PersistentVolumeReclaimPolicy(v corev1.PersistentVolumeReclaimPolicy) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.PersistentVolumeReclaimPolicy = v
	})
}

// storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
func (d *PersistentVolumeSpecDie) StorageClassName(v string) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.StorageClassName = v
	})
}

// mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
func (d *PersistentVolumeSpecDie) MountOptions(v ...string) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.MountOptions = v
	})
}

// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
func (d *PersistentVolumeSpecDie) VolumeMode(v *corev1.PersistentVolumeMode) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.VolumeMode = v
	})
}

// nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
func (d *PersistentVolumeSpecDie) NodeAffinity(v *corev1.VolumeNodeAffinity) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.NodeAffinity = v
	})
}

var PersistentVolumeStatusBlank = (&PersistentVolumeStatusDie{}).DieFeed(corev1.PersistentVolumeStatus{})

type PersistentVolumeStatusDie struct {
	mutable bool
	r       corev1.PersistentVolumeStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PersistentVolumeStatusDie) DieImmutable(immutable bool) *PersistentVolumeStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PersistentVolumeStatusDie) DieFeed(r corev1.PersistentVolumeStatus) *PersistentVolumeStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PersistentVolumeStatusDie) DieFeedPtr(r *corev1.PersistentVolumeStatus) *PersistentVolumeStatusDie {
	if r == nil {
		r = &corev1.PersistentVolumeStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *PersistentVolumeStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.PersistentVolumeStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PersistentVolumeStatusDie) DieRelease() corev1.PersistentVolumeStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PersistentVolumeStatusDie) DieReleasePtr() *corev1.PersistentVolumeStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PersistentVolumeStatusDie) DieStamp(fn func(r *corev1.PersistentVolumeStatus)) *PersistentVolumeStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PersistentVolumeStatusDie) DeepCopy() *PersistentVolumeStatusDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
func (d *PersistentVolumeStatusDie) Phase(v corev1.PersistentVolumePhase) *PersistentVolumeStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeStatus) {
		r.Phase = v
	})
}

// message is a human-readable message indicating details about why the volume is in this state.
func (d *PersistentVolumeStatusDie) Message(v string) *PersistentVolumeStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeStatus) {
		r.Message = v
	})
}

// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
func (d *PersistentVolumeStatusDie) Reason(v string) *PersistentVolumeStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeStatus) {
		r.Reason = v
	})
}

var GlusterfsPersistentVolumeSourceBlank = (&GlusterfsPersistentVolumeSourceDie{}).DieFeed(corev1.GlusterfsPersistentVolumeSource{})

type GlusterfsPersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.GlusterfsPersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GlusterfsPersistentVolumeSourceDie) DieImmutable(immutable bool) *GlusterfsPersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GlusterfsPersistentVolumeSourceDie) DieFeed(r corev1.GlusterfsPersistentVolumeSource) *GlusterfsPersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GlusterfsPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GlusterfsPersistentVolumeSourceDie) DieFeedPtr(r *corev1.GlusterfsPersistentVolumeSource) *GlusterfsPersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.GlusterfsPersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *GlusterfsPersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *GlusterfsPersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.GlusterfsPersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *GlusterfsPersistentVolumeSourceDie) DieRelease() corev1.GlusterfsPersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GlusterfsPersistentVolumeSourceDie) DieReleasePtr() *corev1.GlusterfsPersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *GlusterfsPersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GlusterfsPersistentVolumeSourceDie) DieStamp(fn func(r *corev1.GlusterfsPersistentVolumeSource)) *GlusterfsPersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GlusterfsPersistentVolumeSourceDie) DeepCopy() *GlusterfsPersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &GlusterfsPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (d *GlusterfsPersistentVolumeSourceDie) EndpointsName(v string) *GlusterfsPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GlusterfsPersistentVolumeSource) {
		r.EndpointsName = v
	})
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (d *GlusterfsPersistentVolumeSourceDie) Path(v string) *GlusterfsPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GlusterfsPersistentVolumeSource) {
		r.Path = v
	})
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (d *GlusterfsPersistentVolumeSourceDie) ReadOnly(v bool) *GlusterfsPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GlusterfsPersistentVolumeSource) {
		r.ReadOnly = v
	})
}

// endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (d *GlusterfsPersistentVolumeSourceDie) EndpointsNamespace(v *string) *GlusterfsPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GlusterfsPersistentVolumeSource) {
		r.EndpointsNamespace = v
	})
}

var RBDPersistentVolumeSourceBlank = (&RBDPersistentVolumeSourceDie{}).DieFeed(corev1.RBDPersistentVolumeSource{})

type RBDPersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.RBDPersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *RBDPersistentVolumeSourceDie) DieImmutable(immutable bool) *RBDPersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *RBDPersistentVolumeSourceDie) DieFeed(r corev1.RBDPersistentVolumeSource) *RBDPersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &RBDPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *RBDPersistentVolumeSourceDie) DieFeedPtr(r *corev1.RBDPersistentVolumeSource) *RBDPersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.RBDPersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *RBDPersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *RBDPersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.RBDPersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *RBDPersistentVolumeSourceDie) DieRelease() corev1.RBDPersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *RBDPersistentVolumeSourceDie) DieReleasePtr() *corev1.RBDPersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *RBDPersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *RBDPersistentVolumeSourceDie) DieStamp(fn func(r *corev1.RBDPersistentVolumeSource)) *RBDPersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *RBDPersistentVolumeSourceDie) DeepCopy() *RBDPersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &RBDPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDPersistentVolumeSourceDie) CephMonitors(v ...string) *RBDPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDPersistentVolumeSource) {
		r.CephMonitors = v
	})
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDPersistentVolumeSourceDie) RBDImage(v string) *RBDPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDPersistentVolumeSource) {
		r.RBDImage = v
	})
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
func (d *RBDPersistentVolumeSourceDie) FSType(v string) *RBDPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDPersistentVolumeSource) {
		r.FSType = v
	})
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDPersistentVolumeSourceDie) RBDPool(v string) *RBDPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDPersistentVolumeSource) {
		r.RBDPool = v
	})
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDPersistentVolumeSourceDie) RadosUser(v string) *RBDPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDPersistentVolumeSource) {
		r.RadosUser = v
	})
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDPersistentVolumeSourceDie) Keyring(v string) *RBDPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDPersistentVolumeSource) {
		r.Keyring = v
	})
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDPersistentVolumeSourceDie) SecretRef(v *corev1.SecretReference) *RBDPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDPersistentVolumeSource) {
		r.SecretRef = v
	})
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDPersistentVolumeSourceDie) ReadOnly(v bool) *RBDPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDPersistentVolumeSource) {
		r.ReadOnly = v
	})
}

var ISCSIPersistentVolumeSourceBlank = (&ISCSIPersistentVolumeSourceDie{}).DieFeed(corev1.ISCSIPersistentVolumeSource{})

type ISCSIPersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.ISCSIPersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ISCSIPersistentVolumeSourceDie) DieImmutable(immutable bool) *ISCSIPersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ISCSIPersistentVolumeSourceDie) DieFeed(r corev1.ISCSIPersistentVolumeSource) *ISCSIPersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ISCSIPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ISCSIPersistentVolumeSourceDie) DieFeedPtr(r *corev1.ISCSIPersistentVolumeSource) *ISCSIPersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.ISCSIPersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ISCSIPersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ISCSIPersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.ISCSIPersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ISCSIPersistentVolumeSourceDie) DieRelease() corev1.ISCSIPersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ISCSIPersistentVolumeSourceDie) DieReleasePtr() *corev1.ISCSIPersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ISCSIPersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ISCSIPersistentVolumeSourceDie) DieStamp(fn func(r *corev1.ISCSIPersistentVolumeSource)) *ISCSIPersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ISCSIPersistentVolumeSourceDie) DeepCopy() *ISCSIPersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &ISCSIPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (d *ISCSIPersistentVolumeSourceDie) TargetPortal(v string) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.TargetPortal = v
	})
}

// iqn is Target iSCSI Qualified Name.
func (d *ISCSIPersistentVolumeSourceDie) IQN(v string) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.IQN = v
	})
}

// lun is iSCSI Target Lun number.
func (d *ISCSIPersistentVolumeSourceDie) Lun(v int32) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.Lun = v
	})
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (d *ISCSIPersistentVolumeSourceDie) ISCSIInterface(v string) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.ISCSIInterface = v
	})
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
func (d *ISCSIPersistentVolumeSourceDie) FSType(v string) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.FSType = v
	})
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (d *ISCSIPersistentVolumeSourceDie) ReadOnly(v bool) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.ReadOnly = v
	})
}

// portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (d *ISCSIPersistentVolumeSourceDie) Portals(v ...string) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.Portals = v
	})
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (d *ISCSIPersistentVolumeSourceDie) DiscoveryCHAPAuth(v bool) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.DiscoveryCHAPAuth = v
	})
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (d *ISCSIPersistentVolumeSourceDie) SessionCHAPAuth(v bool) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.SessionCHAPAuth = v
	})
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (d *ISCSIPersistentVolumeSourceDie) SecretRef(v *corev1.SecretReference) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.SecretRef = v
	})
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (d *ISCSIPersistentVolumeSourceDie) InitiatorName(v *string) *ISCSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIPersistentVolumeSource) {
		r.InitiatorName = v
	})
}

var CinderPersistentVolumeSourceBlank = (&CinderPersistentVolumeSourceDie{}).DieFeed(corev1.CinderPersistentVolumeSource{})

type CinderPersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.CinderPersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CinderPersistentVolumeSourceDie) DieImmutable(immutable bool) *CinderPersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CinderPersistentVolumeSourceDie) DieFeed(r corev1.CinderPersistentVolumeSource) *CinderPersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CinderPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CinderPersistentVolumeSourceDie) DieFeedPtr(r *corev1.CinderPersistentVolumeSource) *CinderPersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.CinderPersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *CinderPersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *CinderPersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.CinderPersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *CinderPersistentVolumeSourceDie) DieRelease() corev1.CinderPersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CinderPersistentVolumeSourceDie) DieReleasePtr() *corev1.CinderPersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *CinderPersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CinderPersistentVolumeSourceDie) DieStamp(fn func(r *corev1.CinderPersistentVolumeSource)) *CinderPersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CinderPersistentVolumeSourceDie) DeepCopy() *CinderPersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &CinderPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (d *CinderPersistentVolumeSourceDie) VolumeID(v string) *CinderPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CinderPersistentVolumeSource) {
		r.VolumeID = v
	})
}

// fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (d *CinderPersistentVolumeSourceDie) FSType(v string) *CinderPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CinderPersistentVolumeSource) {
		r.FSType = v
	})
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (d *CinderPersistentVolumeSourceDie) ReadOnly(v bool) *CinderPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CinderPersistentVolumeSource) {
		r.ReadOnly = v
	})
}

// secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.
func (d *CinderPersistentVolumeSourceDie) SecretRef(v *corev1.SecretReference) *CinderPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CinderPersistentVolumeSource) {
		r.SecretRef = v
	})
}

var CephFSPersistentVolumeSourceBlank = (&CephFSPersistentVolumeSourceDie{}).DieFeed(corev1.CephFSPersistentVolumeSource{})

type CephFSPersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.CephFSPersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CephFSPersistentVolumeSourceDie) DieImmutable(immutable bool) *CephFSPersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CephFSPersistentVolumeSourceDie) DieFeed(r corev1.CephFSPersistentVolumeSource) *CephFSPersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CephFSPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CephFSPersistentVolumeSourceDie) DieFeedPtr(r *corev1.CephFSPersistentVolumeSource) *CephFSPersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.CephFSPersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *CephFSPersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *CephFSPersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.CephFSPersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *CephFSPersistentVolumeSourceDie) DieRelease() corev1.CephFSPersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CephFSPersistentVolumeSourceDie) DieReleasePtr() *corev1.CephFSPersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *CephFSPersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CephFSPersistentVolumeSourceDie) DieStamp(fn func(r *corev1.CephFSPersistentVolumeSource)) *CephFSPersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CephFSPersistentVolumeSourceDie) DeepCopy() *CephFSPersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &CephFSPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSPersistentVolumeSourceDie) Monitors(v ...string) *CephFSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSPersistentVolumeSource) {
		r.Monitors = v
	})
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (d *CephFSPersistentVolumeSourceDie) Path(v string) *CephFSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSPersistentVolumeSource) {
		r.Path = v
	})
}

// user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSPersistentVolumeSourceDie) User(v string) *CephFSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSPersistentVolumeSource) {
		r.User = v
	})
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSPersistentVolumeSourceDie) SecretFile(v string) *CephFSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSPersistentVolumeSource) {
		r.SecretFile = v
	})
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSPersistentVolumeSourceDie) SecretRef(v *corev1.SecretReference) *CephFSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSPersistentVolumeSource) {
		r.SecretRef = v
	})
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSPersistentVolumeSourceDie) ReadOnly(v bool) *CephFSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSPersistentVolumeSource) {
		r.ReadOnly = v
	})
}

var FlexPersistentVolumeSourceBlank = (&FlexPersistentVolumeSourceDie{}).DieFeed(corev1.FlexPersistentVolumeSource{})

type FlexPersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.FlexPersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FlexPersistentVolumeSourceDie) DieImmutable(immutable bool) *FlexPersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FlexPersistentVolumeSourceDie) DieFeed(r corev1.FlexPersistentVolumeSource) *FlexPersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &FlexPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FlexPersistentVolumeSourceDie) DieFeedPtr(r *corev1.FlexPersistentVolumeSource) *FlexPersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.FlexPersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *FlexPersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *FlexPersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.FlexPersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *FlexPersistentVolumeSourceDie) DieRelease() corev1.FlexPersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FlexPersistentVolumeSourceDie) DieReleasePtr() *corev1.FlexPersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *FlexPersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FlexPersistentVolumeSourceDie) DieStamp(fn func(r *corev1.FlexPersistentVolumeSource)) *FlexPersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FlexPersistentVolumeSourceDie) DeepCopy() *FlexPersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &FlexPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// driver is the name of the driver to use for this volume.
func (d *FlexPersistentVolumeSourceDie) Driver(v string) *FlexPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexPersistentVolumeSource) {
		r.Driver = v
	})
}

// fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (d *FlexPersistentVolumeSourceDie) FSType(v string) *FlexPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexPersistentVolumeSource) {
		r.FSType = v
	})
}

// secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (d *FlexPersistentVolumeSourceDie) SecretRef(v *corev1.SecretReference) *FlexPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexPersistentVolumeSource) {
		r.SecretRef = v
	})
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *FlexPersistentVolumeSourceDie) ReadOnly(v bool) *FlexPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexPersistentVolumeSource) {
		r.ReadOnly = v
	})
}

// options is Optional: this field holds extra command options if any.
func (d *FlexPersistentVolumeSourceDie) Options(v map[string]string) *FlexPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexPersistentVolumeSource) {
		r.Options = v
	})
}

var AzureFilePersistentVolumeSourceBlank = (&AzureFilePersistentVolumeSourceDie{}).DieFeed(corev1.AzureFilePersistentVolumeSource{})

type AzureFilePersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.AzureFilePersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *AzureFilePersistentVolumeSourceDie) DieImmutable(immutable bool) *AzureFilePersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *AzureFilePersistentVolumeSourceDie) DieFeed(r corev1.AzureFilePersistentVolumeSource) *AzureFilePersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &AzureFilePersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *AzureFilePersistentVolumeSourceDie) DieFeedPtr(r *corev1.AzureFilePersistentVolumeSource) *AzureFilePersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.AzureFilePersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *AzureFilePersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *AzureFilePersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.AzureFilePersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *AzureFilePersistentVolumeSourceDie) DieRelease() corev1.AzureFilePersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *AzureFilePersistentVolumeSourceDie) DieReleasePtr() *corev1.AzureFilePersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *AzureFilePersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *AzureFilePersistentVolumeSourceDie) DieStamp(fn func(r *corev1.AzureFilePersistentVolumeSource)) *AzureFilePersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *AzureFilePersistentVolumeSourceDie) DeepCopy() *AzureFilePersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &AzureFilePersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// secretName is the name of secret that contains Azure Storage Account Name and Key
func (d *AzureFilePersistentVolumeSourceDie) SecretName(v string) *AzureFilePersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureFilePersistentVolumeSource) {
		r.SecretName = v
	})
}

// shareName is the azure Share Name
func (d *AzureFilePersistentVolumeSourceDie) ShareName(v string) *AzureFilePersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureFilePersistentVolumeSource) {
		r.ShareName = v
	})
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *AzureFilePersistentVolumeSourceDie) ReadOnly(v bool) *AzureFilePersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureFilePersistentVolumeSource) {
		r.ReadOnly = v
	})
}

// secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
func (d *AzureFilePersistentVolumeSourceDie) SecretNamespace(v *string) *AzureFilePersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureFilePersistentVolumeSource) {
		r.SecretNamespace = v
	})
}

var ScaleIOPersistentVolumeSourceBlank = (&ScaleIOPersistentVolumeSourceDie{}).DieFeed(corev1.ScaleIOPersistentVolumeSource{})

type ScaleIOPersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.ScaleIOPersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ScaleIOPersistentVolumeSourceDie) DieImmutable(immutable bool) *ScaleIOPersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ScaleIOPersistentVolumeSourceDie) DieFeed(r corev1.ScaleIOPersistentVolumeSource) *ScaleIOPersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ScaleIOPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ScaleIOPersistentVolumeSourceDie) DieFeedPtr(r *corev1.ScaleIOPersistentVolumeSource) *ScaleIOPersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.ScaleIOPersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ScaleIOPersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ScaleIOPersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.ScaleIOPersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ScaleIOPersistentVolumeSourceDie) DieRelease() corev1.ScaleIOPersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ScaleIOPersistentVolumeSourceDie) DieReleasePtr() *corev1.ScaleIOPersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ScaleIOPersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ScaleIOPersistentVolumeSourceDie) DieStamp(fn func(r *corev1.ScaleIOPersistentVolumeSource)) *ScaleIOPersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ScaleIOPersistentVolumeSourceDie) DeepCopy() *ScaleIOPersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &ScaleIOPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// gateway is the host address of the ScaleIO API Gateway.
func (d *ScaleIOPersistentVolumeSourceDie) Gateway(v string) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.Gateway = v
	})
}

// system is the name of the storage system as configured in ScaleIO.
func (d *ScaleIOPersistentVolumeSourceDie) System(v string) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.System = v
	})
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (d *ScaleIOPersistentVolumeSourceDie) SecretRef(v *corev1.SecretReference) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.SecretRef = v
	})
}

// sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
func (d *ScaleIOPersistentVolumeSourceDie) SSLEnabled(v bool) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.SSLEnabled = v
	})
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (d *ScaleIOPersistentVolumeSourceDie) ProtectionDomain(v string) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.ProtectionDomain = v
	})
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (d *ScaleIOPersistentVolumeSourceDie) StoragePool(v string) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.StoragePool = v
	})
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (d *ScaleIOPersistentVolumeSourceDie) StorageMode(v string) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.StorageMode = v
	})
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (d *ScaleIOPersistentVolumeSourceDie) VolumeName(v string) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.VolumeName = v
	})
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
func (d *ScaleIOPersistentVolumeSourceDie) FSType(v string) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.FSType = v
	})
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *ScaleIOPersistentVolumeSourceDie) ReadOnly(v bool) *ScaleIOPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOPersistentVolumeSource) {
		r.ReadOnly = v
	})
}

var LocalVolumeSourceBlank = (&LocalVolumeSourceDie{}).DieFeed(corev1.LocalVolumeSource{})

type LocalVolumeSourceDie struct {
	mutable bool
	r       corev1.LocalVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LocalVolumeSourceDie) DieImmutable(immutable bool) *LocalVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LocalVolumeSourceDie) DieFeed(r corev1.LocalVolumeSource) *LocalVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LocalVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LocalVolumeSourceDie) DieFeedPtr(r *corev1.LocalVolumeSource) *LocalVolumeSourceDie {
	if r == nil {
		r = &corev1.LocalVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *LocalVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *LocalVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.LocalVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *LocalVolumeSourceDie) DieRelease() corev1.LocalVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LocalVolumeSourceDie) DieReleasePtr() *corev1.LocalVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *LocalVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LocalVolumeSourceDie) DieStamp(fn func(r *corev1.LocalVolumeSource)) *LocalVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LocalVolumeSourceDie) DeepCopy() *LocalVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &LocalVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
func (d *LocalVolumeSourceDie) Path(v string) *LocalVolumeSourceDie {
	return d.DieStamp(func(r *corev1.LocalVolumeSource) {
		r.Path = v
	})
}

// fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
func (d *LocalVolumeSourceDie) FSType(v *string) *LocalVolumeSourceDie {
	return d.DieStamp(func(r *corev1.LocalVolumeSource) {
		r.FSType = v
	})
}

var StorageOSPersistentVolumeSourceBlank = (&StorageOSPersistentVolumeSourceDie{}).DieFeed(corev1.StorageOSPersistentVolumeSource{})

type StorageOSPersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.StorageOSPersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *StorageOSPersistentVolumeSourceDie) DieImmutable(immutable bool) *StorageOSPersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *StorageOSPersistentVolumeSourceDie) DieFeed(r corev1.StorageOSPersistentVolumeSource) *StorageOSPersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &StorageOSPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *StorageOSPersistentVolumeSourceDie) DieFeedPtr(r *corev1.StorageOSPersistentVolumeSource) *StorageOSPersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.StorageOSPersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *StorageOSPersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *StorageOSPersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.StorageOSPersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *StorageOSPersistentVolumeSourceDie) DieRelease() corev1.StorageOSPersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *StorageOSPersistentVolumeSourceDie) DieReleasePtr() *corev1.StorageOSPersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *StorageOSPersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *StorageOSPersistentVolumeSourceDie) DieStamp(fn func(r *corev1.StorageOSPersistentVolumeSource)) *StorageOSPersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *StorageOSPersistentVolumeSourceDie) DeepCopy() *StorageOSPersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &StorageOSPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (d *StorageOSPersistentVolumeSourceDie) VolumeName(v string) *StorageOSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSPersistentVolumeSource) {
		r.VolumeName = v
	})
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (d *StorageOSPersistentVolumeSourceDie) VolumeNamespace(v string) *StorageOSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSPersistentVolumeSource) {
		r.VolumeNamespace = v
	})
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (d *StorageOSPersistentVolumeSourceDie) FSType(v string) *StorageOSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSPersistentVolumeSource) {
		r.FSType = v
	})
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *StorageOSPersistentVolumeSourceDie) ReadOnly(v bool) *StorageOSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSPersistentVolumeSource) {
		r.ReadOnly = v
	})
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (d *StorageOSPersistentVolumeSourceDie) SecretRef(v *corev1.ObjectReference) *StorageOSPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSPersistentVolumeSource) {
		r.SecretRef = v
	})
}

var CSIPersistentVolumeSourceBlank = (&CSIPersistentVolumeSourceDie{}).DieFeed(corev1.CSIPersistentVolumeSource{})

type CSIPersistentVolumeSourceDie struct {
	mutable bool
	r       corev1.CSIPersistentVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CSIPersistentVolumeSourceDie) DieImmutable(immutable bool) *CSIPersistentVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CSIPersistentVolumeSourceDie) DieFeed(r corev1.CSIPersistentVolumeSource) *CSIPersistentVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CSIPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CSIPersistentVolumeSourceDie) DieFeedPtr(r *corev1.CSIPersistentVolumeSource) *CSIPersistentVolumeSourceDie {
	if r == nil {
		r = &corev1.CSIPersistentVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *CSIPersistentVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *CSIPersistentVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.CSIPersistentVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *CSIPersistentVolumeSourceDie) DieRelease() corev1.CSIPersistentVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CSIPersistentVolumeSourceDie) DieReleasePtr() *corev1.CSIPersistentVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *CSIPersistentVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CSIPersistentVolumeSourceDie) DieStamp(fn func(r *corev1.CSIPersistentVolumeSource)) *CSIPersistentVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CSIPersistentVolumeSourceDie) DeepCopy() *CSIPersistentVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &CSIPersistentVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// driver is the name of the driver to use for this volume. Required.
func (d *CSIPersistentVolumeSourceDie) Driver(v string) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.Driver = v
	})
}

// volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
func (d *CSIPersistentVolumeSourceDie) VolumeHandle(v string) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.VolumeHandle = v
	})
}

// readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
func (d *CSIPersistentVolumeSourceDie) ReadOnly(v bool) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.ReadOnly = v
	})
}

// fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
func (d *CSIPersistentVolumeSourceDie) FSType(v string) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.FSType = v
	})
}

// volumeAttributes of the volume to publish.
func (d *CSIPersistentVolumeSourceDie) VolumeAttributes(v map[string]string) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.VolumeAttributes = v
	})
}

// controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (d *CSIPersistentVolumeSourceDie) ControllerPublishSecretRef(v *corev1.SecretReference) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.ControllerPublishSecretRef = v
	})
}

// nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (d *CSIPersistentVolumeSourceDie) NodeStageSecretRef(v *corev1.SecretReference) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.NodeStageSecretRef = v
	})
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (d *CSIPersistentVolumeSourceDie) NodePublishSecretRef(v *corev1.SecretReference) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.NodePublishSecretRef = v
	})
}

// controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an beta field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (d *CSIPersistentVolumeSourceDie) ControllerExpandSecretRef(v *corev1.SecretReference) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.ControllerExpandSecretRef = v
	})
}

// nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is an alpha field and requires enabling CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
func (d *CSIPersistentVolumeSourceDie) NodeExpandSecretRef(v *corev1.SecretReference) *CSIPersistentVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIPersistentVolumeSource) {
		r.NodeExpandSecretRef = v
	})
}

var VolumeNodeAffinityBlank = (&VolumeNodeAffinityDie{}).DieFeed(corev1.VolumeNodeAffinity{})

type VolumeNodeAffinityDie struct {
	mutable bool
	r       corev1.VolumeNodeAffinity
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeNodeAffinityDie) DieImmutable(immutable bool) *VolumeNodeAffinityDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeNodeAffinityDie) DieFeed(r corev1.VolumeNodeAffinity) *VolumeNodeAffinityDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeNodeAffinityDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeNodeAffinityDie) DieFeedPtr(r *corev1.VolumeNodeAffinity) *VolumeNodeAffinityDie {
	if r == nil {
		r = &corev1.VolumeNodeAffinity{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeNodeAffinityDie) DieFeedRawExtension(raw runtime.RawExtension) *VolumeNodeAffinityDie {
	b, _ := json.Marshal(raw)
	r := corev1.VolumeNodeAffinity{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeNodeAffinityDie) DieRelease() corev1.VolumeNodeAffinity {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeNodeAffinityDie) DieReleasePtr() *corev1.VolumeNodeAffinity {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeNodeAffinityDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeNodeAffinityDie) DieStamp(fn func(r *corev1.VolumeNodeAffinity)) *VolumeNodeAffinityDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeNodeAffinityDie) DeepCopy() *VolumeNodeAffinityDie {
	r := *d.r.DeepCopy()
	return &VolumeNodeAffinityDie{
		mutable: d.mutable,
		r:       r,
	}
}

// required specifies hard node constraints that must be met.
func (d *VolumeNodeAffinityDie) Required(v *corev1.NodeSelector) *VolumeNodeAffinityDie {
	return d.DieStamp(func(r *corev1.VolumeNodeAffinity) {
		r.Required = v
	})
}

var NodeSelectorBlank = (&NodeSelectorDie{}).DieFeed(corev1.NodeSelector{})

type NodeSelectorDie struct {
	mutable bool
	r       corev1.NodeSelector
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeSelectorDie) DieImmutable(immutable bool) *NodeSelectorDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeSelectorDie) DieFeed(r corev1.NodeSelector) *NodeSelectorDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeSelectorDie) DieFeedPtr(r *corev1.NodeSelector) *NodeSelectorDie {
	if r == nil {
		r = &corev1.NodeSelector{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSelectorDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeSelectorDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeSelector{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeSelectorDie) DieRelease() corev1.NodeSelector {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeSelectorDie) DieReleasePtr() *corev1.NodeSelector {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSelectorDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeSelectorDie) DieStamp(fn func(r *corev1.NodeSelector)) *NodeSelectorDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeSelectorDie) DeepCopy() *NodeSelectorDie {
	r := *d.r.DeepCopy()
	return &NodeSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Required. A list of node selector terms. The terms are ORed.
func (d *NodeSelectorDie) NodeSelectorTerms(v ...corev1.NodeSelectorTerm) *NodeSelectorDie {
	return d.DieStamp(func(r *corev1.NodeSelector) {
		r.NodeSelectorTerms = v
	})
}

var NodeSelectorTermBlank = (&NodeSelectorTermDie{}).DieFeed(corev1.NodeSelectorTerm{})

type NodeSelectorTermDie struct {
	mutable bool
	r       corev1.NodeSelectorTerm
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeSelectorTermDie) DieImmutable(immutable bool) *NodeSelectorTermDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeSelectorTermDie) DieFeed(r corev1.NodeSelectorTerm) *NodeSelectorTermDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeSelectorTermDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeSelectorTermDie) DieFeedPtr(r *corev1.NodeSelectorTerm) *NodeSelectorTermDie {
	if r == nil {
		r = &corev1.NodeSelectorTerm{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSelectorTermDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeSelectorTermDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeSelectorTerm{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeSelectorTermDie) DieRelease() corev1.NodeSelectorTerm {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeSelectorTermDie) DieReleasePtr() *corev1.NodeSelectorTerm {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSelectorTermDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeSelectorTermDie) DieStamp(fn func(r *corev1.NodeSelectorTerm)) *NodeSelectorTermDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeSelectorTermDie) DeepCopy() *NodeSelectorTermDie {
	r := *d.r.DeepCopy()
	return &NodeSelectorTermDie{
		mutable: d.mutable,
		r:       r,
	}
}

// A list of node selector requirements by node's labels.
func (d *NodeSelectorTermDie) MatchExpressions(v ...corev1.NodeSelectorRequirement) *NodeSelectorTermDie {
	return d.DieStamp(func(r *corev1.NodeSelectorTerm) {
		r.MatchExpressions = v
	})
}

// A list of node selector requirements by node's fields.
func (d *NodeSelectorTermDie) MatchFields(v ...corev1.NodeSelectorRequirement) *NodeSelectorTermDie {
	return d.DieStamp(func(r *corev1.NodeSelectorTerm) {
		r.MatchFields = v
	})
}

var NodeSelectorRequirementBlank = (&NodeSelectorRequirementDie{}).DieFeed(corev1.NodeSelectorRequirement{})

type NodeSelectorRequirementDie struct {
	mutable bool
	r       corev1.NodeSelectorRequirement
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NodeSelectorRequirementDie) DieImmutable(immutable bool) *NodeSelectorRequirementDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NodeSelectorRequirementDie) DieFeed(r corev1.NodeSelectorRequirement) *NodeSelectorRequirementDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeSelectorRequirementDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NodeSelectorRequirementDie) DieFeedPtr(r *corev1.NodeSelectorRequirement) *NodeSelectorRequirementDie {
	if r == nil {
		r = &corev1.NodeSelectorRequirement{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSelectorRequirementDie) DieFeedRawExtension(raw runtime.RawExtension) *NodeSelectorRequirementDie {
	b, _ := json.Marshal(raw)
	r := corev1.NodeSelectorRequirement{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NodeSelectorRequirementDie) DieRelease() corev1.NodeSelectorRequirement {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NodeSelectorRequirementDie) DieReleasePtr() *corev1.NodeSelectorRequirement {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NodeSelectorRequirementDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NodeSelectorRequirementDie) DieStamp(fn func(r *corev1.NodeSelectorRequirement)) *NodeSelectorRequirementDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NodeSelectorRequirementDie) DeepCopy() *NodeSelectorRequirementDie {
	r := *d.r.DeepCopy()
	return &NodeSelectorRequirementDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The label key that the selector applies to.
func (d *NodeSelectorRequirementDie) Key(v string) *NodeSelectorRequirementDie {
	return d.DieStamp(func(r *corev1.NodeSelectorRequirement) {
		r.Key = v
	})
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (d *NodeSelectorRequirementDie) Operator(v corev1.NodeSelectorOperator) *NodeSelectorRequirementDie {
	return d.DieStamp(func(r *corev1.NodeSelectorRequirement) {
		r.Operator = v
	})
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (d *NodeSelectorRequirementDie) Values(v ...string) *NodeSelectorRequirementDie {
	return d.DieStamp(func(r *corev1.NodeSelectorRequirement) {
		r.Values = v
	})
}

var PersistentVolumeClaimBlank = (&PersistentVolumeClaimDie{}).DieFeed(corev1.PersistentVolumeClaim{})

type PersistentVolumeClaimDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.PersistentVolumeClaim
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PersistentVolumeClaimDie) DieImmutable(immutable bool) *PersistentVolumeClaimDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PersistentVolumeClaimDie) DieFeed(r corev1.PersistentVolumeClaim) *PersistentVolumeClaimDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &PersistentVolumeClaimDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PersistentVolumeClaimDie) DieFeedPtr(r *corev1.PersistentVolumeClaim) *PersistentVolumeClaimDie {
	if r == nil {
		r = &corev1.PersistentVolumeClaim{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimDie) DieFeedRawExtension(raw runtime.RawExtension) *PersistentVolumeClaimDie {
	b, _ := json.Marshal(raw)
	r := corev1.PersistentVolumeClaim{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PersistentVolumeClaimDie) DieRelease() corev1.PersistentVolumeClaim {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PersistentVolumeClaimDie) DieReleasePtr() *corev1.PersistentVolumeClaim {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *PersistentVolumeClaimDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PersistentVolumeClaimDie) DieStamp(fn func(r *corev1.PersistentVolumeClaim)) *PersistentVolumeClaimDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PersistentVolumeClaimDie) DeepCopy() *PersistentVolumeClaimDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeClaimDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*PersistentVolumeClaimDie)(nil)

func (d *PersistentVolumeClaimDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *PersistentVolumeClaimDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *PersistentVolumeClaimDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *PersistentVolumeClaimDie) UnmarshalJSON(b []byte) error {
	if d == PersistentVolumeClaimBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.PersistentVolumeClaim{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *PersistentVolumeClaimDie) APIVersion(v string) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *PersistentVolumeClaimDie) Kind(v string) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *PersistentVolumeClaimDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *PersistentVolumeClaimDie) SpecDie(fn func(d *PersistentVolumeClaimSpecDie)) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		d := PersistentVolumeClaimSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *PersistentVolumeClaimDie) StatusDie(fn func(d *PersistentVolumeClaimStatusDie)) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		d := PersistentVolumeClaimStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (d *PersistentVolumeClaimDie) Spec(v corev1.PersistentVolumeClaimSpec) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		r.Spec = v
	})
}

// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (d *PersistentVolumeClaimDie) Status(v corev1.PersistentVolumeClaimStatus) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		r.Status = v
	})
}

var PersistentVolumeClaimSpecBlank = (&PersistentVolumeClaimSpecDie{}).DieFeed(corev1.PersistentVolumeClaimSpec{})

type PersistentVolumeClaimSpecDie struct {
	mutable bool
	r       corev1.PersistentVolumeClaimSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PersistentVolumeClaimSpecDie) DieImmutable(immutable bool) *PersistentVolumeClaimSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PersistentVolumeClaimSpecDie) DieFeed(r corev1.PersistentVolumeClaimSpec) *PersistentVolumeClaimSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeClaimSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PersistentVolumeClaimSpecDie) DieFeedPtr(r *corev1.PersistentVolumeClaimSpec) *PersistentVolumeClaimSpecDie {
	if r == nil {
		r = &corev1.PersistentVolumeClaimSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *PersistentVolumeClaimSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.PersistentVolumeClaimSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PersistentVolumeClaimSpecDie) DieRelease() corev1.PersistentVolumeClaimSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PersistentVolumeClaimSpecDie) DieReleasePtr() *corev1.PersistentVolumeClaimSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PersistentVolumeClaimSpecDie) DieStamp(fn func(r *corev1.PersistentVolumeClaimSpec)) *PersistentVolumeClaimSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PersistentVolumeClaimSpecDie) DeepCopy() *PersistentVolumeClaimSpecDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeClaimSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (d *PersistentVolumeClaimSpecDie) AccessModes(v ...corev1.PersistentVolumeAccessMode) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.AccessModes = v
	})
}

// selector is a label query over volumes to consider for binding.
func (d *PersistentVolumeClaimSpecDie) Selector(v *apismetav1.LabelSelector) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.Selector = v
	})
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (d *PersistentVolumeClaimSpecDie) Resources(v corev1.ResourceRequirements) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.Resources = v
	})
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (d *PersistentVolumeClaimSpecDie) VolumeName(v string) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.VolumeName = v
	})
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (d *PersistentVolumeClaimSpecDie) StorageClassName(v *string) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.StorageClassName = v
	})
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (d *PersistentVolumeClaimSpecDie) VolumeMode(v *corev1.PersistentVolumeMode) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.VolumeMode = v
	})
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
func (d *PersistentVolumeClaimSpecDie) DataSource(v *corev1.TypedLocalObjectReference) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.DataSource = v
	})
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
func (d *PersistentVolumeClaimSpecDie) DataSourceRef(v *corev1.TypedLocalObjectReference) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.DataSourceRef = v
	})
}

var PersistentVolumeClaimStatusBlank = (&PersistentVolumeClaimStatusDie{}).DieFeed(corev1.PersistentVolumeClaimStatus{})

type PersistentVolumeClaimStatusDie struct {
	mutable bool
	r       corev1.PersistentVolumeClaimStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PersistentVolumeClaimStatusDie) DieImmutable(immutable bool) *PersistentVolumeClaimStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PersistentVolumeClaimStatusDie) DieFeed(r corev1.PersistentVolumeClaimStatus) *PersistentVolumeClaimStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeClaimStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PersistentVolumeClaimStatusDie) DieFeedPtr(r *corev1.PersistentVolumeClaimStatus) *PersistentVolumeClaimStatusDie {
	if r == nil {
		r = &corev1.PersistentVolumeClaimStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *PersistentVolumeClaimStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.PersistentVolumeClaimStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PersistentVolumeClaimStatusDie) DieRelease() corev1.PersistentVolumeClaimStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PersistentVolumeClaimStatusDie) DieReleasePtr() *corev1.PersistentVolumeClaimStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PersistentVolumeClaimStatusDie) DieStamp(fn func(r *corev1.PersistentVolumeClaimStatus)) *PersistentVolumeClaimStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PersistentVolumeClaimStatusDie) DeepCopy() *PersistentVolumeClaimStatusDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeClaimStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// phase represents the current phase of PersistentVolumeClaim.
func (d *PersistentVolumeClaimStatusDie) Phase(v corev1.PersistentVolumeClaimPhase) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.Phase = v
	})
}

// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (d *PersistentVolumeClaimStatusDie) AccessModes(v ...corev1.PersistentVolumeAccessMode) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.AccessModes = v
	})
}

// capacity represents the actual resources of the underlying volume.
func (d *PersistentVolumeClaimStatusDie) Capacity(v corev1.ResourceList) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.Capacity = v
	})
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
func (d *PersistentVolumeClaimStatusDie) Conditions(v ...corev1.PersistentVolumeClaimCondition) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.Conditions = v
	})
}

// allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (d *PersistentVolumeClaimStatusDie) AllocatedResources(v corev1.ResourceList) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.AllocatedResources = v
	})
}

// resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (d *PersistentVolumeClaimStatusDie) ResizeStatus(v *corev1.PersistentVolumeClaimResizeStatus) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.ResizeStatus = v
	})
}

var PersistentVolumeClaimTemplateBlank = (&PersistentVolumeClaimTemplateDie{}).DieFeed(corev1.PersistentVolumeClaimTemplate{})

type PersistentVolumeClaimTemplateDie struct {
	mutable bool
	r       corev1.PersistentVolumeClaimTemplate
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PersistentVolumeClaimTemplateDie) DieImmutable(immutable bool) *PersistentVolumeClaimTemplateDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PersistentVolumeClaimTemplateDie) DieFeed(r corev1.PersistentVolumeClaimTemplate) *PersistentVolumeClaimTemplateDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeClaimTemplateDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PersistentVolumeClaimTemplateDie) DieFeedPtr(r *corev1.PersistentVolumeClaimTemplate) *PersistentVolumeClaimTemplateDie {
	if r == nil {
		r = &corev1.PersistentVolumeClaimTemplate{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimTemplateDie) DieFeedRawExtension(raw runtime.RawExtension) *PersistentVolumeClaimTemplateDie {
	b, _ := json.Marshal(raw)
	r := corev1.PersistentVolumeClaimTemplate{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PersistentVolumeClaimTemplateDie) DieRelease() corev1.PersistentVolumeClaimTemplate {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PersistentVolumeClaimTemplateDie) DieReleasePtr() *corev1.PersistentVolumeClaimTemplate {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimTemplateDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PersistentVolumeClaimTemplateDie) DieStamp(fn func(r *corev1.PersistentVolumeClaimTemplate)) *PersistentVolumeClaimTemplateDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PersistentVolumeClaimTemplateDie) DeepCopy() *PersistentVolumeClaimTemplateDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeClaimTemplateDie{
		mutable: d.mutable,
		r:       r,
	}
}

// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (d *PersistentVolumeClaimTemplateDie) ObjectMeta(v apismetav1.ObjectMeta) *PersistentVolumeClaimTemplateDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimTemplate) {
		r.ObjectMeta = v
	})
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
func (d *PersistentVolumeClaimTemplateDie) Spec(v corev1.PersistentVolumeClaimSpec) *PersistentVolumeClaimTemplateDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimTemplate) {
		r.Spec = v
	})
}

var PodBlank = (&PodDie{}).DieFeed(corev1.Pod{})

type PodDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Pod
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodDie) DieImmutable(immutable bool) *PodDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodDie) DieFeed(r corev1.Pod) *PodDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &PodDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodDie) DieFeedPtr(r *corev1.Pod) *PodDie {
	if r == nil {
		r = &corev1.Pod{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodDie) DieFeedRawExtension(raw runtime.RawExtension) *PodDie {
	b, _ := json.Marshal(raw)
	r := corev1.Pod{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodDie) DieRelease() corev1.Pod {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodDie) DieReleasePtr() *corev1.Pod {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *PodDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodDie) DieStamp(fn func(r *corev1.Pod)) *PodDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodDie) DeepCopy() *PodDie {
	r := *d.r.DeepCopy()
	return &PodDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*PodDie)(nil)

func (d *PodDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *PodDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *PodDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *PodDie) UnmarshalJSON(b []byte) error {
	if d == PodBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.Pod{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *PodDie) APIVersion(v string) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *PodDie) Kind(v string) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *PodDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *PodDie) SpecDie(fn func(d *PodSpecDie)) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		d := PodSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *PodDie) StatusDie(fn func(d *PodStatusDie)) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		d := PodStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *PodDie) Spec(v corev1.PodSpec) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		r.Spec = v
	})
}

// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *PodDie) Status(v corev1.PodStatus) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		r.Status = v
	})
}

var PodSpecBlank = (&PodSpecDie{}).DieFeed(corev1.PodSpec{})

type PodSpecDie struct {
	mutable bool
	r       corev1.PodSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodSpecDie) DieImmutable(immutable bool) *PodSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodSpecDie) DieFeed(r corev1.PodSpec) *PodSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodSpecDie) DieFeedPtr(r *corev1.PodSpec) *PodSpecDie {
	if r == nil {
		r = &corev1.PodSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *PodSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.PodSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodSpecDie) DieRelease() corev1.PodSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodSpecDie) DieReleasePtr() *corev1.PodSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodSpecDie) DieStamp(fn func(r *corev1.PodSpec)) *PodSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodSpecDie) DeepCopy() *PodSpecDie {
	r := *d.r.DeepCopy()
	return &PodSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
func (d *PodSpecDie) Volumes(v ...corev1.Volume) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Volumes = v
	})
}

// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
func (d *PodSpecDie) InitContainers(v ...corev1.Container) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.InitContainers = v
	})
}

// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
func (d *PodSpecDie) Containers(v ...corev1.Container) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Containers = v
	})
}

// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
func (d *PodSpecDie) EphemeralContainers(v ...corev1.EphemeralContainer) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.EphemeralContainers = v
	})
}

// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
func (d *PodSpecDie) RestartPolicy(v corev1.RestartPolicy) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.RestartPolicy = v
	})
}

// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
func (d *PodSpecDie) TerminationGracePeriodSeconds(v *int64) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.TerminationGracePeriodSeconds = v
	})
}

// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
func (d *PodSpecDie) ActiveDeadlineSeconds(v *int64) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ActiveDeadlineSeconds = v
	})
}

// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
func (d *PodSpecDie) DNSPolicy(v corev1.DNSPolicy) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.DNSPolicy = v
	})
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
func (d *PodSpecDie) NodeSelector(v map[string]string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.NodeSelector = v
	})
}

// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
func (d *PodSpecDie) ServiceAccountName(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ServiceAccountName = v
	})
}

// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
func (d *PodSpecDie) DeprecatedServiceAccount(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.DeprecatedServiceAccount = v
	})
}

// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
func (d *PodSpecDie) AutomountServiceAccountToken(v *bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.AutomountServiceAccountToken = v
	})
}

// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
func (d *PodSpecDie) NodeName(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.NodeName = v
	})
}

// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
func (d *PodSpecDie) HostNetwork(v bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.HostNetwork = v
	})
}

// Use the host's pid namespace. Optional: Default to false.
func (d *PodSpecDie) HostPID(v bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.HostPID = v
	})
}

// Use the host's ipc namespace. Optional: Default to false.
func (d *PodSpecDie) HostIPC(v bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.HostIPC = v
	})
}

// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
func (d *PodSpecDie) ShareProcessNamespace(v *bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ShareProcessNamespace = v
	})
}

// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
func (d *PodSpecDie) SecurityContext(v *corev1.PodSecurityContext) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.SecurityContext = v
	})
}

// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
func (d *PodSpecDie) ImagePullSecrets(v ...corev1.LocalObjectReference) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ImagePullSecrets = v
	})
}

// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
func (d *PodSpecDie) Hostname(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Hostname = v
	})
}

// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
func (d *PodSpecDie) Subdomain(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Subdomain = v
	})
}

// If specified, the pod's scheduling constraints
func (d *PodSpecDie) Affinity(v *corev1.Affinity) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Affinity = v
	})
}

// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
func (d *PodSpecDie) SchedulerName(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.SchedulerName = v
	})
}

// If specified, the pod's tolerations.
func (d *PodSpecDie) Tolerations(v ...corev1.Toleration) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Tolerations = v
	})
}

// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
func (d *PodSpecDie) HostAliases(v ...corev1.HostAlias) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.HostAliases = v
	})
}

// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
func (d *PodSpecDie) PriorityClassName(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.PriorityClassName = v
	})
}

// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
func (d *PodSpecDie) Priority(v *int32) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Priority = v
	})
}

// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
func (d *PodSpecDie) DNSConfig(v *corev1.PodDNSConfig) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.DNSConfig = v
	})
}

// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
func (d *PodSpecDie) ReadinessGates(v ...corev1.PodReadinessGate) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ReadinessGates = v
	})
}

// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
func (d *PodSpecDie) RuntimeClassName(v *string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.RuntimeClassName = v
	})
}

// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
func (d *PodSpecDie) EnableServiceLinks(v *bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.EnableServiceLinks = v
	})
}

// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
func (d *PodSpecDie) PreemptionPolicy(v *corev1.PreemptionPolicy) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.PreemptionPolicy = v
	})
}

// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
func (d *PodSpecDie) Overhead(v corev1.ResourceList) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Overhead = v
	})
}

// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
func (d *PodSpecDie) TopologySpreadConstraints(v ...corev1.TopologySpreadConstraint) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.TopologySpreadConstraints = v
	})
}

// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
func (d *PodSpecDie) SetHostnameAsFQDN(v *bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.SetHostnameAsFQDN = v
	})
}

// Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
//
// If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
//
// If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
func (d *PodSpecDie) OS(v *corev1.PodOS) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.OS = v
	})
}

// Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
func (d *PodSpecDie) HostUsers(v *bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.HostUsers = v
	})
}

var PodSecurityContextBlank = (&PodSecurityContextDie{}).DieFeed(corev1.PodSecurityContext{})

type PodSecurityContextDie struct {
	mutable bool
	r       corev1.PodSecurityContext
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodSecurityContextDie) DieImmutable(immutable bool) *PodSecurityContextDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodSecurityContextDie) DieFeed(r corev1.PodSecurityContext) *PodSecurityContextDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodSecurityContextDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodSecurityContextDie) DieFeedPtr(r *corev1.PodSecurityContext) *PodSecurityContextDie {
	if r == nil {
		r = &corev1.PodSecurityContext{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodSecurityContextDie) DieFeedRawExtension(raw runtime.RawExtension) *PodSecurityContextDie {
	b, _ := json.Marshal(raw)
	r := corev1.PodSecurityContext{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodSecurityContextDie) DieRelease() corev1.PodSecurityContext {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodSecurityContextDie) DieReleasePtr() *corev1.PodSecurityContext {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodSecurityContextDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodSecurityContextDie) DieStamp(fn func(r *corev1.PodSecurityContext)) *PodSecurityContextDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodSecurityContextDie) DeepCopy() *PodSecurityContextDie {
	r := *d.r.DeepCopy()
	return &PodSecurityContextDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (d *PodSecurityContextDie) SELinuxOptions(v *corev1.SELinuxOptions) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.SELinuxOptions = v
	})
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (d *PodSecurityContextDie) WindowsOptions(v *corev1.WindowsSecurityContextOptions) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.WindowsOptions = v
	})
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (d *PodSecurityContextDie) RunAsUser(v *int64) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.RunAsUser = v
	})
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (d *PodSecurityContextDie) RunAsGroup(v *int64) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.RunAsGroup = v
	})
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (d *PodSecurityContextDie) RunAsNonRoot(v *bool) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.RunAsNonRoot = v
	})
}

// A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
func (d *PodSecurityContextDie) SupplementalGroups(v ...int64) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.SupplementalGroups = v
	})
}

// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
//
// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
//
// If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
func (d *PodSecurityContextDie) FSGroup(v *int64) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.FSGroup = v
	})
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
func (d *PodSecurityContextDie) Sysctls(v ...corev1.Sysctl) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.Sysctls = v
	})
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
func (d *PodSecurityContextDie) FSGroupChangePolicy(v *corev1.PodFSGroupChangePolicy) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.FSGroupChangePolicy = v
	})
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
func (d *PodSecurityContextDie) SeccompProfile(v *corev1.SeccompProfile) *PodSecurityContextDie {
	return d.DieStamp(func(r *corev1.PodSecurityContext) {
		r.SeccompProfile = v
	})
}

var SysctlBlank = (&SysctlDie{}).DieFeed(corev1.Sysctl{})

type SysctlDie struct {
	mutable bool
	r       corev1.Sysctl
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SysctlDie) DieImmutable(immutable bool) *SysctlDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SysctlDie) DieFeed(r corev1.Sysctl) *SysctlDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SysctlDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SysctlDie) DieFeedPtr(r *corev1.Sysctl) *SysctlDie {
	if r == nil {
		r = &corev1.Sysctl{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SysctlDie) DieFeedRawExtension(raw runtime.RawExtension) *SysctlDie {
	b, _ := json.Marshal(raw)
	r := corev1.Sysctl{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SysctlDie) DieRelease() corev1.Sysctl {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SysctlDie) DieReleasePtr() *corev1.Sysctl {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SysctlDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SysctlDie) DieStamp(fn func(r *corev1.Sysctl)) *SysctlDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SysctlDie) DeepCopy() *SysctlDie {
	r := *d.r.DeepCopy()
	return &SysctlDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name of a property to set
func (d *SysctlDie) Name(v string) *SysctlDie {
	return d.DieStamp(func(r *corev1.Sysctl) {
		r.Name = v
	})
}

// Value of a property to set
func (d *SysctlDie) Value(v string) *SysctlDie {
	return d.DieStamp(func(r *corev1.Sysctl) {
		r.Value = v
	})
}

var TolerationBlank = (&TolerationDie{}).DieFeed(corev1.Toleration{})

type TolerationDie struct {
	mutable bool
	r       corev1.Toleration
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *TolerationDie) DieImmutable(immutable bool) *TolerationDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *TolerationDie) DieFeed(r corev1.Toleration) *TolerationDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &TolerationDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *TolerationDie) DieFeedPtr(r *corev1.Toleration) *TolerationDie {
	if r == nil {
		r = &corev1.Toleration{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *TolerationDie) DieFeedRawExtension(raw runtime.RawExtension) *TolerationDie {
	b, _ := json.Marshal(raw)
	r := corev1.Toleration{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *TolerationDie) DieRelease() corev1.Toleration {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *TolerationDie) DieReleasePtr() *corev1.Toleration {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *TolerationDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *TolerationDie) DieStamp(fn func(r *corev1.Toleration)) *TolerationDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *TolerationDie) DeepCopy() *TolerationDie {
	r := *d.r.DeepCopy()
	return &TolerationDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (d *TolerationDie) Key(v string) *TolerationDie {
	return d.DieStamp(func(r *corev1.Toleration) {
		r.Key = v
	})
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (d *TolerationDie) Operator(v corev1.TolerationOperator) *TolerationDie {
	return d.DieStamp(func(r *corev1.Toleration) {
		r.Operator = v
	})
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (d *TolerationDie) Value(v string) *TolerationDie {
	return d.DieStamp(func(r *corev1.Toleration) {
		r.Value = v
	})
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (d *TolerationDie) Effect(v corev1.TaintEffect) *TolerationDie {
	return d.DieStamp(func(r *corev1.Toleration) {
		r.Effect = v
	})
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (d *TolerationDie) TolerationSeconds(v *int64) *TolerationDie {
	return d.DieStamp(func(r *corev1.Toleration) {
		r.TolerationSeconds = v
	})
}

var HostAliasBlank = (&HostAliasDie{}).DieFeed(corev1.HostAlias{})

type HostAliasDie struct {
	mutable bool
	r       corev1.HostAlias
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HostAliasDie) DieImmutable(immutable bool) *HostAliasDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HostAliasDie) DieFeed(r corev1.HostAlias) *HostAliasDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HostAliasDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HostAliasDie) DieFeedPtr(r *corev1.HostAlias) *HostAliasDie {
	if r == nil {
		r = &corev1.HostAlias{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *HostAliasDie) DieFeedRawExtension(raw runtime.RawExtension) *HostAliasDie {
	b, _ := json.Marshal(raw)
	r := corev1.HostAlias{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *HostAliasDie) DieRelease() corev1.HostAlias {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HostAliasDie) DieReleasePtr() *corev1.HostAlias {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *HostAliasDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HostAliasDie) DieStamp(fn func(r *corev1.HostAlias)) *HostAliasDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HostAliasDie) DeepCopy() *HostAliasDie {
	r := *d.r.DeepCopy()
	return &HostAliasDie{
		mutable: d.mutable,
		r:       r,
	}
}

// IP address of the host file entry.
func (d *HostAliasDie) IP(v string) *HostAliasDie {
	return d.DieStamp(func(r *corev1.HostAlias) {
		r.IP = v
	})
}

// Hostnames for the above IP address.
func (d *HostAliasDie) Hostnames(v ...string) *HostAliasDie {
	return d.DieStamp(func(r *corev1.HostAlias) {
		r.Hostnames = v
	})
}

var PodDNSConfigBlank = (&PodDNSConfigDie{}).DieFeed(corev1.PodDNSConfig{})

type PodDNSConfigDie struct {
	mutable bool
	r       corev1.PodDNSConfig
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodDNSConfigDie) DieImmutable(immutable bool) *PodDNSConfigDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodDNSConfigDie) DieFeed(r corev1.PodDNSConfig) *PodDNSConfigDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodDNSConfigDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodDNSConfigDie) DieFeedPtr(r *corev1.PodDNSConfig) *PodDNSConfigDie {
	if r == nil {
		r = &corev1.PodDNSConfig{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodDNSConfigDie) DieFeedRawExtension(raw runtime.RawExtension) *PodDNSConfigDie {
	b, _ := json.Marshal(raw)
	r := corev1.PodDNSConfig{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodDNSConfigDie) DieRelease() corev1.PodDNSConfig {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodDNSConfigDie) DieReleasePtr() *corev1.PodDNSConfig {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodDNSConfigDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodDNSConfigDie) DieStamp(fn func(r *corev1.PodDNSConfig)) *PodDNSConfigDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodDNSConfigDie) DeepCopy() *PodDNSConfigDie {
	r := *d.r.DeepCopy()
	return &PodDNSConfigDie{
		mutable: d.mutable,
		r:       r,
	}
}

// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
func (d *PodDNSConfigDie) Nameservers(v ...string) *PodDNSConfigDie {
	return d.DieStamp(func(r *corev1.PodDNSConfig) {
		r.Nameservers = v
	})
}

// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
func (d *PodDNSConfigDie) Searches(v ...string) *PodDNSConfigDie {
	return d.DieStamp(func(r *corev1.PodDNSConfig) {
		r.Searches = v
	})
}

// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
func (d *PodDNSConfigDie) Options(v ...corev1.PodDNSConfigOption) *PodDNSConfigDie {
	return d.DieStamp(func(r *corev1.PodDNSConfig) {
		r.Options = v
	})
}

var PodDNSConfigOptionBlank = (&PodDNSConfigOptionDie{}).DieFeed(corev1.PodDNSConfigOption{})

type PodDNSConfigOptionDie struct {
	mutable bool
	r       corev1.PodDNSConfigOption
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodDNSConfigOptionDie) DieImmutable(immutable bool) *PodDNSConfigOptionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodDNSConfigOptionDie) DieFeed(r corev1.PodDNSConfigOption) *PodDNSConfigOptionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodDNSConfigOptionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodDNSConfigOptionDie) DieFeedPtr(r *corev1.PodDNSConfigOption) *PodDNSConfigOptionDie {
	if r == nil {
		r = &corev1.PodDNSConfigOption{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodDNSConfigOptionDie) DieFeedRawExtension(raw runtime.RawExtension) *PodDNSConfigOptionDie {
	b, _ := json.Marshal(raw)
	r := corev1.PodDNSConfigOption{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodDNSConfigOptionDie) DieRelease() corev1.PodDNSConfigOption {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodDNSConfigOptionDie) DieReleasePtr() *corev1.PodDNSConfigOption {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodDNSConfigOptionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodDNSConfigOptionDie) DieStamp(fn func(r *corev1.PodDNSConfigOption)) *PodDNSConfigOptionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodDNSConfigOptionDie) DeepCopy() *PodDNSConfigOptionDie {
	r := *d.r.DeepCopy()
	return &PodDNSConfigOptionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Required.
func (d *PodDNSConfigOptionDie) Name(v string) *PodDNSConfigOptionDie {
	return d.DieStamp(func(r *corev1.PodDNSConfigOption) {
		r.Name = v
	})
}

func (d *PodDNSConfigOptionDie) Value(v *string) *PodDNSConfigOptionDie {
	return d.DieStamp(func(r *corev1.PodDNSConfigOption) {
		r.Value = v
	})
}

var PodReadinessGateBlank = (&PodReadinessGateDie{}).DieFeed(corev1.PodReadinessGate{})

type PodReadinessGateDie struct {
	mutable bool
	r       corev1.PodReadinessGate
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodReadinessGateDie) DieImmutable(immutable bool) *PodReadinessGateDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodReadinessGateDie) DieFeed(r corev1.PodReadinessGate) *PodReadinessGateDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodReadinessGateDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodReadinessGateDie) DieFeedPtr(r *corev1.PodReadinessGate) *PodReadinessGateDie {
	if r == nil {
		r = &corev1.PodReadinessGate{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodReadinessGateDie) DieFeedRawExtension(raw runtime.RawExtension) *PodReadinessGateDie {
	b, _ := json.Marshal(raw)
	r := corev1.PodReadinessGate{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodReadinessGateDie) DieRelease() corev1.PodReadinessGate {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodReadinessGateDie) DieReleasePtr() *corev1.PodReadinessGate {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodReadinessGateDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodReadinessGateDie) DieStamp(fn func(r *corev1.PodReadinessGate)) *PodReadinessGateDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodReadinessGateDie) DeepCopy() *PodReadinessGateDie {
	r := *d.r.DeepCopy()
	return &PodReadinessGateDie{
		mutable: d.mutable,
		r:       r,
	}
}

// ConditionType refers to a condition in the pod's condition list with matching type.
func (d *PodReadinessGateDie) ConditionType(v corev1.PodConditionType) *PodReadinessGateDie {
	return d.DieStamp(func(r *corev1.PodReadinessGate) {
		r.ConditionType = v
	})
}

var TopologySpreadConstraintBlank = (&TopologySpreadConstraintDie{}).DieFeed(corev1.TopologySpreadConstraint{})

type TopologySpreadConstraintDie struct {
	mutable bool
	r       corev1.TopologySpreadConstraint
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *TopologySpreadConstraintDie) DieImmutable(immutable bool) *TopologySpreadConstraintDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *TopologySpreadConstraintDie) DieFeed(r corev1.TopologySpreadConstraint) *TopologySpreadConstraintDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &TopologySpreadConstraintDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *TopologySpreadConstraintDie) DieFeedPtr(r *corev1.TopologySpreadConstraint) *TopologySpreadConstraintDie {
	if r == nil {
		r = &corev1.TopologySpreadConstraint{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *TopologySpreadConstraintDie) DieFeedRawExtension(raw runtime.RawExtension) *TopologySpreadConstraintDie {
	b, _ := json.Marshal(raw)
	r := corev1.TopologySpreadConstraint{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *TopologySpreadConstraintDie) DieRelease() corev1.TopologySpreadConstraint {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *TopologySpreadConstraintDie) DieReleasePtr() *corev1.TopologySpreadConstraint {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *TopologySpreadConstraintDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *TopologySpreadConstraintDie) DieStamp(fn func(r *corev1.TopologySpreadConstraint)) *TopologySpreadConstraintDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *TopologySpreadConstraintDie) DeepCopy() *TopologySpreadConstraintDie {
	r := *d.r.DeepCopy()
	return &TopologySpreadConstraintDie{
		mutable: d.mutable,
		r:       r,
	}
}

// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
func (d *TopologySpreadConstraintDie) MaxSkew(v int32) *TopologySpreadConstraintDie {
	return d.DieStamp(func(r *corev1.TopologySpreadConstraint) {
		r.MaxSkew = v
	})
}

// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
func (d *TopologySpreadConstraintDie) TopologyKey(v string) *TopologySpreadConstraintDie {
	return d.DieStamp(func(r *corev1.TopologySpreadConstraint) {
		r.TopologyKey = v
	})
}

// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
func (d *TopologySpreadConstraintDie) WhenUnsatisfiable(v corev1.UnsatisfiableConstraintAction) *TopologySpreadConstraintDie {
	return d.DieStamp(func(r *corev1.TopologySpreadConstraint) {
		r.WhenUnsatisfiable = v
	})
}

// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
func (d *TopologySpreadConstraintDie) LabelSelector(v *apismetav1.LabelSelector) *TopologySpreadConstraintDie {
	return d.DieStamp(func(r *corev1.TopologySpreadConstraint) {
		r.LabelSelector = v
	})
}

// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
//
// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
//
// This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
func (d *TopologySpreadConstraintDie) MinDomains(v *int32) *TopologySpreadConstraintDie {
	return d.DieStamp(func(r *corev1.TopologySpreadConstraint) {
		r.MinDomains = v
	})
}

// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
//
// If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (d *TopologySpreadConstraintDie) NodeAffinityPolicy(v *corev1.NodeInclusionPolicy) *TopologySpreadConstraintDie {
	return d.DieStamp(func(r *corev1.TopologySpreadConstraint) {
		r.NodeAffinityPolicy = v
	})
}

// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
//
// If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (d *TopologySpreadConstraintDie) NodeTaintsPolicy(v *corev1.NodeInclusionPolicy) *TopologySpreadConstraintDie {
	return d.DieStamp(func(r *corev1.TopologySpreadConstraint) {
		r.NodeTaintsPolicy = v
	})
}

// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
func (d *TopologySpreadConstraintDie) MatchLabelKeys(v ...string) *TopologySpreadConstraintDie {
	return d.DieStamp(func(r *corev1.TopologySpreadConstraint) {
		r.MatchLabelKeys = v
	})
}

var PodOSBlank = (&PodOSDie{}).DieFeed(corev1.PodOS{})

type PodOSDie struct {
	mutable bool
	r       corev1.PodOS
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodOSDie) DieImmutable(immutable bool) *PodOSDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodOSDie) DieFeed(r corev1.PodOS) *PodOSDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodOSDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodOSDie) DieFeedPtr(r *corev1.PodOS) *PodOSDie {
	if r == nil {
		r = &corev1.PodOS{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodOSDie) DieFeedRawExtension(raw runtime.RawExtension) *PodOSDie {
	b, _ := json.Marshal(raw)
	r := corev1.PodOS{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodOSDie) DieRelease() corev1.PodOS {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodOSDie) DieReleasePtr() *corev1.PodOS {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodOSDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodOSDie) DieStamp(fn func(r *corev1.PodOS)) *PodOSDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodOSDie) DeepCopy() *PodOSDie {
	r := *d.r.DeepCopy()
	return &PodOSDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
func (d *PodOSDie) Name(v corev1.OSName) *PodOSDie {
	return d.DieStamp(func(r *corev1.PodOS) {
		r.Name = v
	})
}

var PodStatusBlank = (&PodStatusDie{}).DieFeed(corev1.PodStatus{})

type PodStatusDie struct {
	mutable bool
	r       corev1.PodStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodStatusDie) DieImmutable(immutable bool) *PodStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodStatusDie) DieFeed(r corev1.PodStatus) *PodStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodStatusDie) DieFeedPtr(r *corev1.PodStatus) *PodStatusDie {
	if r == nil {
		r = &corev1.PodStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *PodStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.PodStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodStatusDie) DieRelease() corev1.PodStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodStatusDie) DieReleasePtr() *corev1.PodStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodStatusDie) DieStamp(fn func(r *corev1.PodStatus)) *PodStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodStatusDie) DeepCopy() *PodStatusDie {
	r := *d.r.DeepCopy()
	return &PodStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
//
// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
//
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
func (d *PodStatusDie) Phase(v corev1.PodPhase) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.Phase = v
	})
}

// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (d *PodStatusDie) Conditions(v ...corev1.PodCondition) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.Conditions = v
	})
}

// A human readable message indicating details about why the pod is in this condition.
func (d *PodStatusDie) Message(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.Message = v
	})
}

// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
func (d *PodStatusDie) Reason(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.Reason = v
	})
}

// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
func (d *PodStatusDie) NominatedNodeName(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.NominatedNodeName = v
	})
}

// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
func (d *PodStatusDie) HostIP(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.HostIP = v
	})
}

// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
func (d *PodStatusDie) PodIP(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.PodIP = v
	})
}

// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
func (d *PodStatusDie) PodIPs(v ...corev1.PodIP) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.PodIPs = v
	})
}

// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
func (d *PodStatusDie) StartTime(v *apismetav1.Time) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.StartTime = v
	})
}

// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (d *PodStatusDie) InitContainerStatuses(v ...corev1.ContainerStatus) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.InitContainerStatuses = v
	})
}

// The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (d *PodStatusDie) ContainerStatuses(v ...corev1.ContainerStatus) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.ContainerStatuses = v
	})
}

// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
func (d *PodStatusDie) QOSClass(v corev1.PodQOSClass) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.QOSClass = v
	})
}

// Status for any ephemeral containers that have run in this pod.
func (d *PodStatusDie) EphemeralContainerStatuses(v ...corev1.ContainerStatus) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.EphemeralContainerStatuses = v
	})
}

var PodTemplateBlank = (&PodTemplateDie{}).DieFeed(corev1.PodTemplate{})

type PodTemplateDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.PodTemplate
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodTemplateDie) DieImmutable(immutable bool) *PodTemplateDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodTemplateDie) DieFeed(r corev1.PodTemplate) *PodTemplateDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &PodTemplateDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodTemplateDie) DieFeedPtr(r *corev1.PodTemplate) *PodTemplateDie {
	if r == nil {
		r = &corev1.PodTemplate{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodTemplateDie) DieFeedRawExtension(raw runtime.RawExtension) *PodTemplateDie {
	b, _ := json.Marshal(raw)
	r := corev1.PodTemplate{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodTemplateDie) DieRelease() corev1.PodTemplate {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodTemplateDie) DieReleasePtr() *corev1.PodTemplate {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *PodTemplateDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodTemplateDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodTemplateDie) DieStamp(fn func(r *corev1.PodTemplate)) *PodTemplateDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodTemplateDie) DeepCopy() *PodTemplateDie {
	r := *d.r.DeepCopy()
	return &PodTemplateDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*PodTemplateDie)(nil)

func (d *PodTemplateDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *PodTemplateDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *PodTemplateDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *PodTemplateDie) UnmarshalJSON(b []byte) error {
	if d == PodTemplateBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.PodTemplate{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *PodTemplateDie) APIVersion(v string) *PodTemplateDie {
	return d.DieStamp(func(r *corev1.PodTemplate) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *PodTemplateDie) Kind(v string) *PodTemplateDie {
	return d.DieStamp(func(r *corev1.PodTemplate) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *PodTemplateDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *PodTemplateDie {
	return d.DieStamp(func(r *corev1.PodTemplate) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *PodTemplateDie) Template(v corev1.PodTemplateSpec) *PodTemplateDie {
	return d.DieStamp(func(r *corev1.PodTemplate) {
		r.Template = v
	})
}

var PodTemplateSpecBlank = (&PodTemplateSpecDie{}).DieFeed(corev1.PodTemplateSpec{})

type PodTemplateSpecDie struct {
	mutable bool
	r       corev1.PodTemplateSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodTemplateSpecDie) DieImmutable(immutable bool) *PodTemplateSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodTemplateSpecDie) DieFeed(r corev1.PodTemplateSpec) *PodTemplateSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodTemplateSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodTemplateSpecDie) DieFeedPtr(r *corev1.PodTemplateSpec) *PodTemplateSpecDie {
	if r == nil {
		r = &corev1.PodTemplateSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PodTemplateSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *PodTemplateSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.PodTemplateSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PodTemplateSpecDie) DieRelease() corev1.PodTemplateSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodTemplateSpecDie) DieReleasePtr() *corev1.PodTemplateSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PodTemplateSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodTemplateSpecDie) DieStamp(fn func(r *corev1.PodTemplateSpec)) *PodTemplateSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodTemplateSpecDie) DeepCopy() *PodTemplateSpecDie {
	r := *d.r.DeepCopy()
	return &PodTemplateSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (d *PodTemplateSpecDie) ObjectMeta(v apismetav1.ObjectMeta) *PodTemplateSpecDie {
	return d.DieStamp(func(r *corev1.PodTemplateSpec) {
		r.ObjectMeta = v
	})
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *PodTemplateSpecDie) Spec(v corev1.PodSpec) *PodTemplateSpecDie {
	return d.DieStamp(func(r *corev1.PodTemplateSpec) {
		r.Spec = v
	})
}

var ReplicationControllerBlank = (&ReplicationControllerDie{}).DieFeed(corev1.ReplicationController{})

type ReplicationControllerDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.ReplicationController
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ReplicationControllerDie) DieImmutable(immutable bool) *ReplicationControllerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ReplicationControllerDie) DieFeed(r corev1.ReplicationController) *ReplicationControllerDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ReplicationControllerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ReplicationControllerDie) DieFeedPtr(r *corev1.ReplicationController) *ReplicationControllerDie {
	if r == nil {
		r = &corev1.ReplicationController{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ReplicationControllerDie) DieFeedRawExtension(raw runtime.RawExtension) *ReplicationControllerDie {
	b, _ := json.Marshal(raw)
	r := corev1.ReplicationController{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ReplicationControllerDie) DieRelease() corev1.ReplicationController {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ReplicationControllerDie) DieReleasePtr() *corev1.ReplicationController {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *ReplicationControllerDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ReplicationControllerDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ReplicationControllerDie) DieStamp(fn func(r *corev1.ReplicationController)) *ReplicationControllerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ReplicationControllerDie) DeepCopy() *ReplicationControllerDie {
	r := *d.r.DeepCopy()
	return &ReplicationControllerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*ReplicationControllerDie)(nil)

func (d *ReplicationControllerDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ReplicationControllerDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ReplicationControllerDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ReplicationControllerDie) UnmarshalJSON(b []byte) error {
	if d == ReplicationControllerBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.ReplicationController{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ReplicationControllerDie) APIVersion(v string) *ReplicationControllerDie {
	return d.DieStamp(func(r *corev1.ReplicationController) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ReplicationControllerDie) Kind(v string) *ReplicationControllerDie {
	return d.DieStamp(func(r *corev1.ReplicationController) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ReplicationControllerDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ReplicationControllerDie {
	return d.DieStamp(func(r *corev1.ReplicationController) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ReplicationControllerDie) SpecDie(fn func(d *ReplicationControllerSpecDie)) *ReplicationControllerDie {
	return d.DieStamp(func(r *corev1.ReplicationController) {
		d := ReplicationControllerSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ReplicationControllerDie) StatusDie(fn func(d *ReplicationControllerStatusDie)) *ReplicationControllerDie {
	return d.DieStamp(func(r *corev1.ReplicationController) {
		d := ReplicationControllerStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *ReplicationControllerDie) Spec(v corev1.ReplicationControllerSpec) *ReplicationControllerDie {
	return d.DieStamp(func(r *corev1.ReplicationController) {
		r.Spec = v
	})
}

// Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *ReplicationControllerDie) Status(v corev1.ReplicationControllerStatus) *ReplicationControllerDie {
	return d.DieStamp(func(r *corev1.ReplicationController) {
		r.Status = v
	})
}

var ReplicationControllerSpecBlank = (&ReplicationControllerSpecDie{}).DieFeed(corev1.ReplicationControllerSpec{})

type ReplicationControllerSpecDie struct {
	mutable bool
	r       corev1.ReplicationControllerSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ReplicationControllerSpecDie) DieImmutable(immutable bool) *ReplicationControllerSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ReplicationControllerSpecDie) DieFeed(r corev1.ReplicationControllerSpec) *ReplicationControllerSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ReplicationControllerSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ReplicationControllerSpecDie) DieFeedPtr(r *corev1.ReplicationControllerSpec) *ReplicationControllerSpecDie {
	if r == nil {
		r = &corev1.ReplicationControllerSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ReplicationControllerSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ReplicationControllerSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.ReplicationControllerSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ReplicationControllerSpecDie) DieRelease() corev1.ReplicationControllerSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ReplicationControllerSpecDie) DieReleasePtr() *corev1.ReplicationControllerSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ReplicationControllerSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ReplicationControllerSpecDie) DieStamp(fn func(r *corev1.ReplicationControllerSpec)) *ReplicationControllerSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ReplicationControllerSpecDie) DeepCopy() *ReplicationControllerSpecDie {
	r := *d.r.DeepCopy()
	return &ReplicationControllerSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (d *ReplicationControllerSpecDie) Replicas(v *int32) *ReplicationControllerSpecDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerSpec) {
		r.Replicas = v
	})
}

// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
func (d *ReplicationControllerSpecDie) MinReadySeconds(v int32) *ReplicationControllerSpecDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerSpec) {
		r.MinReadySeconds = v
	})
}

// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (d *ReplicationControllerSpecDie) Selector(v map[string]string) *ReplicationControllerSpecDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerSpec) {
		r.Selector = v
	})
}

// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
func (d *ReplicationControllerSpecDie) Template(v *corev1.PodTemplateSpec) *ReplicationControllerSpecDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerSpec) {
		r.Template = v
	})
}

var ReplicationControllerStatusBlank = (&ReplicationControllerStatusDie{}).DieFeed(corev1.ReplicationControllerStatus{})

type ReplicationControllerStatusDie struct {
	mutable bool
	r       corev1.ReplicationControllerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ReplicationControllerStatusDie) DieImmutable(immutable bool) *ReplicationControllerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ReplicationControllerStatusDie) DieFeed(r corev1.ReplicationControllerStatus) *ReplicationControllerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ReplicationControllerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ReplicationControllerStatusDie) DieFeedPtr(r *corev1.ReplicationControllerStatus) *ReplicationControllerStatusDie {
	if r == nil {
		r = &corev1.ReplicationControllerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ReplicationControllerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ReplicationControllerStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.ReplicationControllerStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ReplicationControllerStatusDie) DieRelease() corev1.ReplicationControllerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ReplicationControllerStatusDie) DieReleasePtr() *corev1.ReplicationControllerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ReplicationControllerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ReplicationControllerStatusDie) DieStamp(fn func(r *corev1.ReplicationControllerStatus)) *ReplicationControllerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ReplicationControllerStatusDie) DeepCopy() *ReplicationControllerStatusDie {
	r := *d.r.DeepCopy()
	return &ReplicationControllerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
func (d *ReplicationControllerStatusDie) Replicas(v int32) *ReplicationControllerStatusDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerStatus) {
		r.Replicas = v
	})
}

// The number of pods that have labels matching the labels of the pod template of the replication controller.
func (d *ReplicationControllerStatusDie) FullyLabeledReplicas(v int32) *ReplicationControllerStatusDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerStatus) {
		r.FullyLabeledReplicas = v
	})
}

// The number of ready replicas for this replication controller.
func (d *ReplicationControllerStatusDie) ReadyReplicas(v int32) *ReplicationControllerStatusDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerStatus) {
		r.ReadyReplicas = v
	})
}

// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
func (d *ReplicationControllerStatusDie) AvailableReplicas(v int32) *ReplicationControllerStatusDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerStatus) {
		r.AvailableReplicas = v
	})
}

// ObservedGeneration reflects the generation of the most recently observed replication controller.
func (d *ReplicationControllerStatusDie) ObservedGeneration(v int64) *ReplicationControllerStatusDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerStatus) {
		r.ObservedGeneration = v
	})
}

// Represents the latest available observations of a replication controller's current state.
func (d *ReplicationControllerStatusDie) Conditions(v ...corev1.ReplicationControllerCondition) *ReplicationControllerStatusDie {
	return d.DieStamp(func(r *corev1.ReplicationControllerStatus) {
		r.Conditions = v
	})
}

var ResourceQuotaBlank = (&ResourceQuotaDie{}).DieFeed(corev1.ResourceQuota{})

type ResourceQuotaDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.ResourceQuota
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourceQuotaDie) DieImmutable(immutable bool) *ResourceQuotaDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourceQuotaDie) DieFeed(r corev1.ResourceQuota) *ResourceQuotaDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ResourceQuotaDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourceQuotaDie) DieFeedPtr(r *corev1.ResourceQuota) *ResourceQuotaDie {
	if r == nil {
		r = &corev1.ResourceQuota{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceQuotaDie) DieFeedRawExtension(raw runtime.RawExtension) *ResourceQuotaDie {
	b, _ := json.Marshal(raw)
	r := corev1.ResourceQuota{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ResourceQuotaDie) DieRelease() corev1.ResourceQuota {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourceQuotaDie) DieReleasePtr() *corev1.ResourceQuota {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *ResourceQuotaDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceQuotaDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourceQuotaDie) DieStamp(fn func(r *corev1.ResourceQuota)) *ResourceQuotaDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourceQuotaDie) DeepCopy() *ResourceQuotaDie {
	r := *d.r.DeepCopy()
	return &ResourceQuotaDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*ResourceQuotaDie)(nil)

func (d *ResourceQuotaDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ResourceQuotaDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ResourceQuotaDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ResourceQuotaDie) UnmarshalJSON(b []byte) error {
	if d == ResourceQuotaBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.ResourceQuota{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ResourceQuotaDie) APIVersion(v string) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ResourceQuotaDie) Kind(v string) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ResourceQuotaDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ResourceQuotaDie) SpecDie(fn func(d *ResourceQuotaSpecDie)) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		d := ResourceQuotaSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ResourceQuotaDie) StatusDie(fn func(d *ResourceQuotaStatusDie)) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		d := ResourceQuotaStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *ResourceQuotaDie) Spec(v corev1.ResourceQuotaSpec) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		r.Spec = v
	})
}

// Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *ResourceQuotaDie) Status(v corev1.ResourceQuotaStatus) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		r.Status = v
	})
}

var ResourceQuotaSpecBlank = (&ResourceQuotaSpecDie{}).DieFeed(corev1.ResourceQuotaSpec{})

type ResourceQuotaSpecDie struct {
	mutable bool
	r       corev1.ResourceQuotaSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourceQuotaSpecDie) DieImmutable(immutable bool) *ResourceQuotaSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourceQuotaSpecDie) DieFeed(r corev1.ResourceQuotaSpec) *ResourceQuotaSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceQuotaSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourceQuotaSpecDie) DieFeedPtr(r *corev1.ResourceQuotaSpec) *ResourceQuotaSpecDie {
	if r == nil {
		r = &corev1.ResourceQuotaSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceQuotaSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ResourceQuotaSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.ResourceQuotaSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ResourceQuotaSpecDie) DieRelease() corev1.ResourceQuotaSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourceQuotaSpecDie) DieReleasePtr() *corev1.ResourceQuotaSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceQuotaSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourceQuotaSpecDie) DieStamp(fn func(r *corev1.ResourceQuotaSpec)) *ResourceQuotaSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourceQuotaSpecDie) DeepCopy() *ResourceQuotaSpecDie {
	r := *d.r.DeepCopy()
	return &ResourceQuotaSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (d *ResourceQuotaSpecDie) Hard(v corev1.ResourceList) *ResourceQuotaSpecDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaSpec) {
		r.Hard = v
	})
}

// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
func (d *ResourceQuotaSpecDie) Scopes(v ...corev1.ResourceQuotaScope) *ResourceQuotaSpecDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaSpec) {
		r.Scopes = v
	})
}

// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
func (d *ResourceQuotaSpecDie) ScopeSelector(v *corev1.ScopeSelector) *ResourceQuotaSpecDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaSpec) {
		r.ScopeSelector = v
	})
}

var ScopeSelectorBlank = (&ScopeSelectorDie{}).DieFeed(corev1.ScopeSelector{})

type ScopeSelectorDie struct {
	mutable bool
	r       corev1.ScopeSelector
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ScopeSelectorDie) DieImmutable(immutable bool) *ScopeSelectorDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ScopeSelectorDie) DieFeed(r corev1.ScopeSelector) *ScopeSelectorDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ScopeSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ScopeSelectorDie) DieFeedPtr(r *corev1.ScopeSelector) *ScopeSelectorDie {
	if r == nil {
		r = &corev1.ScopeSelector{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ScopeSelectorDie) DieFeedRawExtension(raw runtime.RawExtension) *ScopeSelectorDie {
	b, _ := json.Marshal(raw)
	r := corev1.ScopeSelector{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ScopeSelectorDie) DieRelease() corev1.ScopeSelector {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ScopeSelectorDie) DieReleasePtr() *corev1.ScopeSelector {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ScopeSelectorDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ScopeSelectorDie) DieStamp(fn func(r *corev1.ScopeSelector)) *ScopeSelectorDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ScopeSelectorDie) DeepCopy() *ScopeSelectorDie {
	r := *d.r.DeepCopy()
	return &ScopeSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// A list of scope selector requirements by scope of the resources.
func (d *ScopeSelectorDie) MatchExpressions(v ...corev1.ScopedResourceSelectorRequirement) *ScopeSelectorDie {
	return d.DieStamp(func(r *corev1.ScopeSelector) {
		r.MatchExpressions = v
	})
}

var ScopedResourceSelectorRequirementBlank = (&ScopedResourceSelectorRequirementDie{}).DieFeed(corev1.ScopedResourceSelectorRequirement{})

type ScopedResourceSelectorRequirementDie struct {
	mutable bool
	r       corev1.ScopedResourceSelectorRequirement
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ScopedResourceSelectorRequirementDie) DieImmutable(immutable bool) *ScopedResourceSelectorRequirementDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ScopedResourceSelectorRequirementDie) DieFeed(r corev1.ScopedResourceSelectorRequirement) *ScopedResourceSelectorRequirementDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ScopedResourceSelectorRequirementDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ScopedResourceSelectorRequirementDie) DieFeedPtr(r *corev1.ScopedResourceSelectorRequirement) *ScopedResourceSelectorRequirementDie {
	if r == nil {
		r = &corev1.ScopedResourceSelectorRequirement{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ScopedResourceSelectorRequirementDie) DieFeedRawExtension(raw runtime.RawExtension) *ScopedResourceSelectorRequirementDie {
	b, _ := json.Marshal(raw)
	r := corev1.ScopedResourceSelectorRequirement{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ScopedResourceSelectorRequirementDie) DieRelease() corev1.ScopedResourceSelectorRequirement {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ScopedResourceSelectorRequirementDie) DieReleasePtr() *corev1.ScopedResourceSelectorRequirement {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ScopedResourceSelectorRequirementDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ScopedResourceSelectorRequirementDie) DieStamp(fn func(r *corev1.ScopedResourceSelectorRequirement)) *ScopedResourceSelectorRequirementDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ScopedResourceSelectorRequirementDie) DeepCopy() *ScopedResourceSelectorRequirementDie {
	r := *d.r.DeepCopy()
	return &ScopedResourceSelectorRequirementDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The name of the scope that the selector applies to.
func (d *ScopedResourceSelectorRequirementDie) ScopeName(v corev1.ResourceQuotaScope) *ScopedResourceSelectorRequirementDie {
	return d.DieStamp(func(r *corev1.ScopedResourceSelectorRequirement) {
		r.ScopeName = v
	})
}

// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
func (d *ScopedResourceSelectorRequirementDie) Operator(v corev1.ScopeSelectorOperator) *ScopedResourceSelectorRequirementDie {
	return d.DieStamp(func(r *corev1.ScopedResourceSelectorRequirement) {
		r.Operator = v
	})
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (d *ScopedResourceSelectorRequirementDie) Values(v ...string) *ScopedResourceSelectorRequirementDie {
	return d.DieStamp(func(r *corev1.ScopedResourceSelectorRequirement) {
		r.Values = v
	})
}

var ResourceQuotaStatusBlank = (&ResourceQuotaStatusDie{}).DieFeed(corev1.ResourceQuotaStatus{})

type ResourceQuotaStatusDie struct {
	mutable bool
	r       corev1.ResourceQuotaStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourceQuotaStatusDie) DieImmutable(immutable bool) *ResourceQuotaStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourceQuotaStatusDie) DieFeed(r corev1.ResourceQuotaStatus) *ResourceQuotaStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceQuotaStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourceQuotaStatusDie) DieFeedPtr(r *corev1.ResourceQuotaStatus) *ResourceQuotaStatusDie {
	if r == nil {
		r = &corev1.ResourceQuotaStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceQuotaStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ResourceQuotaStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.ResourceQuotaStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ResourceQuotaStatusDie) DieRelease() corev1.ResourceQuotaStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourceQuotaStatusDie) DieReleasePtr() *corev1.ResourceQuotaStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ResourceQuotaStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourceQuotaStatusDie) DieStamp(fn func(r *corev1.ResourceQuotaStatus)) *ResourceQuotaStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourceQuotaStatusDie) DeepCopy() *ResourceQuotaStatusDie {
	r := *d.r.DeepCopy()
	return &ResourceQuotaStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
func (d *ResourceQuotaStatusDie) Hard(v corev1.ResourceList) *ResourceQuotaStatusDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaStatus) {
		r.Hard = v
	})
}

// Used is the current observed total usage of the resource in the namespace.
func (d *ResourceQuotaStatusDie) Used(v corev1.ResourceList) *ResourceQuotaStatusDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaStatus) {
		r.Used = v
	})
}

var SecretBlank = (&SecretDie{}).DieFeed(corev1.Secret{})

type SecretDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Secret
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SecretDie) DieImmutable(immutable bool) *SecretDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SecretDie) DieFeed(r corev1.Secret) *SecretDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &SecretDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SecretDie) DieFeedPtr(r *corev1.Secret) *SecretDie {
	if r == nil {
		r = &corev1.Secret{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretDie) DieFeedRawExtension(raw runtime.RawExtension) *SecretDie {
	b, _ := json.Marshal(raw)
	r := corev1.Secret{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SecretDie) DieRelease() corev1.Secret {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SecretDie) DieReleasePtr() *corev1.Secret {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *SecretDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SecretDie) DieStamp(fn func(r *corev1.Secret)) *SecretDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SecretDie) DeepCopy() *SecretDie {
	r := *d.r.DeepCopy()
	return &SecretDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*SecretDie)(nil)

func (d *SecretDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *SecretDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *SecretDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *SecretDie) UnmarshalJSON(b []byte) error {
	if d == SecretBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.Secret{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *SecretDie) APIVersion(v string) *SecretDie {
	return d.DieStamp(func(r *corev1.Secret) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *SecretDie) Kind(v string) *SecretDie {
	return d.DieStamp(func(r *corev1.Secret) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *SecretDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *SecretDie {
	return d.DieStamp(func(r *corev1.Secret) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
func (d *SecretDie) Immutable(v *bool) *SecretDie {
	return d.DieStamp(func(r *corev1.Secret) {
		r.Immutable = v
	})
}

// Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
func (d *SecretDie) Type(v corev1.SecretType) *SecretDie {
	return d.DieStamp(func(r *corev1.Secret) {
		r.Type = v
	})
}

var ServiceBlank = (&ServiceDie{}).DieFeed(corev1.Service{})

type ServiceDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Service
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceDie) DieImmutable(immutable bool) *ServiceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceDie) DieFeed(r corev1.Service) *ServiceDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceDie) DieFeedPtr(r *corev1.Service) *ServiceDie {
	if r == nil {
		r = &corev1.Service{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceDie {
	b, _ := json.Marshal(raw)
	r := corev1.Service{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceDie) DieRelease() corev1.Service {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceDie) DieReleasePtr() *corev1.Service {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *ServiceDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceDie) DieStamp(fn func(r *corev1.Service)) *ServiceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceDie) DeepCopy() *ServiceDie {
	r := *d.r.DeepCopy()
	return &ServiceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*ServiceDie)(nil)

func (d *ServiceDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceDie) UnmarshalJSON(b []byte) error {
	if d == ServiceBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.Service{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceDie) APIVersion(v string) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceDie) Kind(v string) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ServiceDie) SpecDie(fn func(d *ServiceSpecDie)) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		d := ServiceSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ServiceDie) StatusDie(fn func(d *ServiceStatusDie)) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		d := ServiceStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *ServiceDie) Spec(v corev1.ServiceSpec) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		r.Spec = v
	})
}

// Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *ServiceDie) Status(v corev1.ServiceStatus) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		r.Status = v
	})
}

var ServiceSpecBlank = (&ServiceSpecDie{}).DieFeed(corev1.ServiceSpec{})

type ServiceSpecDie struct {
	mutable bool
	r       corev1.ServiceSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceSpecDie) DieImmutable(immutable bool) *ServiceSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceSpecDie) DieFeed(r corev1.ServiceSpec) *ServiceSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceSpecDie) DieFeedPtr(r *corev1.ServiceSpec) *ServiceSpecDie {
	if r == nil {
		r = &corev1.ServiceSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceSpecDie {
	b, _ := json.Marshal(raw)
	r := corev1.ServiceSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceSpecDie) DieRelease() corev1.ServiceSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceSpecDie) DieReleasePtr() *corev1.ServiceSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceSpecDie) DieStamp(fn func(r *corev1.ServiceSpec)) *ServiceSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceSpecDie) DeepCopy() *ServiceSpecDie {
	r := *d.r.DeepCopy()
	return &ServiceSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (d *ServiceSpecDie) Ports(v ...corev1.ServicePort) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.Ports = v
	})
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (d *ServiceSpecDie) Selector(v map[string]string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.Selector = v
	})
}

// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (d *ServiceSpecDie) ClusterIP(v string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ClusterIP = v
	})
}

// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (d *ServiceSpecDie) ClusterIPs(v ...string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ClusterIPs = v
	})
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (d *ServiceSpecDie) Type(v corev1.ServiceType) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.Type = v
	})
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (d *ServiceSpecDie) ExternalIPs(v ...string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ExternalIPs = v
	})
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (d *ServiceSpecDie) SessionAffinity(v corev1.ServiceAffinity) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.SessionAffinity = v
	})
}

// Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.
func (d *ServiceSpecDie) LoadBalancerIP(v string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.LoadBalancerIP = v
	})
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (d *ServiceSpecDie) LoadBalancerSourceRanges(v ...string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.LoadBalancerSourceRanges = v
	})
}

// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (d *ServiceSpecDie) ExternalName(v string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ExternalName = v
	})
}

// externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
func (d *ServiceSpecDie) ExternalTrafficPolicy(v corev1.ServiceExternalTrafficPolicyType) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ExternalTrafficPolicy = v
	})
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
func (d *ServiceSpecDie) HealthCheckNodePort(v int32) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.HealthCheckNodePort = v
	})
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (d *ServiceSpecDie) PublishNotReadyAddresses(v bool) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.PublishNotReadyAddresses = v
	})
}

// sessionAffinityConfig contains the configurations of session affinity.
func (d *ServiceSpecDie) SessionAffinityConfig(v *corev1.SessionAffinityConfig) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.SessionAffinityConfig = v
	})
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
func (d *ServiceSpecDie) IPFamilies(v ...corev1.IPFamily) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.IPFamilies = v
	})
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
func (d *ServiceSpecDie) IPFamilyPolicy(v *corev1.IPFamilyPolicy) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.IPFamilyPolicy = v
	})
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
func (d *ServiceSpecDie) AllocateLoadBalancerNodePorts(v *bool) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.AllocateLoadBalancerNodePorts = v
	})
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (d *ServiceSpecDie) LoadBalancerClass(v *string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.LoadBalancerClass = v
	})
}

// InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
func (d *ServiceSpecDie) InternalTrafficPolicy(v *corev1.ServiceInternalTrafficPolicyType) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.InternalTrafficPolicy = v
	})
}

var ServicePortBlank = (&ServicePortDie{}).DieFeed(corev1.ServicePort{})

type ServicePortDie struct {
	mutable bool
	r       corev1.ServicePort
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServicePortDie) DieImmutable(immutable bool) *ServicePortDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServicePortDie) DieFeed(r corev1.ServicePort) *ServicePortDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServicePortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServicePortDie) DieFeedPtr(r *corev1.ServicePort) *ServicePortDie {
	if r == nil {
		r = &corev1.ServicePort{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ServicePortDie) DieFeedRawExtension(raw runtime.RawExtension) *ServicePortDie {
	b, _ := json.Marshal(raw)
	r := corev1.ServicePort{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ServicePortDie) DieRelease() corev1.ServicePort {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServicePortDie) DieReleasePtr() *corev1.ServicePort {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ServicePortDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServicePortDie) DieStamp(fn func(r *corev1.ServicePort)) *ServicePortDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServicePortDie) DeepCopy() *ServicePortDie {
	r := *d.r.DeepCopy()
	return &ServicePortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
func (d *ServicePortDie) Name(v string) *ServicePortDie {
	return d.DieStamp(func(r *corev1.ServicePort) {
		r.Name = v
	})
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
func (d *ServicePortDie) Protocol(v corev1.Protocol) *ServicePortDie {
	return d.DieStamp(func(r *corev1.ServicePort) {
		r.Protocol = v
	})
}

// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
func (d *ServicePortDie) AppProtocol(v *string) *ServicePortDie {
	return d.DieStamp(func(r *corev1.ServicePort) {
		r.AppProtocol = v
	})
}

// The port that will be exposed by this service.
func (d *ServicePortDie) Port(v int32) *ServicePortDie {
	return d.DieStamp(func(r *corev1.ServicePort) {
		r.Port = v
	})
}

// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (d *ServicePortDie) TargetPort(v intstr.IntOrString) *ServicePortDie {
	return d.DieStamp(func(r *corev1.ServicePort) {
		r.TargetPort = v
	})
}

func (d *ServicePortDie) TargetPortInt(i int) *ServicePortDie {
	return d.DieStamp(func(r *corev1.ServicePort) {
		v := intstr.FromInt(i)
		r.TargetPort = v
	})
}

func (d *ServicePortDie) TargetPortString(s string) *ServicePortDie {
	return d.DieStamp(func(r *corev1.ServicePort) {
		v := intstr.FromString(s)
		r.TargetPort = v
	})
}

// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (d *ServicePortDie) NodePort(v int32) *ServicePortDie {
	return d.DieStamp(func(r *corev1.ServicePort) {
		r.NodePort = v
	})
}

var SessionAffinityConfigBlank = (&SessionAffinityConfigDie{}).DieFeed(corev1.SessionAffinityConfig{})

type SessionAffinityConfigDie struct {
	mutable bool
	r       corev1.SessionAffinityConfig
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SessionAffinityConfigDie) DieImmutable(immutable bool) *SessionAffinityConfigDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SessionAffinityConfigDie) DieFeed(r corev1.SessionAffinityConfig) *SessionAffinityConfigDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SessionAffinityConfigDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SessionAffinityConfigDie) DieFeedPtr(r *corev1.SessionAffinityConfig) *SessionAffinityConfigDie {
	if r == nil {
		r = &corev1.SessionAffinityConfig{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SessionAffinityConfigDie) DieFeedRawExtension(raw runtime.RawExtension) *SessionAffinityConfigDie {
	b, _ := json.Marshal(raw)
	r := corev1.SessionAffinityConfig{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SessionAffinityConfigDie) DieRelease() corev1.SessionAffinityConfig {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SessionAffinityConfigDie) DieReleasePtr() *corev1.SessionAffinityConfig {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SessionAffinityConfigDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SessionAffinityConfigDie) DieStamp(fn func(r *corev1.SessionAffinityConfig)) *SessionAffinityConfigDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SessionAffinityConfigDie) DeepCopy() *SessionAffinityConfigDie {
	r := *d.r.DeepCopy()
	return &SessionAffinityConfigDie{
		mutable: d.mutable,
		r:       r,
	}
}

// clientIP contains the configurations of Client IP based session affinity.
func (d *SessionAffinityConfigDie) ClientIP(v *corev1.ClientIPConfig) *SessionAffinityConfigDie {
	return d.DieStamp(func(r *corev1.SessionAffinityConfig) {
		r.ClientIP = v
	})
}

var ClientIPConfigBlank = (&ClientIPConfigDie{}).DieFeed(corev1.ClientIPConfig{})

type ClientIPConfigDie struct {
	mutable bool
	r       corev1.ClientIPConfig
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ClientIPConfigDie) DieImmutable(immutable bool) *ClientIPConfigDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ClientIPConfigDie) DieFeed(r corev1.ClientIPConfig) *ClientIPConfigDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ClientIPConfigDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ClientIPConfigDie) DieFeedPtr(r *corev1.ClientIPConfig) *ClientIPConfigDie {
	if r == nil {
		r = &corev1.ClientIPConfig{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ClientIPConfigDie) DieFeedRawExtension(raw runtime.RawExtension) *ClientIPConfigDie {
	b, _ := json.Marshal(raw)
	r := corev1.ClientIPConfig{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ClientIPConfigDie) DieRelease() corev1.ClientIPConfig {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ClientIPConfigDie) DieReleasePtr() *corev1.ClientIPConfig {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ClientIPConfigDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ClientIPConfigDie) DieStamp(fn func(r *corev1.ClientIPConfig)) *ClientIPConfigDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ClientIPConfigDie) DeepCopy() *ClientIPConfigDie {
	r := *d.r.DeepCopy()
	return &ClientIPConfigDie{
		mutable: d.mutable,
		r:       r,
	}
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (d *ClientIPConfigDie) TimeoutSeconds(v *int32) *ClientIPConfigDie {
	return d.DieStamp(func(r *corev1.ClientIPConfig) {
		r.TimeoutSeconds = v
	})
}

var ServiceStatusBlank = (&ServiceStatusDie{}).DieFeed(corev1.ServiceStatus{})

type ServiceStatusDie struct {
	mutable bool
	r       corev1.ServiceStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceStatusDie) DieImmutable(immutable bool) *ServiceStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceStatusDie) DieFeed(r corev1.ServiceStatus) *ServiceStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceStatusDie) DieFeedPtr(r *corev1.ServiceStatus) *ServiceStatusDie {
	if r == nil {
		r = &corev1.ServiceStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.ServiceStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceStatusDie) DieRelease() corev1.ServiceStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceStatusDie) DieReleasePtr() *corev1.ServiceStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceStatusDie) DieStamp(fn func(r *corev1.ServiceStatus)) *ServiceStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceStatusDie) DeepCopy() *ServiceStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// LoadBalancer contains the current status of the load-balancer, if one is present.
func (d *ServiceStatusDie) LoadBalancer(v corev1.LoadBalancerStatus) *ServiceStatusDie {
	return d.DieStamp(func(r *corev1.ServiceStatus) {
		r.LoadBalancer = v
	})
}

// Current service state
func (d *ServiceStatusDie) Conditions(v ...apismetav1.Condition) *ServiceStatusDie {
	return d.DieStamp(func(r *corev1.ServiceStatus) {
		r.Conditions = v
	})
}

var LoadBalancerStatusBlank = (&LoadBalancerStatusDie{}).DieFeed(corev1.LoadBalancerStatus{})

type LoadBalancerStatusDie struct {
	mutable bool
	r       corev1.LoadBalancerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LoadBalancerStatusDie) DieImmutable(immutable bool) *LoadBalancerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LoadBalancerStatusDie) DieFeed(r corev1.LoadBalancerStatus) *LoadBalancerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LoadBalancerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LoadBalancerStatusDie) DieFeedPtr(r *corev1.LoadBalancerStatus) *LoadBalancerStatusDie {
	if r == nil {
		r = &corev1.LoadBalancerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *LoadBalancerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *LoadBalancerStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.LoadBalancerStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *LoadBalancerStatusDie) DieRelease() corev1.LoadBalancerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LoadBalancerStatusDie) DieReleasePtr() *corev1.LoadBalancerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *LoadBalancerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LoadBalancerStatusDie) DieStamp(fn func(r *corev1.LoadBalancerStatus)) *LoadBalancerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LoadBalancerStatusDie) DeepCopy() *LoadBalancerStatusDie {
	r := *d.r.DeepCopy()
	return &LoadBalancerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
func (d *LoadBalancerStatusDie) Ingress(v ...corev1.LoadBalancerIngress) *LoadBalancerStatusDie {
	return d.DieStamp(func(r *corev1.LoadBalancerStatus) {
		r.Ingress = v
	})
}

var LoadBalancerIngressBlank = (&LoadBalancerIngressDie{}).DieFeed(corev1.LoadBalancerIngress{})

type LoadBalancerIngressDie struct {
	mutable bool
	r       corev1.LoadBalancerIngress
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LoadBalancerIngressDie) DieImmutable(immutable bool) *LoadBalancerIngressDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LoadBalancerIngressDie) DieFeed(r corev1.LoadBalancerIngress) *LoadBalancerIngressDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LoadBalancerIngressDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LoadBalancerIngressDie) DieFeedPtr(r *corev1.LoadBalancerIngress) *LoadBalancerIngressDie {
	if r == nil {
		r = &corev1.LoadBalancerIngress{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *LoadBalancerIngressDie) DieFeedRawExtension(raw runtime.RawExtension) *LoadBalancerIngressDie {
	b, _ := json.Marshal(raw)
	r := corev1.LoadBalancerIngress{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *LoadBalancerIngressDie) DieRelease() corev1.LoadBalancerIngress {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LoadBalancerIngressDie) DieReleasePtr() *corev1.LoadBalancerIngress {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *LoadBalancerIngressDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LoadBalancerIngressDie) DieStamp(fn func(r *corev1.LoadBalancerIngress)) *LoadBalancerIngressDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LoadBalancerIngressDie) DeepCopy() *LoadBalancerIngressDie {
	r := *d.r.DeepCopy()
	return &LoadBalancerIngressDie{
		mutable: d.mutable,
		r:       r,
	}
}

// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
func (d *LoadBalancerIngressDie) IP(v string) *LoadBalancerIngressDie {
	return d.DieStamp(func(r *corev1.LoadBalancerIngress) {
		r.IP = v
	})
}

// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
func (d *LoadBalancerIngressDie) Hostname(v string) *LoadBalancerIngressDie {
	return d.DieStamp(func(r *corev1.LoadBalancerIngress) {
		r.Hostname = v
	})
}

// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
func (d *LoadBalancerIngressDie) Ports(v ...corev1.PortStatus) *LoadBalancerIngressDie {
	return d.DieStamp(func(r *corev1.LoadBalancerIngress) {
		r.Ports = v
	})
}

var PortStatusBlank = (&PortStatusDie{}).DieFeed(corev1.PortStatus{})

type PortStatusDie struct {
	mutable bool
	r       corev1.PortStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PortStatusDie) DieImmutable(immutable bool) *PortStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PortStatusDie) DieFeed(r corev1.PortStatus) *PortStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PortStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PortStatusDie) DieFeedPtr(r *corev1.PortStatus) *PortStatusDie {
	if r == nil {
		r = &corev1.PortStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PortStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *PortStatusDie {
	b, _ := json.Marshal(raw)
	r := corev1.PortStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PortStatusDie) DieRelease() corev1.PortStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PortStatusDie) DieReleasePtr() *corev1.PortStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PortStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PortStatusDie) DieStamp(fn func(r *corev1.PortStatus)) *PortStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PortStatusDie) DeepCopy() *PortStatusDie {
	r := *d.r.DeepCopy()
	return &PortStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Port is the port number of the service port of which status is recorded here
func (d *PortStatusDie) Port(v int32) *PortStatusDie {
	return d.DieStamp(func(r *corev1.PortStatus) {
		r.Port = v
	})
}

// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
func (d *PortStatusDie) Protocol(v corev1.Protocol) *PortStatusDie {
	return d.DieStamp(func(r *corev1.PortStatus) {
		r.Protocol = v
	})
}

// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use CamelCase names - cloud provider specific error values must have names that comply with the format foo.example.com/CamelCase. --- The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
func (d *PortStatusDie) Error(v *string) *PortStatusDie {
	return d.DieStamp(func(r *corev1.PortStatus) {
		r.Error = v
	})
}

var ServiceAccountBlank = (&ServiceAccountDie{}).DieFeed(corev1.ServiceAccount{})

type ServiceAccountDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.ServiceAccount
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceAccountDie) DieImmutable(immutable bool) *ServiceAccountDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceAccountDie) DieFeed(r corev1.ServiceAccount) *ServiceAccountDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceAccountDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceAccountDie) DieFeedPtr(r *corev1.ServiceAccount) *ServiceAccountDie {
	if r == nil {
		r = &corev1.ServiceAccount{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceAccountDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceAccountDie {
	b, _ := json.Marshal(raw)
	r := corev1.ServiceAccount{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceAccountDie) DieRelease() corev1.ServiceAccount {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceAccountDie) DieReleasePtr() *corev1.ServiceAccount {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *ServiceAccountDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceAccountDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceAccountDie) DieStamp(fn func(r *corev1.ServiceAccount)) *ServiceAccountDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceAccountDie) DeepCopy() *ServiceAccountDie {
	r := *d.r.DeepCopy()
	return &ServiceAccountDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*ServiceAccountDie)(nil)

func (d *ServiceAccountDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceAccountDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceAccountDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceAccountDie) UnmarshalJSON(b []byte) error {
	if d == ServiceAccountBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &corev1.ServiceAccount{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceAccountDie) APIVersion(v string) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceAccountDie) Kind(v string) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceAccountDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
func (d *ServiceAccountDie) Secrets(v ...corev1.ObjectReference) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		r.Secrets = v
	})
}

// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
func (d *ServiceAccountDie) ImagePullSecrets(v ...corev1.LocalObjectReference) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		r.ImagePullSecrets = v
	})
}

// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
func (d *ServiceAccountDie) AutomountServiceAccountToken(v *bool) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		r.AutomountServiceAccountToken = v
	})
}

var VolumeBlank = (&VolumeDie{}).DieFeed(corev1.Volume{})

type VolumeDie struct {
	mutable bool
	r       corev1.Volume
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeDie) DieImmutable(immutable bool) *VolumeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeDie) DieFeed(r corev1.Volume) *VolumeDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeDie) DieFeedPtr(r *corev1.Volume) *VolumeDie {
	if r == nil {
		r = &corev1.Volume{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeDie) DieFeedRawExtension(raw runtime.RawExtension) *VolumeDie {
	b, _ := json.Marshal(raw)
	r := corev1.Volume{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeDie) DieRelease() corev1.Volume {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeDie) DieReleasePtr() *corev1.Volume {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeDie) DieStamp(fn func(r *corev1.Volume)) *VolumeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeDie) DeepCopy() *VolumeDie {
	r := *d.r.DeepCopy()
	return &VolumeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (d *VolumeDie) Name(v string) *VolumeDie {
	return d.DieStamp(func(r *corev1.Volume) {
		r.Name = v
	})
}

// volumeSource represents the location and type of the mounted volume. If not specified, the Volume is implied to be an EmptyDir. This implied behavior is deprecated and will be removed in a future version.
func (d *VolumeDie) VolumeSource(v corev1.VolumeSource) *VolumeDie {
	return d.DieStamp(func(r *corev1.Volume) {
		r.VolumeSource = v
	})
}

var HostPathVolumeSourceBlank = (&HostPathVolumeSourceDie{}).DieFeed(corev1.HostPathVolumeSource{})

type HostPathVolumeSourceDie struct {
	mutable bool
	r       corev1.HostPathVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HostPathVolumeSourceDie) DieImmutable(immutable bool) *HostPathVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HostPathVolumeSourceDie) DieFeed(r corev1.HostPathVolumeSource) *HostPathVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HostPathVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HostPathVolumeSourceDie) DieFeedPtr(r *corev1.HostPathVolumeSource) *HostPathVolumeSourceDie {
	if r == nil {
		r = &corev1.HostPathVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *HostPathVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *HostPathVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.HostPathVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *HostPathVolumeSourceDie) DieRelease() corev1.HostPathVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HostPathVolumeSourceDie) DieReleasePtr() *corev1.HostPathVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *HostPathVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HostPathVolumeSourceDie) DieStamp(fn func(r *corev1.HostPathVolumeSource)) *HostPathVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HostPathVolumeSourceDie) DeepCopy() *HostPathVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &HostPathVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (d *HostPathVolumeSourceDie) Path(v string) *HostPathVolumeSourceDie {
	return d.DieStamp(func(r *corev1.HostPathVolumeSource) {
		r.Path = v
	})
}

// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (d *HostPathVolumeSourceDie) Type(v *corev1.HostPathType) *HostPathVolumeSourceDie {
	return d.DieStamp(func(r *corev1.HostPathVolumeSource) {
		r.Type = v
	})
}

var EmptyDirVolumeSourceBlank = (&EmptyDirVolumeSourceDie{}).DieFeed(corev1.EmptyDirVolumeSource{})

type EmptyDirVolumeSourceDie struct {
	mutable bool
	r       corev1.EmptyDirVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EmptyDirVolumeSourceDie) DieImmutable(immutable bool) *EmptyDirVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EmptyDirVolumeSourceDie) DieFeed(r corev1.EmptyDirVolumeSource) *EmptyDirVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EmptyDirVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EmptyDirVolumeSourceDie) DieFeedPtr(r *corev1.EmptyDirVolumeSource) *EmptyDirVolumeSourceDie {
	if r == nil {
		r = &corev1.EmptyDirVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EmptyDirVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *EmptyDirVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.EmptyDirVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EmptyDirVolumeSourceDie) DieRelease() corev1.EmptyDirVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EmptyDirVolumeSourceDie) DieReleasePtr() *corev1.EmptyDirVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EmptyDirVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EmptyDirVolumeSourceDie) DieStamp(fn func(r *corev1.EmptyDirVolumeSource)) *EmptyDirVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EmptyDirVolumeSourceDie) DeepCopy() *EmptyDirVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &EmptyDirVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (d *EmptyDirVolumeSourceDie) Medium(v corev1.StorageMedium) *EmptyDirVolumeSourceDie {
	return d.DieStamp(func(r *corev1.EmptyDirVolumeSource) {
		r.Medium = v
	})
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
func (d *EmptyDirVolumeSourceDie) SizeLimit(v *resource.Quantity) *EmptyDirVolumeSourceDie {
	return d.DieStamp(func(r *corev1.EmptyDirVolumeSource) {
		r.SizeLimit = v
	})
}

var GCEPersistentDiskVolumeSourceBlank = (&GCEPersistentDiskVolumeSourceDie{}).DieFeed(corev1.GCEPersistentDiskVolumeSource{})

type GCEPersistentDiskVolumeSourceDie struct {
	mutable bool
	r       corev1.GCEPersistentDiskVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GCEPersistentDiskVolumeSourceDie) DieImmutable(immutable bool) *GCEPersistentDiskVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GCEPersistentDiskVolumeSourceDie) DieFeed(r corev1.GCEPersistentDiskVolumeSource) *GCEPersistentDiskVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GCEPersistentDiskVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GCEPersistentDiskVolumeSourceDie) DieFeedPtr(r *corev1.GCEPersistentDiskVolumeSource) *GCEPersistentDiskVolumeSourceDie {
	if r == nil {
		r = &corev1.GCEPersistentDiskVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *GCEPersistentDiskVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *GCEPersistentDiskVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.GCEPersistentDiskVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *GCEPersistentDiskVolumeSourceDie) DieRelease() corev1.GCEPersistentDiskVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GCEPersistentDiskVolumeSourceDie) DieReleasePtr() *corev1.GCEPersistentDiskVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *GCEPersistentDiskVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GCEPersistentDiskVolumeSourceDie) DieStamp(fn func(r *corev1.GCEPersistentDiskVolumeSource)) *GCEPersistentDiskVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GCEPersistentDiskVolumeSourceDie) DeepCopy() *GCEPersistentDiskVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &GCEPersistentDiskVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (d *GCEPersistentDiskVolumeSourceDie) PDName(v string) *GCEPersistentDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GCEPersistentDiskVolumeSource) {
		r.PDName = v
	})
}

// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
func (d *GCEPersistentDiskVolumeSourceDie) FSType(v string) *GCEPersistentDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GCEPersistentDiskVolumeSource) {
		r.FSType = v
	})
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (d *GCEPersistentDiskVolumeSourceDie) Partition(v int32) *GCEPersistentDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GCEPersistentDiskVolumeSource) {
		r.Partition = v
	})
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (d *GCEPersistentDiskVolumeSourceDie) ReadOnly(v bool) *GCEPersistentDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GCEPersistentDiskVolumeSource) {
		r.ReadOnly = v
	})
}

var AWSElasticBlockStoreVolumeSourceBlank = (&AWSElasticBlockStoreVolumeSourceDie{}).DieFeed(corev1.AWSElasticBlockStoreVolumeSource{})

type AWSElasticBlockStoreVolumeSourceDie struct {
	mutable bool
	r       corev1.AWSElasticBlockStoreVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *AWSElasticBlockStoreVolumeSourceDie) DieImmutable(immutable bool) *AWSElasticBlockStoreVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *AWSElasticBlockStoreVolumeSourceDie) DieFeed(r corev1.AWSElasticBlockStoreVolumeSource) *AWSElasticBlockStoreVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &AWSElasticBlockStoreVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *AWSElasticBlockStoreVolumeSourceDie) DieFeedPtr(r *corev1.AWSElasticBlockStoreVolumeSource) *AWSElasticBlockStoreVolumeSourceDie {
	if r == nil {
		r = &corev1.AWSElasticBlockStoreVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *AWSElasticBlockStoreVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *AWSElasticBlockStoreVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.AWSElasticBlockStoreVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *AWSElasticBlockStoreVolumeSourceDie) DieRelease() corev1.AWSElasticBlockStoreVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *AWSElasticBlockStoreVolumeSourceDie) DieReleasePtr() *corev1.AWSElasticBlockStoreVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *AWSElasticBlockStoreVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *AWSElasticBlockStoreVolumeSourceDie) DieStamp(fn func(r *corev1.AWSElasticBlockStoreVolumeSource)) *AWSElasticBlockStoreVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *AWSElasticBlockStoreVolumeSourceDie) DeepCopy() *AWSElasticBlockStoreVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &AWSElasticBlockStoreVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (d *AWSElasticBlockStoreVolumeSourceDie) VolumeID(v string) *AWSElasticBlockStoreVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AWSElasticBlockStoreVolumeSource) {
		r.VolumeID = v
	})
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
func (d *AWSElasticBlockStoreVolumeSourceDie) FSType(v string) *AWSElasticBlockStoreVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AWSElasticBlockStoreVolumeSource) {
		r.FSType = v
	})
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (d *AWSElasticBlockStoreVolumeSourceDie) Partition(v int32) *AWSElasticBlockStoreVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AWSElasticBlockStoreVolumeSource) {
		r.Partition = v
	})
}

// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (d *AWSElasticBlockStoreVolumeSourceDie) ReadOnly(v bool) *AWSElasticBlockStoreVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AWSElasticBlockStoreVolumeSource) {
		r.ReadOnly = v
	})
}

var GitRepoVolumeSourceBlank = (&GitRepoVolumeSourceDie{}).DieFeed(corev1.GitRepoVolumeSource{})

type GitRepoVolumeSourceDie struct {
	mutable bool
	r       corev1.GitRepoVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GitRepoVolumeSourceDie) DieImmutable(immutable bool) *GitRepoVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GitRepoVolumeSourceDie) DieFeed(r corev1.GitRepoVolumeSource) *GitRepoVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GitRepoVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GitRepoVolumeSourceDie) DieFeedPtr(r *corev1.GitRepoVolumeSource) *GitRepoVolumeSourceDie {
	if r == nil {
		r = &corev1.GitRepoVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *GitRepoVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *GitRepoVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.GitRepoVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *GitRepoVolumeSourceDie) DieRelease() corev1.GitRepoVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GitRepoVolumeSourceDie) DieReleasePtr() *corev1.GitRepoVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *GitRepoVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GitRepoVolumeSourceDie) DieStamp(fn func(r *corev1.GitRepoVolumeSource)) *GitRepoVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GitRepoVolumeSourceDie) DeepCopy() *GitRepoVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &GitRepoVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// repository is the URL
func (d *GitRepoVolumeSourceDie) Repository(v string) *GitRepoVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GitRepoVolumeSource) {
		r.Repository = v
	})
}

// revision is the commit hash for the specified revision.
func (d *GitRepoVolumeSourceDie) Revision(v string) *GitRepoVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GitRepoVolumeSource) {
		r.Revision = v
	})
}

// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (d *GitRepoVolumeSourceDie) Directory(v string) *GitRepoVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GitRepoVolumeSource) {
		r.Directory = v
	})
}

var SecretVolumeSourceBlank = (&SecretVolumeSourceDie{}).DieFeed(corev1.SecretVolumeSource{})

type SecretVolumeSourceDie struct {
	mutable bool
	r       corev1.SecretVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SecretVolumeSourceDie) DieImmutable(immutable bool) *SecretVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SecretVolumeSourceDie) DieFeed(r corev1.SecretVolumeSource) *SecretVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SecretVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SecretVolumeSourceDie) DieFeedPtr(r *corev1.SecretVolumeSource) *SecretVolumeSourceDie {
	if r == nil {
		r = &corev1.SecretVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *SecretVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.SecretVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SecretVolumeSourceDie) DieRelease() corev1.SecretVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SecretVolumeSourceDie) DieReleasePtr() *corev1.SecretVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SecretVolumeSourceDie) DieStamp(fn func(r *corev1.SecretVolumeSource)) *SecretVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SecretVolumeSourceDie) DeepCopy() *SecretVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &SecretVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (d *SecretVolumeSourceDie) SecretName(v string) *SecretVolumeSourceDie {
	return d.DieStamp(func(r *corev1.SecretVolumeSource) {
		r.SecretName = v
	})
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (d *SecretVolumeSourceDie) Items(v ...corev1.KeyToPath) *SecretVolumeSourceDie {
	return d.DieStamp(func(r *corev1.SecretVolumeSource) {
		r.Items = v
	})
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (d *SecretVolumeSourceDie) DefaultMode(v *int32) *SecretVolumeSourceDie {
	return d.DieStamp(func(r *corev1.SecretVolumeSource) {
		r.DefaultMode = v
	})
}

// optional field specify whether the Secret or its keys must be defined
func (d *SecretVolumeSourceDie) Optional(v *bool) *SecretVolumeSourceDie {
	return d.DieStamp(func(r *corev1.SecretVolumeSource) {
		r.Optional = v
	})
}

var NFSVolumeSourceBlank = (&NFSVolumeSourceDie{}).DieFeed(corev1.NFSVolumeSource{})

type NFSVolumeSourceDie struct {
	mutable bool
	r       corev1.NFSVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NFSVolumeSourceDie) DieImmutable(immutable bool) *NFSVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NFSVolumeSourceDie) DieFeed(r corev1.NFSVolumeSource) *NFSVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NFSVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NFSVolumeSourceDie) DieFeedPtr(r *corev1.NFSVolumeSource) *NFSVolumeSourceDie {
	if r == nil {
		r = &corev1.NFSVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *NFSVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *NFSVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.NFSVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *NFSVolumeSourceDie) DieRelease() corev1.NFSVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NFSVolumeSourceDie) DieReleasePtr() *corev1.NFSVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *NFSVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NFSVolumeSourceDie) DieStamp(fn func(r *corev1.NFSVolumeSource)) *NFSVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NFSVolumeSourceDie) DeepCopy() *NFSVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &NFSVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (d *NFSVolumeSourceDie) Server(v string) *NFSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.NFSVolumeSource) {
		r.Server = v
	})
}

// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (d *NFSVolumeSourceDie) Path(v string) *NFSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.NFSVolumeSource) {
		r.Path = v
	})
}

// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (d *NFSVolumeSourceDie) ReadOnly(v bool) *NFSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.NFSVolumeSource) {
		r.ReadOnly = v
	})
}

var ISCSIVolumeSourceBlank = (&ISCSIVolumeSourceDie{}).DieFeed(corev1.ISCSIVolumeSource{})

type ISCSIVolumeSourceDie struct {
	mutable bool
	r       corev1.ISCSIVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ISCSIVolumeSourceDie) DieImmutable(immutable bool) *ISCSIVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ISCSIVolumeSourceDie) DieFeed(r corev1.ISCSIVolumeSource) *ISCSIVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ISCSIVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ISCSIVolumeSourceDie) DieFeedPtr(r *corev1.ISCSIVolumeSource) *ISCSIVolumeSourceDie {
	if r == nil {
		r = &corev1.ISCSIVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ISCSIVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ISCSIVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.ISCSIVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ISCSIVolumeSourceDie) DieRelease() corev1.ISCSIVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ISCSIVolumeSourceDie) DieReleasePtr() *corev1.ISCSIVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ISCSIVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ISCSIVolumeSourceDie) DieStamp(fn func(r *corev1.ISCSIVolumeSource)) *ISCSIVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ISCSIVolumeSourceDie) DeepCopy() *ISCSIVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &ISCSIVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (d *ISCSIVolumeSourceDie) TargetPortal(v string) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.TargetPortal = v
	})
}

// iqn is the target iSCSI Qualified Name.
func (d *ISCSIVolumeSourceDie) IQN(v string) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.IQN = v
	})
}

// lun represents iSCSI Target Lun number.
func (d *ISCSIVolumeSourceDie) Lun(v int32) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.Lun = v
	})
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (d *ISCSIVolumeSourceDie) ISCSIInterface(v string) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.ISCSIInterface = v
	})
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
func (d *ISCSIVolumeSourceDie) FSType(v string) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.FSType = v
	})
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (d *ISCSIVolumeSourceDie) ReadOnly(v bool) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.ReadOnly = v
	})
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (d *ISCSIVolumeSourceDie) Portals(v ...string) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.Portals = v
	})
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (d *ISCSIVolumeSourceDie) DiscoveryCHAPAuth(v bool) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.DiscoveryCHAPAuth = v
	})
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (d *ISCSIVolumeSourceDie) SessionCHAPAuth(v bool) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.SessionCHAPAuth = v
	})
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (d *ISCSIVolumeSourceDie) SecretRef(v *corev1.LocalObjectReference) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.SecretRef = v
	})
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (d *ISCSIVolumeSourceDie) InitiatorName(v *string) *ISCSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ISCSIVolumeSource) {
		r.InitiatorName = v
	})
}

var GlusterfsVolumeSourceBlank = (&GlusterfsVolumeSourceDie{}).DieFeed(corev1.GlusterfsVolumeSource{})

type GlusterfsVolumeSourceDie struct {
	mutable bool
	r       corev1.GlusterfsVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GlusterfsVolumeSourceDie) DieImmutable(immutable bool) *GlusterfsVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GlusterfsVolumeSourceDie) DieFeed(r corev1.GlusterfsVolumeSource) *GlusterfsVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GlusterfsVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GlusterfsVolumeSourceDie) DieFeedPtr(r *corev1.GlusterfsVolumeSource) *GlusterfsVolumeSourceDie {
	if r == nil {
		r = &corev1.GlusterfsVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *GlusterfsVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *GlusterfsVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.GlusterfsVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *GlusterfsVolumeSourceDie) DieRelease() corev1.GlusterfsVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GlusterfsVolumeSourceDie) DieReleasePtr() *corev1.GlusterfsVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *GlusterfsVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GlusterfsVolumeSourceDie) DieStamp(fn func(r *corev1.GlusterfsVolumeSource)) *GlusterfsVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GlusterfsVolumeSourceDie) DeepCopy() *GlusterfsVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &GlusterfsVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (d *GlusterfsVolumeSourceDie) EndpointsName(v string) *GlusterfsVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GlusterfsVolumeSource) {
		r.EndpointsName = v
	})
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (d *GlusterfsVolumeSourceDie) Path(v string) *GlusterfsVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GlusterfsVolumeSource) {
		r.Path = v
	})
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (d *GlusterfsVolumeSourceDie) ReadOnly(v bool) *GlusterfsVolumeSourceDie {
	return d.DieStamp(func(r *corev1.GlusterfsVolumeSource) {
		r.ReadOnly = v
	})
}

var PersistentVolumeClaimVolumeSourceBlank = (&PersistentVolumeClaimVolumeSourceDie{}).DieFeed(corev1.PersistentVolumeClaimVolumeSource{})

type PersistentVolumeClaimVolumeSourceDie struct {
	mutable bool
	r       corev1.PersistentVolumeClaimVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PersistentVolumeClaimVolumeSourceDie) DieImmutable(immutable bool) *PersistentVolumeClaimVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PersistentVolumeClaimVolumeSourceDie) DieFeed(r corev1.PersistentVolumeClaimVolumeSource) *PersistentVolumeClaimVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeClaimVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PersistentVolumeClaimVolumeSourceDie) DieFeedPtr(r *corev1.PersistentVolumeClaimVolumeSource) *PersistentVolumeClaimVolumeSourceDie {
	if r == nil {
		r = &corev1.PersistentVolumeClaimVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *PersistentVolumeClaimVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.PersistentVolumeClaimVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PersistentVolumeClaimVolumeSourceDie) DieRelease() corev1.PersistentVolumeClaimVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PersistentVolumeClaimVolumeSourceDie) DieReleasePtr() *corev1.PersistentVolumeClaimVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PersistentVolumeClaimVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PersistentVolumeClaimVolumeSourceDie) DieStamp(fn func(r *corev1.PersistentVolumeClaimVolumeSource)) *PersistentVolumeClaimVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PersistentVolumeClaimVolumeSourceDie) DeepCopy() *PersistentVolumeClaimVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeClaimVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (d *PersistentVolumeClaimVolumeSourceDie) ClaimName(v string) *PersistentVolumeClaimVolumeSourceDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimVolumeSource) {
		r.ClaimName = v
	})
}

// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
func (d *PersistentVolumeClaimVolumeSourceDie) ReadOnly(v bool) *PersistentVolumeClaimVolumeSourceDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimVolumeSource) {
		r.ReadOnly = v
	})
}

var RBDVolumeSourceBlank = (&RBDVolumeSourceDie{}).DieFeed(corev1.RBDVolumeSource{})

type RBDVolumeSourceDie struct {
	mutable bool
	r       corev1.RBDVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *RBDVolumeSourceDie) DieImmutable(immutable bool) *RBDVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *RBDVolumeSourceDie) DieFeed(r corev1.RBDVolumeSource) *RBDVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &RBDVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *RBDVolumeSourceDie) DieFeedPtr(r *corev1.RBDVolumeSource) *RBDVolumeSourceDie {
	if r == nil {
		r = &corev1.RBDVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *RBDVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *RBDVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.RBDVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *RBDVolumeSourceDie) DieRelease() corev1.RBDVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *RBDVolumeSourceDie) DieReleasePtr() *corev1.RBDVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *RBDVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *RBDVolumeSourceDie) DieStamp(fn func(r *corev1.RBDVolumeSource)) *RBDVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *RBDVolumeSourceDie) DeepCopy() *RBDVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &RBDVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDVolumeSourceDie) CephMonitors(v ...string) *RBDVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDVolumeSource) {
		r.CephMonitors = v
	})
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDVolumeSourceDie) RBDImage(v string) *RBDVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDVolumeSource) {
		r.RBDImage = v
	})
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
func (d *RBDVolumeSourceDie) FSType(v string) *RBDVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDVolumeSource) {
		r.FSType = v
	})
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDVolumeSourceDie) RBDPool(v string) *RBDVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDVolumeSource) {
		r.RBDPool = v
	})
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDVolumeSourceDie) RadosUser(v string) *RBDVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDVolumeSource) {
		r.RadosUser = v
	})
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDVolumeSourceDie) Keyring(v string) *RBDVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDVolumeSource) {
		r.Keyring = v
	})
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDVolumeSourceDie) SecretRef(v *corev1.LocalObjectReference) *RBDVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDVolumeSource) {
		r.SecretRef = v
	})
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (d *RBDVolumeSourceDie) ReadOnly(v bool) *RBDVolumeSourceDie {
	return d.DieStamp(func(r *corev1.RBDVolumeSource) {
		r.ReadOnly = v
	})
}

var FlexVolumeSourceBlank = (&FlexVolumeSourceDie{}).DieFeed(corev1.FlexVolumeSource{})

type FlexVolumeSourceDie struct {
	mutable bool
	r       corev1.FlexVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FlexVolumeSourceDie) DieImmutable(immutable bool) *FlexVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FlexVolumeSourceDie) DieFeed(r corev1.FlexVolumeSource) *FlexVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &FlexVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FlexVolumeSourceDie) DieFeedPtr(r *corev1.FlexVolumeSource) *FlexVolumeSourceDie {
	if r == nil {
		r = &corev1.FlexVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *FlexVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *FlexVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.FlexVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *FlexVolumeSourceDie) DieRelease() corev1.FlexVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FlexVolumeSourceDie) DieReleasePtr() *corev1.FlexVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *FlexVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FlexVolumeSourceDie) DieStamp(fn func(r *corev1.FlexVolumeSource)) *FlexVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FlexVolumeSourceDie) DeepCopy() *FlexVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &FlexVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// driver is the name of the driver to use for this volume.
func (d *FlexVolumeSourceDie) Driver(v string) *FlexVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexVolumeSource) {
		r.Driver = v
	})
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (d *FlexVolumeSourceDie) FSType(v string) *FlexVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexVolumeSource) {
		r.FSType = v
	})
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (d *FlexVolumeSourceDie) SecretRef(v *corev1.LocalObjectReference) *FlexVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexVolumeSource) {
		r.SecretRef = v
	})
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *FlexVolumeSourceDie) ReadOnly(v bool) *FlexVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexVolumeSource) {
		r.ReadOnly = v
	})
}

// options is Optional: this field holds extra command options if any.
func (d *FlexVolumeSourceDie) Options(v map[string]string) *FlexVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlexVolumeSource) {
		r.Options = v
	})
}

var CinderVolumeSourceBlank = (&CinderVolumeSourceDie{}).DieFeed(corev1.CinderVolumeSource{})

type CinderVolumeSourceDie struct {
	mutable bool
	r       corev1.CinderVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CinderVolumeSourceDie) DieImmutable(immutable bool) *CinderVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CinderVolumeSourceDie) DieFeed(r corev1.CinderVolumeSource) *CinderVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CinderVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CinderVolumeSourceDie) DieFeedPtr(r *corev1.CinderVolumeSource) *CinderVolumeSourceDie {
	if r == nil {
		r = &corev1.CinderVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *CinderVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *CinderVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.CinderVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *CinderVolumeSourceDie) DieRelease() corev1.CinderVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CinderVolumeSourceDie) DieReleasePtr() *corev1.CinderVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *CinderVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CinderVolumeSourceDie) DieStamp(fn func(r *corev1.CinderVolumeSource)) *CinderVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CinderVolumeSourceDie) DeepCopy() *CinderVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &CinderVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (d *CinderVolumeSourceDie) VolumeID(v string) *CinderVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CinderVolumeSource) {
		r.VolumeID = v
	})
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (d *CinderVolumeSourceDie) FSType(v string) *CinderVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CinderVolumeSource) {
		r.FSType = v
	})
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (d *CinderVolumeSourceDie) ReadOnly(v bool) *CinderVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CinderVolumeSource) {
		r.ReadOnly = v
	})
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
func (d *CinderVolumeSourceDie) SecretRef(v *corev1.LocalObjectReference) *CinderVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CinderVolumeSource) {
		r.SecretRef = v
	})
}

var CephFSVolumeSourceBlank = (&CephFSVolumeSourceDie{}).DieFeed(corev1.CephFSVolumeSource{})

type CephFSVolumeSourceDie struct {
	mutable bool
	r       corev1.CephFSVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CephFSVolumeSourceDie) DieImmutable(immutable bool) *CephFSVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CephFSVolumeSourceDie) DieFeed(r corev1.CephFSVolumeSource) *CephFSVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CephFSVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CephFSVolumeSourceDie) DieFeedPtr(r *corev1.CephFSVolumeSource) *CephFSVolumeSourceDie {
	if r == nil {
		r = &corev1.CephFSVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *CephFSVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *CephFSVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.CephFSVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *CephFSVolumeSourceDie) DieRelease() corev1.CephFSVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CephFSVolumeSourceDie) DieReleasePtr() *corev1.CephFSVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *CephFSVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CephFSVolumeSourceDie) DieStamp(fn func(r *corev1.CephFSVolumeSource)) *CephFSVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CephFSVolumeSourceDie) DeepCopy() *CephFSVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &CephFSVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSVolumeSourceDie) Monitors(v ...string) *CephFSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSVolumeSource) {
		r.Monitors = v
	})
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (d *CephFSVolumeSourceDie) Path(v string) *CephFSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSVolumeSource) {
		r.Path = v
	})
}

// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSVolumeSourceDie) User(v string) *CephFSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSVolumeSource) {
		r.User = v
	})
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSVolumeSourceDie) SecretFile(v string) *CephFSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSVolumeSource) {
		r.SecretFile = v
	})
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSVolumeSourceDie) SecretRef(v *corev1.LocalObjectReference) *CephFSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSVolumeSource) {
		r.SecretRef = v
	})
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (d *CephFSVolumeSourceDie) ReadOnly(v bool) *CephFSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CephFSVolumeSource) {
		r.ReadOnly = v
	})
}

var FlockerVolumeSourceBlank = (&FlockerVolumeSourceDie{}).DieFeed(corev1.FlockerVolumeSource{})

type FlockerVolumeSourceDie struct {
	mutable bool
	r       corev1.FlockerVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FlockerVolumeSourceDie) DieImmutable(immutable bool) *FlockerVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FlockerVolumeSourceDie) DieFeed(r corev1.FlockerVolumeSource) *FlockerVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &FlockerVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FlockerVolumeSourceDie) DieFeedPtr(r *corev1.FlockerVolumeSource) *FlockerVolumeSourceDie {
	if r == nil {
		r = &corev1.FlockerVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *FlockerVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *FlockerVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.FlockerVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *FlockerVolumeSourceDie) DieRelease() corev1.FlockerVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FlockerVolumeSourceDie) DieReleasePtr() *corev1.FlockerVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *FlockerVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FlockerVolumeSourceDie) DieStamp(fn func(r *corev1.FlockerVolumeSource)) *FlockerVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FlockerVolumeSourceDie) DeepCopy() *FlockerVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &FlockerVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
func (d *FlockerVolumeSourceDie) DatasetName(v string) *FlockerVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlockerVolumeSource) {
		r.DatasetName = v
	})
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (d *FlockerVolumeSourceDie) DatasetUUID(v string) *FlockerVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FlockerVolumeSource) {
		r.DatasetUUID = v
	})
}

var DownwardAPIVolumeSourceBlank = (&DownwardAPIVolumeSourceDie{}).DieFeed(corev1.DownwardAPIVolumeSource{})

type DownwardAPIVolumeSourceDie struct {
	mutable bool
	r       corev1.DownwardAPIVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *DownwardAPIVolumeSourceDie) DieImmutable(immutable bool) *DownwardAPIVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *DownwardAPIVolumeSourceDie) DieFeed(r corev1.DownwardAPIVolumeSource) *DownwardAPIVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &DownwardAPIVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *DownwardAPIVolumeSourceDie) DieFeedPtr(r *corev1.DownwardAPIVolumeSource) *DownwardAPIVolumeSourceDie {
	if r == nil {
		r = &corev1.DownwardAPIVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *DownwardAPIVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *DownwardAPIVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.DownwardAPIVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *DownwardAPIVolumeSourceDie) DieRelease() corev1.DownwardAPIVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *DownwardAPIVolumeSourceDie) DieReleasePtr() *corev1.DownwardAPIVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *DownwardAPIVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *DownwardAPIVolumeSourceDie) DieStamp(fn func(r *corev1.DownwardAPIVolumeSource)) *DownwardAPIVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *DownwardAPIVolumeSourceDie) DeepCopy() *DownwardAPIVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &DownwardAPIVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Items is a list of downward API volume file
func (d *DownwardAPIVolumeSourceDie) Items(v ...corev1.DownwardAPIVolumeFile) *DownwardAPIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.DownwardAPIVolumeSource) {
		r.Items = v
	})
}

// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (d *DownwardAPIVolumeSourceDie) DefaultMode(v *int32) *DownwardAPIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.DownwardAPIVolumeSource) {
		r.DefaultMode = v
	})
}

var DownwardAPIVolumeFileBlank = (&DownwardAPIVolumeFileDie{}).DieFeed(corev1.DownwardAPIVolumeFile{})

type DownwardAPIVolumeFileDie struct {
	mutable bool
	r       corev1.DownwardAPIVolumeFile
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *DownwardAPIVolumeFileDie) DieImmutable(immutable bool) *DownwardAPIVolumeFileDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *DownwardAPIVolumeFileDie) DieFeed(r corev1.DownwardAPIVolumeFile) *DownwardAPIVolumeFileDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &DownwardAPIVolumeFileDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *DownwardAPIVolumeFileDie) DieFeedPtr(r *corev1.DownwardAPIVolumeFile) *DownwardAPIVolumeFileDie {
	if r == nil {
		r = &corev1.DownwardAPIVolumeFile{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *DownwardAPIVolumeFileDie) DieFeedRawExtension(raw runtime.RawExtension) *DownwardAPIVolumeFileDie {
	b, _ := json.Marshal(raw)
	r := corev1.DownwardAPIVolumeFile{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *DownwardAPIVolumeFileDie) DieRelease() corev1.DownwardAPIVolumeFile {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *DownwardAPIVolumeFileDie) DieReleasePtr() *corev1.DownwardAPIVolumeFile {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *DownwardAPIVolumeFileDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *DownwardAPIVolumeFileDie) DieStamp(fn func(r *corev1.DownwardAPIVolumeFile)) *DownwardAPIVolumeFileDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *DownwardAPIVolumeFileDie) DeepCopy() *DownwardAPIVolumeFileDie {
	r := *d.r.DeepCopy()
	return &DownwardAPIVolumeFileDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (d *DownwardAPIVolumeFileDie) Path(v string) *DownwardAPIVolumeFileDie {
	return d.DieStamp(func(r *corev1.DownwardAPIVolumeFile) {
		r.Path = v
	})
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
func (d *DownwardAPIVolumeFileDie) FieldRef(v *corev1.ObjectFieldSelector) *DownwardAPIVolumeFileDie {
	return d.DieStamp(func(r *corev1.DownwardAPIVolumeFile) {
		r.FieldRef = v
	})
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
func (d *DownwardAPIVolumeFileDie) ResourceFieldRef(v *corev1.ResourceFieldSelector) *DownwardAPIVolumeFileDie {
	return d.DieStamp(func(r *corev1.DownwardAPIVolumeFile) {
		r.ResourceFieldRef = v
	})
}

// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (d *DownwardAPIVolumeFileDie) Mode(v *int32) *DownwardAPIVolumeFileDie {
	return d.DieStamp(func(r *corev1.DownwardAPIVolumeFile) {
		r.Mode = v
	})
}

var FCVolumeSourceBlank = (&FCVolumeSourceDie{}).DieFeed(corev1.FCVolumeSource{})

type FCVolumeSourceDie struct {
	mutable bool
	r       corev1.FCVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FCVolumeSourceDie) DieImmutable(immutable bool) *FCVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FCVolumeSourceDie) DieFeed(r corev1.FCVolumeSource) *FCVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &FCVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FCVolumeSourceDie) DieFeedPtr(r *corev1.FCVolumeSource) *FCVolumeSourceDie {
	if r == nil {
		r = &corev1.FCVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *FCVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *FCVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.FCVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *FCVolumeSourceDie) DieRelease() corev1.FCVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FCVolumeSourceDie) DieReleasePtr() *corev1.FCVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *FCVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FCVolumeSourceDie) DieStamp(fn func(r *corev1.FCVolumeSource)) *FCVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FCVolumeSourceDie) DeepCopy() *FCVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &FCVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (d *FCVolumeSourceDie) TargetWWNs(v ...string) *FCVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FCVolumeSource) {
		r.TargetWWNs = v
	})
}

// lun is Optional: FC target lun number
func (d *FCVolumeSourceDie) Lun(v *int32) *FCVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FCVolumeSource) {
		r.Lun = v
	})
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
func (d *FCVolumeSourceDie) FSType(v string) *FCVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FCVolumeSource) {
		r.FSType = v
	})
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *FCVolumeSourceDie) ReadOnly(v bool) *FCVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FCVolumeSource) {
		r.ReadOnly = v
	})
}

// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (d *FCVolumeSourceDie) WWIDs(v ...string) *FCVolumeSourceDie {
	return d.DieStamp(func(r *corev1.FCVolumeSource) {
		r.WWIDs = v
	})
}

var AzureFileVolumeSourceBlank = (&AzureFileVolumeSourceDie{}).DieFeed(corev1.AzureFileVolumeSource{})

type AzureFileVolumeSourceDie struct {
	mutable bool
	r       corev1.AzureFileVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *AzureFileVolumeSourceDie) DieImmutable(immutable bool) *AzureFileVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *AzureFileVolumeSourceDie) DieFeed(r corev1.AzureFileVolumeSource) *AzureFileVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &AzureFileVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *AzureFileVolumeSourceDie) DieFeedPtr(r *corev1.AzureFileVolumeSource) *AzureFileVolumeSourceDie {
	if r == nil {
		r = &corev1.AzureFileVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *AzureFileVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *AzureFileVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.AzureFileVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *AzureFileVolumeSourceDie) DieRelease() corev1.AzureFileVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *AzureFileVolumeSourceDie) DieReleasePtr() *corev1.AzureFileVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *AzureFileVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *AzureFileVolumeSourceDie) DieStamp(fn func(r *corev1.AzureFileVolumeSource)) *AzureFileVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *AzureFileVolumeSourceDie) DeepCopy() *AzureFileVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &AzureFileVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (d *AzureFileVolumeSourceDie) SecretName(v string) *AzureFileVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureFileVolumeSource) {
		r.SecretName = v
	})
}

// shareName is the azure share Name
func (d *AzureFileVolumeSourceDie) ShareName(v string) *AzureFileVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureFileVolumeSource) {
		r.ShareName = v
	})
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *AzureFileVolumeSourceDie) ReadOnly(v bool) *AzureFileVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureFileVolumeSource) {
		r.ReadOnly = v
	})
}

var ConfigMapVolumeSourceBlank = (&ConfigMapVolumeSourceDie{}).DieFeed(corev1.ConfigMapVolumeSource{})

type ConfigMapVolumeSourceDie struct {
	mutable bool
	r       corev1.ConfigMapVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConfigMapVolumeSourceDie) DieImmutable(immutable bool) *ConfigMapVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConfigMapVolumeSourceDie) DieFeed(r corev1.ConfigMapVolumeSource) *ConfigMapVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ConfigMapVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConfigMapVolumeSourceDie) DieFeedPtr(r *corev1.ConfigMapVolumeSource) *ConfigMapVolumeSourceDie {
	if r == nil {
		r = &corev1.ConfigMapVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ConfigMapVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.ConfigMapVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ConfigMapVolumeSourceDie) DieRelease() corev1.ConfigMapVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConfigMapVolumeSourceDie) DieReleasePtr() *corev1.ConfigMapVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConfigMapVolumeSourceDie) DieStamp(fn func(r *corev1.ConfigMapVolumeSource)) *ConfigMapVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConfigMapVolumeSourceDie) DeepCopy() *ConfigMapVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &ConfigMapVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ConfigMapVolumeSourceDie) LocalObjectReference(v corev1.LocalObjectReference) *ConfigMapVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapVolumeSource) {
		r.LocalObjectReference = v
	})
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (d *ConfigMapVolumeSourceDie) Items(v ...corev1.KeyToPath) *ConfigMapVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapVolumeSource) {
		r.Items = v
	})
}

// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (d *ConfigMapVolumeSourceDie) DefaultMode(v *int32) *ConfigMapVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapVolumeSource) {
		r.DefaultMode = v
	})
}

// optional specify whether the ConfigMap or its keys must be defined
func (d *ConfigMapVolumeSourceDie) Optional(v *bool) *ConfigMapVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ConfigMapVolumeSource) {
		r.Optional = v
	})
}

var VsphereVirtualDiskVolumeSourceBlank = (&VsphereVirtualDiskVolumeSourceDie{}).DieFeed(corev1.VsphereVirtualDiskVolumeSource{})

type VsphereVirtualDiskVolumeSourceDie struct {
	mutable bool
	r       corev1.VsphereVirtualDiskVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VsphereVirtualDiskVolumeSourceDie) DieImmutable(immutable bool) *VsphereVirtualDiskVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VsphereVirtualDiskVolumeSourceDie) DieFeed(r corev1.VsphereVirtualDiskVolumeSource) *VsphereVirtualDiskVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VsphereVirtualDiskVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VsphereVirtualDiskVolumeSourceDie) DieFeedPtr(r *corev1.VsphereVirtualDiskVolumeSource) *VsphereVirtualDiskVolumeSourceDie {
	if r == nil {
		r = &corev1.VsphereVirtualDiskVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *VsphereVirtualDiskVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *VsphereVirtualDiskVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.VsphereVirtualDiskVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *VsphereVirtualDiskVolumeSourceDie) DieRelease() corev1.VsphereVirtualDiskVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VsphereVirtualDiskVolumeSourceDie) DieReleasePtr() *corev1.VsphereVirtualDiskVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *VsphereVirtualDiskVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VsphereVirtualDiskVolumeSourceDie) DieStamp(fn func(r *corev1.VsphereVirtualDiskVolumeSource)) *VsphereVirtualDiskVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VsphereVirtualDiskVolumeSourceDie) DeepCopy() *VsphereVirtualDiskVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &VsphereVirtualDiskVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// volumePath is the path that identifies vSphere volume vmdk
func (d *VsphereVirtualDiskVolumeSourceDie) VolumePath(v string) *VsphereVirtualDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.VsphereVirtualDiskVolumeSource) {
		r.VolumePath = v
	})
}

// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (d *VsphereVirtualDiskVolumeSourceDie) FSType(v string) *VsphereVirtualDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.VsphereVirtualDiskVolumeSource) {
		r.FSType = v
	})
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (d *VsphereVirtualDiskVolumeSourceDie) StoragePolicyName(v string) *VsphereVirtualDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.VsphereVirtualDiskVolumeSource) {
		r.StoragePolicyName = v
	})
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (d *VsphereVirtualDiskVolumeSourceDie) StoragePolicyID(v string) *VsphereVirtualDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.VsphereVirtualDiskVolumeSource) {
		r.StoragePolicyID = v
	})
}

var QuobyteVolumeSourceBlank = (&QuobyteVolumeSourceDie{}).DieFeed(corev1.QuobyteVolumeSource{})

type QuobyteVolumeSourceDie struct {
	mutable bool
	r       corev1.QuobyteVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *QuobyteVolumeSourceDie) DieImmutable(immutable bool) *QuobyteVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *QuobyteVolumeSourceDie) DieFeed(r corev1.QuobyteVolumeSource) *QuobyteVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &QuobyteVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *QuobyteVolumeSourceDie) DieFeedPtr(r *corev1.QuobyteVolumeSource) *QuobyteVolumeSourceDie {
	if r == nil {
		r = &corev1.QuobyteVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *QuobyteVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *QuobyteVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.QuobyteVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *QuobyteVolumeSourceDie) DieRelease() corev1.QuobyteVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *QuobyteVolumeSourceDie) DieReleasePtr() *corev1.QuobyteVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *QuobyteVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *QuobyteVolumeSourceDie) DieStamp(fn func(r *corev1.QuobyteVolumeSource)) *QuobyteVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *QuobyteVolumeSourceDie) DeepCopy() *QuobyteVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &QuobyteVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
func (d *QuobyteVolumeSourceDie) Registry(v string) *QuobyteVolumeSourceDie {
	return d.DieStamp(func(r *corev1.QuobyteVolumeSource) {
		r.Registry = v
	})
}

// volume is a string that references an already created Quobyte volume by name.
func (d *QuobyteVolumeSourceDie) Volume(v string) *QuobyteVolumeSourceDie {
	return d.DieStamp(func(r *corev1.QuobyteVolumeSource) {
		r.Volume = v
	})
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
func (d *QuobyteVolumeSourceDie) ReadOnly(v bool) *QuobyteVolumeSourceDie {
	return d.DieStamp(func(r *corev1.QuobyteVolumeSource) {
		r.ReadOnly = v
	})
}

// user to map volume access to Defaults to serivceaccount user
func (d *QuobyteVolumeSourceDie) User(v string) *QuobyteVolumeSourceDie {
	return d.DieStamp(func(r *corev1.QuobyteVolumeSource) {
		r.User = v
	})
}

// group to map volume access to Default is no group
func (d *QuobyteVolumeSourceDie) Group(v string) *QuobyteVolumeSourceDie {
	return d.DieStamp(func(r *corev1.QuobyteVolumeSource) {
		r.Group = v
	})
}

// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (d *QuobyteVolumeSourceDie) Tenant(v string) *QuobyteVolumeSourceDie {
	return d.DieStamp(func(r *corev1.QuobyteVolumeSource) {
		r.Tenant = v
	})
}

var AzureDiskVolumeSourceBlank = (&AzureDiskVolumeSourceDie{}).DieFeed(corev1.AzureDiskVolumeSource{})

type AzureDiskVolumeSourceDie struct {
	mutable bool
	r       corev1.AzureDiskVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *AzureDiskVolumeSourceDie) DieImmutable(immutable bool) *AzureDiskVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *AzureDiskVolumeSourceDie) DieFeed(r corev1.AzureDiskVolumeSource) *AzureDiskVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &AzureDiskVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *AzureDiskVolumeSourceDie) DieFeedPtr(r *corev1.AzureDiskVolumeSource) *AzureDiskVolumeSourceDie {
	if r == nil {
		r = &corev1.AzureDiskVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *AzureDiskVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *AzureDiskVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.AzureDiskVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *AzureDiskVolumeSourceDie) DieRelease() corev1.AzureDiskVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *AzureDiskVolumeSourceDie) DieReleasePtr() *corev1.AzureDiskVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *AzureDiskVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *AzureDiskVolumeSourceDie) DieStamp(fn func(r *corev1.AzureDiskVolumeSource)) *AzureDiskVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *AzureDiskVolumeSourceDie) DeepCopy() *AzureDiskVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &AzureDiskVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// diskName is the Name of the data disk in the blob storage
func (d *AzureDiskVolumeSourceDie) DiskName(v string) *AzureDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureDiskVolumeSource) {
		r.DiskName = v
	})
}

// diskURI is the URI of data disk in the blob storage
func (d *AzureDiskVolumeSourceDie) DataDiskURI(v string) *AzureDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureDiskVolumeSource) {
		r.DataDiskURI = v
	})
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (d *AzureDiskVolumeSourceDie) CachingMode(v *corev1.AzureDataDiskCachingMode) *AzureDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureDiskVolumeSource) {
		r.CachingMode = v
	})
}

// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (d *AzureDiskVolumeSourceDie) FSType(v *string) *AzureDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureDiskVolumeSource) {
		r.FSType = v
	})
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *AzureDiskVolumeSourceDie) ReadOnly(v *bool) *AzureDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureDiskVolumeSource) {
		r.ReadOnly = v
	})
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (d *AzureDiskVolumeSourceDie) Kind(v *corev1.AzureDataDiskKind) *AzureDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.AzureDiskVolumeSource) {
		r.Kind = v
	})
}

var PhotonPersistentDiskVolumeSourceBlank = (&PhotonPersistentDiskVolumeSourceDie{}).DieFeed(corev1.PhotonPersistentDiskVolumeSource{})

type PhotonPersistentDiskVolumeSourceDie struct {
	mutable bool
	r       corev1.PhotonPersistentDiskVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PhotonPersistentDiskVolumeSourceDie) DieImmutable(immutable bool) *PhotonPersistentDiskVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PhotonPersistentDiskVolumeSourceDie) DieFeed(r corev1.PhotonPersistentDiskVolumeSource) *PhotonPersistentDiskVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PhotonPersistentDiskVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PhotonPersistentDiskVolumeSourceDie) DieFeedPtr(r *corev1.PhotonPersistentDiskVolumeSource) *PhotonPersistentDiskVolumeSourceDie {
	if r == nil {
		r = &corev1.PhotonPersistentDiskVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PhotonPersistentDiskVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *PhotonPersistentDiskVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.PhotonPersistentDiskVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PhotonPersistentDiskVolumeSourceDie) DieRelease() corev1.PhotonPersistentDiskVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PhotonPersistentDiskVolumeSourceDie) DieReleasePtr() *corev1.PhotonPersistentDiskVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PhotonPersistentDiskVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PhotonPersistentDiskVolumeSourceDie) DieStamp(fn func(r *corev1.PhotonPersistentDiskVolumeSource)) *PhotonPersistentDiskVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PhotonPersistentDiskVolumeSourceDie) DeepCopy() *PhotonPersistentDiskVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &PhotonPersistentDiskVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// pdID is the ID that identifies Photon Controller persistent disk
func (d *PhotonPersistentDiskVolumeSourceDie) PdID(v string) *PhotonPersistentDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.PhotonPersistentDiskVolumeSource) {
		r.PdID = v
	})
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (d *PhotonPersistentDiskVolumeSourceDie) FSType(v string) *PhotonPersistentDiskVolumeSourceDie {
	return d.DieStamp(func(r *corev1.PhotonPersistentDiskVolumeSource) {
		r.FSType = v
	})
}

var ProjectedVolumeSourceBlank = (&ProjectedVolumeSourceDie{}).DieFeed(corev1.ProjectedVolumeSource{})

type ProjectedVolumeSourceDie struct {
	mutable bool
	r       corev1.ProjectedVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ProjectedVolumeSourceDie) DieImmutable(immutable bool) *ProjectedVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ProjectedVolumeSourceDie) DieFeed(r corev1.ProjectedVolumeSource) *ProjectedVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ProjectedVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ProjectedVolumeSourceDie) DieFeedPtr(r *corev1.ProjectedVolumeSource) *ProjectedVolumeSourceDie {
	if r == nil {
		r = &corev1.ProjectedVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ProjectedVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ProjectedVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.ProjectedVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ProjectedVolumeSourceDie) DieRelease() corev1.ProjectedVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ProjectedVolumeSourceDie) DieReleasePtr() *corev1.ProjectedVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ProjectedVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ProjectedVolumeSourceDie) DieStamp(fn func(r *corev1.ProjectedVolumeSource)) *ProjectedVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ProjectedVolumeSourceDie) DeepCopy() *ProjectedVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &ProjectedVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// sources is the list of volume projections
func (d *ProjectedVolumeSourceDie) Sources(v ...corev1.VolumeProjection) *ProjectedVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ProjectedVolumeSource) {
		r.Sources = v
	})
}

// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (d *ProjectedVolumeSourceDie) DefaultMode(v *int32) *ProjectedVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ProjectedVolumeSource) {
		r.DefaultMode = v
	})
}

var VolumeProjectionBlank = (&VolumeProjectionDie{}).DieFeed(corev1.VolumeProjection{})

type VolumeProjectionDie struct {
	mutable bool
	r       corev1.VolumeProjection
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeProjectionDie) DieImmutable(immutable bool) *VolumeProjectionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeProjectionDie) DieFeed(r corev1.VolumeProjection) *VolumeProjectionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeProjectionDie) DieFeedPtr(r *corev1.VolumeProjection) *VolumeProjectionDie {
	if r == nil {
		r = &corev1.VolumeProjection{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeProjectionDie) DieFeedRawExtension(raw runtime.RawExtension) *VolumeProjectionDie {
	b, _ := json.Marshal(raw)
	r := corev1.VolumeProjection{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeProjectionDie) DieRelease() corev1.VolumeProjection {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeProjectionDie) DieReleasePtr() *corev1.VolumeProjection {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *VolumeProjectionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeProjectionDie) DieStamp(fn func(r *corev1.VolumeProjection)) *VolumeProjectionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeProjectionDie) DeepCopy() *VolumeProjectionDie {
	r := *d.r.DeepCopy()
	return &VolumeProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// secret information about the secret data to project
func (d *VolumeProjectionDie) Secret(v *corev1.SecretProjection) *VolumeProjectionDie {
	return d.DieStamp(func(r *corev1.VolumeProjection) {
		r.Secret = v
	})
}

// downwardAPI information about the downwardAPI data to project
func (d *VolumeProjectionDie) DownwardAPI(v *corev1.DownwardAPIProjection) *VolumeProjectionDie {
	return d.DieStamp(func(r *corev1.VolumeProjection) {
		r.DownwardAPI = v
	})
}

// configMap information about the configMap data to project
func (d *VolumeProjectionDie) ConfigMap(v *corev1.ConfigMapProjection) *VolumeProjectionDie {
	return d.DieStamp(func(r *corev1.VolumeProjection) {
		r.ConfigMap = v
	})
}

// serviceAccountToken is information about the serviceAccountToken data to project
func (d *VolumeProjectionDie) ServiceAccountToken(v *corev1.ServiceAccountTokenProjection) *VolumeProjectionDie {
	return d.DieStamp(func(r *corev1.VolumeProjection) {
		r.ServiceAccountToken = v
	})
}

var SecretProjectionBlank = (&SecretProjectionDie{}).DieFeed(corev1.SecretProjection{})

type SecretProjectionDie struct {
	mutable bool
	r       corev1.SecretProjection
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SecretProjectionDie) DieImmutable(immutable bool) *SecretProjectionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SecretProjectionDie) DieFeed(r corev1.SecretProjection) *SecretProjectionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SecretProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SecretProjectionDie) DieFeedPtr(r *corev1.SecretProjection) *SecretProjectionDie {
	if r == nil {
		r = &corev1.SecretProjection{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretProjectionDie) DieFeedRawExtension(raw runtime.RawExtension) *SecretProjectionDie {
	b, _ := json.Marshal(raw)
	r := corev1.SecretProjection{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *SecretProjectionDie) DieRelease() corev1.SecretProjection {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SecretProjectionDie) DieReleasePtr() *corev1.SecretProjection {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *SecretProjectionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SecretProjectionDie) DieStamp(fn func(r *corev1.SecretProjection)) *SecretProjectionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SecretProjectionDie) DeepCopy() *SecretProjectionDie {
	r := *d.r.DeepCopy()
	return &SecretProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *SecretProjectionDie) LocalObjectReference(v corev1.LocalObjectReference) *SecretProjectionDie {
	return d.DieStamp(func(r *corev1.SecretProjection) {
		r.LocalObjectReference = v
	})
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (d *SecretProjectionDie) Items(v ...corev1.KeyToPath) *SecretProjectionDie {
	return d.DieStamp(func(r *corev1.SecretProjection) {
		r.Items = v
	})
}

// optional field specify whether the Secret or its key must be defined
func (d *SecretProjectionDie) Optional(v *bool) *SecretProjectionDie {
	return d.DieStamp(func(r *corev1.SecretProjection) {
		r.Optional = v
	})
}

var DownwardAPIProjectionBlank = (&DownwardAPIProjectionDie{}).DieFeed(corev1.DownwardAPIProjection{})

type DownwardAPIProjectionDie struct {
	mutable bool
	r       corev1.DownwardAPIProjection
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *DownwardAPIProjectionDie) DieImmutable(immutable bool) *DownwardAPIProjectionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *DownwardAPIProjectionDie) DieFeed(r corev1.DownwardAPIProjection) *DownwardAPIProjectionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &DownwardAPIProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *DownwardAPIProjectionDie) DieFeedPtr(r *corev1.DownwardAPIProjection) *DownwardAPIProjectionDie {
	if r == nil {
		r = &corev1.DownwardAPIProjection{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *DownwardAPIProjectionDie) DieFeedRawExtension(raw runtime.RawExtension) *DownwardAPIProjectionDie {
	b, _ := json.Marshal(raw)
	r := corev1.DownwardAPIProjection{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *DownwardAPIProjectionDie) DieRelease() corev1.DownwardAPIProjection {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *DownwardAPIProjectionDie) DieReleasePtr() *corev1.DownwardAPIProjection {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *DownwardAPIProjectionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *DownwardAPIProjectionDie) DieStamp(fn func(r *corev1.DownwardAPIProjection)) *DownwardAPIProjectionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *DownwardAPIProjectionDie) DeepCopy() *DownwardAPIProjectionDie {
	r := *d.r.DeepCopy()
	return &DownwardAPIProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Items is a list of DownwardAPIVolume file
func (d *DownwardAPIProjectionDie) Items(v ...corev1.DownwardAPIVolumeFile) *DownwardAPIProjectionDie {
	return d.DieStamp(func(r *corev1.DownwardAPIProjection) {
		r.Items = v
	})
}

var ConfigMapProjectionBlank = (&ConfigMapProjectionDie{}).DieFeed(corev1.ConfigMapProjection{})

type ConfigMapProjectionDie struct {
	mutable bool
	r       corev1.ConfigMapProjection
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConfigMapProjectionDie) DieImmutable(immutable bool) *ConfigMapProjectionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConfigMapProjectionDie) DieFeed(r corev1.ConfigMapProjection) *ConfigMapProjectionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ConfigMapProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConfigMapProjectionDie) DieFeedPtr(r *corev1.ConfigMapProjection) *ConfigMapProjectionDie {
	if r == nil {
		r = &corev1.ConfigMapProjection{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapProjectionDie) DieFeedRawExtension(raw runtime.RawExtension) *ConfigMapProjectionDie {
	b, _ := json.Marshal(raw)
	r := corev1.ConfigMapProjection{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ConfigMapProjectionDie) DieRelease() corev1.ConfigMapProjection {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConfigMapProjectionDie) DieReleasePtr() *corev1.ConfigMapProjection {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ConfigMapProjectionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConfigMapProjectionDie) DieStamp(fn func(r *corev1.ConfigMapProjection)) *ConfigMapProjectionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConfigMapProjectionDie) DeepCopy() *ConfigMapProjectionDie {
	r := *d.r.DeepCopy()
	return &ConfigMapProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ConfigMapProjectionDie) LocalObjectReference(v corev1.LocalObjectReference) *ConfigMapProjectionDie {
	return d.DieStamp(func(r *corev1.ConfigMapProjection) {
		r.LocalObjectReference = v
	})
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (d *ConfigMapProjectionDie) Items(v ...corev1.KeyToPath) *ConfigMapProjectionDie {
	return d.DieStamp(func(r *corev1.ConfigMapProjection) {
		r.Items = v
	})
}

// optional specify whether the ConfigMap or its keys must be defined
func (d *ConfigMapProjectionDie) Optional(v *bool) *ConfigMapProjectionDie {
	return d.DieStamp(func(r *corev1.ConfigMapProjection) {
		r.Optional = v
	})
}

var ServiceAccountTokenProjectionBlank = (&ServiceAccountTokenProjectionDie{}).DieFeed(corev1.ServiceAccountTokenProjection{})

type ServiceAccountTokenProjectionDie struct {
	mutable bool
	r       corev1.ServiceAccountTokenProjection
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceAccountTokenProjectionDie) DieImmutable(immutable bool) *ServiceAccountTokenProjectionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceAccountTokenProjectionDie) DieFeed(r corev1.ServiceAccountTokenProjection) *ServiceAccountTokenProjectionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceAccountTokenProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceAccountTokenProjectionDie) DieFeedPtr(r *corev1.ServiceAccountTokenProjection) *ServiceAccountTokenProjectionDie {
	if r == nil {
		r = &corev1.ServiceAccountTokenProjection{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceAccountTokenProjectionDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceAccountTokenProjectionDie {
	b, _ := json.Marshal(raw)
	r := corev1.ServiceAccountTokenProjection{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceAccountTokenProjectionDie) DieRelease() corev1.ServiceAccountTokenProjection {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceAccountTokenProjectionDie) DieReleasePtr() *corev1.ServiceAccountTokenProjection {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ServiceAccountTokenProjectionDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceAccountTokenProjectionDie) DieStamp(fn func(r *corev1.ServiceAccountTokenProjection)) *ServiceAccountTokenProjectionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceAccountTokenProjectionDie) DeepCopy() *ServiceAccountTokenProjectionDie {
	r := *d.r.DeepCopy()
	return &ServiceAccountTokenProjectionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (d *ServiceAccountTokenProjectionDie) Audience(v string) *ServiceAccountTokenProjectionDie {
	return d.DieStamp(func(r *corev1.ServiceAccountTokenProjection) {
		r.Audience = v
	})
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (d *ServiceAccountTokenProjectionDie) ExpirationSeconds(v *int64) *ServiceAccountTokenProjectionDie {
	return d.DieStamp(func(r *corev1.ServiceAccountTokenProjection) {
		r.ExpirationSeconds = v
	})
}

// path is the path relative to the mount point of the file to project the token into.
func (d *ServiceAccountTokenProjectionDie) Path(v string) *ServiceAccountTokenProjectionDie {
	return d.DieStamp(func(r *corev1.ServiceAccountTokenProjection) {
		r.Path = v
	})
}

var PortworxVolumeSourceBlank = (&PortworxVolumeSourceDie{}).DieFeed(corev1.PortworxVolumeSource{})

type PortworxVolumeSourceDie struct {
	mutable bool
	r       corev1.PortworxVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PortworxVolumeSourceDie) DieImmutable(immutable bool) *PortworxVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PortworxVolumeSourceDie) DieFeed(r corev1.PortworxVolumeSource) *PortworxVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PortworxVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PortworxVolumeSourceDie) DieFeedPtr(r *corev1.PortworxVolumeSource) *PortworxVolumeSourceDie {
	if r == nil {
		r = &corev1.PortworxVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *PortworxVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *PortworxVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.PortworxVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *PortworxVolumeSourceDie) DieRelease() corev1.PortworxVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PortworxVolumeSourceDie) DieReleasePtr() *corev1.PortworxVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *PortworxVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PortworxVolumeSourceDie) DieStamp(fn func(r *corev1.PortworxVolumeSource)) *PortworxVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PortworxVolumeSourceDie) DeepCopy() *PortworxVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &PortworxVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// volumeID uniquely identifies a Portworx volume
func (d *PortworxVolumeSourceDie) VolumeID(v string) *PortworxVolumeSourceDie {
	return d.DieStamp(func(r *corev1.PortworxVolumeSource) {
		r.VolumeID = v
	})
}

// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (d *PortworxVolumeSourceDie) FSType(v string) *PortworxVolumeSourceDie {
	return d.DieStamp(func(r *corev1.PortworxVolumeSource) {
		r.FSType = v
	})
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *PortworxVolumeSourceDie) ReadOnly(v bool) *PortworxVolumeSourceDie {
	return d.DieStamp(func(r *corev1.PortworxVolumeSource) {
		r.ReadOnly = v
	})
}

var ScaleIOVolumeSourceBlank = (&ScaleIOVolumeSourceDie{}).DieFeed(corev1.ScaleIOVolumeSource{})

type ScaleIOVolumeSourceDie struct {
	mutable bool
	r       corev1.ScaleIOVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ScaleIOVolumeSourceDie) DieImmutable(immutable bool) *ScaleIOVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ScaleIOVolumeSourceDie) DieFeed(r corev1.ScaleIOVolumeSource) *ScaleIOVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ScaleIOVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ScaleIOVolumeSourceDie) DieFeedPtr(r *corev1.ScaleIOVolumeSource) *ScaleIOVolumeSourceDie {
	if r == nil {
		r = &corev1.ScaleIOVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ScaleIOVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ScaleIOVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.ScaleIOVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ScaleIOVolumeSourceDie) DieRelease() corev1.ScaleIOVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ScaleIOVolumeSourceDie) DieReleasePtr() *corev1.ScaleIOVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ScaleIOVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ScaleIOVolumeSourceDie) DieStamp(fn func(r *corev1.ScaleIOVolumeSource)) *ScaleIOVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ScaleIOVolumeSourceDie) DeepCopy() *ScaleIOVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &ScaleIOVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// gateway is the host address of the ScaleIO API Gateway.
func (d *ScaleIOVolumeSourceDie) Gateway(v string) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.Gateway = v
	})
}

// system is the name of the storage system as configured in ScaleIO.
func (d *ScaleIOVolumeSourceDie) System(v string) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.System = v
	})
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (d *ScaleIOVolumeSourceDie) SecretRef(v *corev1.LocalObjectReference) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.SecretRef = v
	})
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (d *ScaleIOVolumeSourceDie) SSLEnabled(v bool) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.SSLEnabled = v
	})
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (d *ScaleIOVolumeSourceDie) ProtectionDomain(v string) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.ProtectionDomain = v
	})
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (d *ScaleIOVolumeSourceDie) StoragePool(v string) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.StoragePool = v
	})
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (d *ScaleIOVolumeSourceDie) StorageMode(v string) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.StorageMode = v
	})
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (d *ScaleIOVolumeSourceDie) VolumeName(v string) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.VolumeName = v
	})
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
func (d *ScaleIOVolumeSourceDie) FSType(v string) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.FSType = v
	})
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *ScaleIOVolumeSourceDie) ReadOnly(v bool) *ScaleIOVolumeSourceDie {
	return d.DieStamp(func(r *corev1.ScaleIOVolumeSource) {
		r.ReadOnly = v
	})
}

var StorageOSVolumeSourceBlank = (&StorageOSVolumeSourceDie{}).DieFeed(corev1.StorageOSVolumeSource{})

type StorageOSVolumeSourceDie struct {
	mutable bool
	r       corev1.StorageOSVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *StorageOSVolumeSourceDie) DieImmutable(immutable bool) *StorageOSVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *StorageOSVolumeSourceDie) DieFeed(r corev1.StorageOSVolumeSource) *StorageOSVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &StorageOSVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *StorageOSVolumeSourceDie) DieFeedPtr(r *corev1.StorageOSVolumeSource) *StorageOSVolumeSourceDie {
	if r == nil {
		r = &corev1.StorageOSVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *StorageOSVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *StorageOSVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.StorageOSVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *StorageOSVolumeSourceDie) DieRelease() corev1.StorageOSVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *StorageOSVolumeSourceDie) DieReleasePtr() *corev1.StorageOSVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *StorageOSVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *StorageOSVolumeSourceDie) DieStamp(fn func(r *corev1.StorageOSVolumeSource)) *StorageOSVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *StorageOSVolumeSourceDie) DeepCopy() *StorageOSVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &StorageOSVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (d *StorageOSVolumeSourceDie) VolumeName(v string) *StorageOSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSVolumeSource) {
		r.VolumeName = v
	})
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (d *StorageOSVolumeSourceDie) VolumeNamespace(v string) *StorageOSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSVolumeSource) {
		r.VolumeNamespace = v
	})
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (d *StorageOSVolumeSourceDie) FSType(v string) *StorageOSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSVolumeSource) {
		r.FSType = v
	})
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (d *StorageOSVolumeSourceDie) ReadOnly(v bool) *StorageOSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSVolumeSource) {
		r.ReadOnly = v
	})
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (d *StorageOSVolumeSourceDie) SecretRef(v *corev1.LocalObjectReference) *StorageOSVolumeSourceDie {
	return d.DieStamp(func(r *corev1.StorageOSVolumeSource) {
		r.SecretRef = v
	})
}

var CSIVolumeSourceBlank = (&CSIVolumeSourceDie{}).DieFeed(corev1.CSIVolumeSource{})

type CSIVolumeSourceDie struct {
	mutable bool
	r       corev1.CSIVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CSIVolumeSourceDie) DieImmutable(immutable bool) *CSIVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CSIVolumeSourceDie) DieFeed(r corev1.CSIVolumeSource) *CSIVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CSIVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CSIVolumeSourceDie) DieFeedPtr(r *corev1.CSIVolumeSource) *CSIVolumeSourceDie {
	if r == nil {
		r = &corev1.CSIVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *CSIVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *CSIVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.CSIVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *CSIVolumeSourceDie) DieRelease() corev1.CSIVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CSIVolumeSourceDie) DieReleasePtr() *corev1.CSIVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *CSIVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CSIVolumeSourceDie) DieStamp(fn func(r *corev1.CSIVolumeSource)) *CSIVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CSIVolumeSourceDie) DeepCopy() *CSIVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &CSIVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
func (d *CSIVolumeSourceDie) Driver(v string) *CSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIVolumeSource) {
		r.Driver = v
	})
}

// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
func (d *CSIVolumeSourceDie) ReadOnly(v *bool) *CSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIVolumeSource) {
		r.ReadOnly = v
	})
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
func (d *CSIVolumeSourceDie) FSType(v *string) *CSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIVolumeSource) {
		r.FSType = v
	})
}

// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
func (d *CSIVolumeSourceDie) VolumeAttributes(v map[string]string) *CSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIVolumeSource) {
		r.VolumeAttributes = v
	})
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
func (d *CSIVolumeSourceDie) NodePublishSecretRef(v *corev1.LocalObjectReference) *CSIVolumeSourceDie {
	return d.DieStamp(func(r *corev1.CSIVolumeSource) {
		r.NodePublishSecretRef = v
	})
}

var EphemeralVolumeSourceBlank = (&EphemeralVolumeSourceDie{}).DieFeed(corev1.EphemeralVolumeSource{})

type EphemeralVolumeSourceDie struct {
	mutable bool
	r       corev1.EphemeralVolumeSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EphemeralVolumeSourceDie) DieImmutable(immutable bool) *EphemeralVolumeSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EphemeralVolumeSourceDie) DieFeed(r corev1.EphemeralVolumeSource) *EphemeralVolumeSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EphemeralVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EphemeralVolumeSourceDie) DieFeedPtr(r *corev1.EphemeralVolumeSource) *EphemeralVolumeSourceDie {
	if r == nil {
		r = &corev1.EphemeralVolumeSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *EphemeralVolumeSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *EphemeralVolumeSourceDie {
	b, _ := json.Marshal(raw)
	r := corev1.EphemeralVolumeSource{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *EphemeralVolumeSourceDie) DieRelease() corev1.EphemeralVolumeSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EphemeralVolumeSourceDie) DieReleasePtr() *corev1.EphemeralVolumeSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *EphemeralVolumeSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EphemeralVolumeSourceDie) DieStamp(fn func(r *corev1.EphemeralVolumeSource)) *EphemeralVolumeSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EphemeralVolumeSourceDie) DeepCopy() *EphemeralVolumeSourceDie {
	r := *d.r.DeepCopy()
	return &EphemeralVolumeSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//
// Required, must not be nil.
func (d *EphemeralVolumeSourceDie) VolumeClaimTemplate(v *corev1.PersistentVolumeClaimTemplate) *EphemeralVolumeSourceDie {
	return d.DieStamp(func(r *corev1.EphemeralVolumeSource) {
		r.VolumeClaimTemplate = v
	})
}

var KeyToPathBlank = (&KeyToPathDie{}).DieFeed(corev1.KeyToPath{})

type KeyToPathDie struct {
	mutable bool
	r       corev1.KeyToPath
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *KeyToPathDie) DieImmutable(immutable bool) *KeyToPathDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *KeyToPathDie) DieFeed(r corev1.KeyToPath) *KeyToPathDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &KeyToPathDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *KeyToPathDie) DieFeedPtr(r *corev1.KeyToPath) *KeyToPathDie {
	if r == nil {
		r = &corev1.KeyToPath{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *KeyToPathDie) DieFeedRawExtension(raw runtime.RawExtension) *KeyToPathDie {
	b, _ := json.Marshal(raw)
	r := corev1.KeyToPath{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *KeyToPathDie) DieRelease() corev1.KeyToPath {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *KeyToPathDie) DieReleasePtr() *corev1.KeyToPath {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *KeyToPathDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *KeyToPathDie) DieStamp(fn func(r *corev1.KeyToPath)) *KeyToPathDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *KeyToPathDie) DeepCopy() *KeyToPathDie {
	r := *d.r.DeepCopy()
	return &KeyToPathDie{
		mutable: d.mutable,
		r:       r,
	}
}

// key is the key to project.
func (d *KeyToPathDie) Key(v string) *KeyToPathDie {
	return d.DieStamp(func(r *corev1.KeyToPath) {
		r.Key = v
	})
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (d *KeyToPathDie) Path(v string) *KeyToPathDie {
	return d.DieStamp(func(r *corev1.KeyToPath) {
		r.Path = v
	})
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (d *KeyToPathDie) Mode(v *int32) *KeyToPathDie {
	return d.DieStamp(func(r *corev1.KeyToPath) {
		r.Mode = v
	})
}
