//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

var ConditionBlank = (&ConditionDie{}).DieFeed(metav1.Condition{})

type ConditionDie struct {
	mutable bool
	r       metav1.Condition
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConditionDie) DieImmutable(immutable bool) *ConditionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConditionDie) DieFeed(r metav1.Condition) *ConditionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ConditionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConditionDie) DieFeedPtr(r *metav1.Condition) *ConditionDie {
	if r == nil {
		r = &metav1.Condition{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *ConditionDie) DieRelease() metav1.Condition {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConditionDie) DieReleasePtr() *metav1.Condition {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConditionDie) DieStamp(fn func(r *metav1.Condition)) *ConditionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConditionDie) DeepCopy() *ConditionDie {
	r := *d.r.DeepCopy()
	return &ConditionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
func (d *ConditionDie) Type(v string) *ConditionDie {
	return d.DieStamp(func(r *metav1.Condition) {
		r.Type = v
	})
}

// status of the condition, one of True, False, Unknown.
func (d *ConditionDie) Status(v metav1.ConditionStatus) *ConditionDie {
	return d.DieStamp(func(r *metav1.Condition) {
		r.Status = v
	})
}

// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
func (d *ConditionDie) ObservedGeneration(v int64) *ConditionDie {
	return d.DieStamp(func(r *metav1.Condition) {
		r.ObservedGeneration = v
	})
}

// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (d *ConditionDie) LastTransitionTime(v metav1.Time) *ConditionDie {
	return d.DieStamp(func(r *metav1.Condition) {
		r.LastTransitionTime = v
	})
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
func (d *ConditionDie) Reason(v string) *ConditionDie {
	return d.DieStamp(func(r *metav1.Condition) {
		r.Reason = v
	})
}

// message is a human readable message indicating details about the transition. This may be an empty string.
func (d *ConditionDie) Message(v string) *ConditionDie {
	return d.DieStamp(func(r *metav1.Condition) {
		r.Message = v
	})
}

var ObjectMetaBlank = (&ObjectMetaDie{}).DieFeed(metav1.ObjectMeta{})

type ObjectMetaDie struct {
	mutable bool
	r       metav1.ObjectMeta
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ObjectMetaDie) DieImmutable(immutable bool) *ObjectMetaDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ObjectMetaDie) DieFeed(r metav1.ObjectMeta) *ObjectMetaDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ObjectMetaDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ObjectMetaDie) DieFeedPtr(r *metav1.ObjectMeta) *ObjectMetaDie {
	if r == nil {
		r = &metav1.ObjectMeta{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *ObjectMetaDie) DieRelease() metav1.ObjectMeta {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ObjectMetaDie) DieReleasePtr() *metav1.ObjectMeta {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ObjectMetaDie) DieStamp(fn func(r *metav1.ObjectMeta)) *ObjectMetaDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ObjectMetaDie) DeepCopy() *ObjectMetaDie {
	r := *d.r.DeepCopy()
	return &ObjectMetaDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (d *ObjectMetaDie) Name(v string) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.Name = v
	})
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
// If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
//
// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
func (d *ObjectMetaDie) GenerateName(v string) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.GenerateName = v
	})
}

// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
// Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
func (d *ObjectMetaDie) Namespace(v string) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.Namespace = v
	})
}

// SelfLink is a URL representing this object. Populated by the system. Read-only.
//
// DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
func (d *ObjectMetaDie) SelfLink(v string) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.SelfLink = v
	})
}

// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
//
// Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
func (d *ObjectMetaDie) UID(v types.UID) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.UID = v
	})
}

// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
//
// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (d *ObjectMetaDie) ResourceVersion(v string) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.ResourceVersion = v
	})
}

// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (d *ObjectMetaDie) Generation(v int64) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.Generation = v
	})
}

// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
//
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (d *ObjectMetaDie) CreationTimestamp(v metav1.Time) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.CreationTimestamp = v
	})
}

// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
//
// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (d *ObjectMetaDie) DeletionTimestamp(v *metav1.Time) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.DeletionTimestamp = v
	})
}

// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (d *ObjectMetaDie) DeletionGracePeriodSeconds(v *int64) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.DeletionGracePeriodSeconds = v
	})
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (d *ObjectMetaDie) Labels(v map[string]string) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.Labels = v
	})
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (d *ObjectMetaDie) Annotations(v map[string]string) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.Annotations = v
	})
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
func (d *ObjectMetaDie) OwnerReferences(v ...metav1.OwnerReference) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.OwnerReferences = v
	})
}

// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
func (d *ObjectMetaDie) Finalizers(v ...string) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.Finalizers = v
	})
}

// The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
func (d *ObjectMetaDie) ClusterName(v string) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.ClusterName = v
	})
}

// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
func (d *ObjectMetaDie) ManagedFields(v ...metav1.ManagedFieldsEntry) *ObjectMetaDie {
	return d.DieStamp(func(r *metav1.ObjectMeta) {
		r.ManagedFields = v
	})
}

var ManagedFieldsEntryBlank = (&ManagedFieldsEntryDie{}).DieFeed(metav1.ManagedFieldsEntry{})

type ManagedFieldsEntryDie struct {
	mutable bool
	r       metav1.ManagedFieldsEntry
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ManagedFieldsEntryDie) DieImmutable(immutable bool) *ManagedFieldsEntryDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ManagedFieldsEntryDie) DieFeed(r metav1.ManagedFieldsEntry) *ManagedFieldsEntryDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ManagedFieldsEntryDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ManagedFieldsEntryDie) DieFeedPtr(r *metav1.ManagedFieldsEntry) *ManagedFieldsEntryDie {
	if r == nil {
		r = &metav1.ManagedFieldsEntry{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *ManagedFieldsEntryDie) DieRelease() metav1.ManagedFieldsEntry {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ManagedFieldsEntryDie) DieReleasePtr() *metav1.ManagedFieldsEntry {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ManagedFieldsEntryDie) DieStamp(fn func(r *metav1.ManagedFieldsEntry)) *ManagedFieldsEntryDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ManagedFieldsEntryDie) DeepCopy() *ManagedFieldsEntryDie {
	r := *d.r.DeepCopy()
	return &ManagedFieldsEntryDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Manager is an identifier of the workflow managing these fields.
func (d *ManagedFieldsEntryDie) Manager(v string) *ManagedFieldsEntryDie {
	return d.DieStamp(func(r *metav1.ManagedFieldsEntry) {
		r.Manager = v
	})
}

// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
func (d *ManagedFieldsEntryDie) Operation(v metav1.ManagedFieldsOperationType) *ManagedFieldsEntryDie {
	return d.DieStamp(func(r *metav1.ManagedFieldsEntry) {
		r.Operation = v
	})
}

// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
func (d *ManagedFieldsEntryDie) APIVersion(v string) *ManagedFieldsEntryDie {
	return d.DieStamp(func(r *metav1.ManagedFieldsEntry) {
		r.APIVersion = v
	})
}

// Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
func (d *ManagedFieldsEntryDie) Time(v *metav1.Time) *ManagedFieldsEntryDie {
	return d.DieStamp(func(r *metav1.ManagedFieldsEntry) {
		r.Time = v
	})
}

// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
func (d *ManagedFieldsEntryDie) FieldsType(v string) *ManagedFieldsEntryDie {
	return d.DieStamp(func(r *metav1.ManagedFieldsEntry) {
		r.FieldsType = v
	})
}

// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
func (d *ManagedFieldsEntryDie) FieldsV1(v *metav1.FieldsV1) *ManagedFieldsEntryDie {
	return d.DieStamp(func(r *metav1.ManagedFieldsEntry) {
		r.FieldsV1 = v
	})
}

// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
func (d *ManagedFieldsEntryDie) Subresource(v string) *ManagedFieldsEntryDie {
	return d.DieStamp(func(r *metav1.ManagedFieldsEntry) {
		r.Subresource = v
	})
}

var LabelSelectorBlank = (&LabelSelectorDie{}).DieFeed(metav1.LabelSelector{})

type LabelSelectorDie struct {
	mutable bool
	r       metav1.LabelSelector
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LabelSelectorDie) DieImmutable(immutable bool) *LabelSelectorDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LabelSelectorDie) DieFeed(r metav1.LabelSelector) *LabelSelectorDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LabelSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LabelSelectorDie) DieFeedPtr(r *metav1.LabelSelector) *LabelSelectorDie {
	if r == nil {
		r = &metav1.LabelSelector{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *LabelSelectorDie) DieRelease() metav1.LabelSelector {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LabelSelectorDie) DieReleasePtr() *metav1.LabelSelector {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LabelSelectorDie) DieStamp(fn func(r *metav1.LabelSelector)) *LabelSelectorDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LabelSelectorDie) DeepCopy() *LabelSelectorDie {
	r := *d.r.DeepCopy()
	return &LabelSelectorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (d *LabelSelectorDie) MatchLabels(v map[string]string) *LabelSelectorDie {
	return d.DieStamp(func(r *metav1.LabelSelector) {
		r.MatchLabels = v
	})
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (d *LabelSelectorDie) MatchExpressions(v ...metav1.LabelSelectorRequirement) *LabelSelectorDie {
	return d.DieStamp(func(r *metav1.LabelSelector) {
		r.MatchExpressions = v
	})
}
